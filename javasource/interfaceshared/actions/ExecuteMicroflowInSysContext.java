// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package interfaceshared.actions;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IDataType;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Same action as ExecuteMicroflow_1, except the microflow will be executed in a new system context.
 */
public class ExecuteMicroflowInSysContext extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String microflowName;
	private java.lang.String arg1name;
	private IMendixObject arg1value;

	public ExecuteMicroflowInSysContext(IContext context, java.lang.String microflowName, java.lang.String arg1name, IMendixObject arg1value)
	{
		super(context);
		this.microflowName = microflowName;
		this.arg1name = arg1name;
		this.arg1value = arg1value;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		Object[] args = new Object[] {arg1name, arg1value};
		if (microflowName == null || microflowName.isEmpty())
			throw new Exception("Assertion: No microflow provided");
		if (!Core.getMicroflowNames().contains(microflowName))
			throw new Exception("Assertion: microflow not found: " + microflowName);
		if (args.length % 2 != 0)
			throw new Exception("Assertion: odd number of dynamic arguments provided, please name every argument: " + args.length);
		
		Map<String, Object> params = new LinkedHashMap<String, Object>();
		Map< String, IDataType > attributes = Core.getInputParameters(microflowName);
		for(int i = 0; i < args.length; i+= 2) if (args[i] != null){
			params.put(args[i].toString(), args[i + 1]);
			if(attributes.get(args[i].toString()) == null){
				throw new Exception("Assertion: Non existion attribute provided for microflow: " + microflowName + " attribute: " + args[i].toString() + " is not a valid input param.");
			}
			else{
				if(args[i + 1] != null){
					String type = ((IMendixObject) args[i + 1]).getType();
					if(attributes.get(args[i].toString()).getDSLType().equals(type)){
					}
					else{
						//Retrieve a list of all entities that are generalization of the parameter entity
						List<String> generalization = Core.getSubtypesOf(attributes.get(args[i].toString()).getDSLType());
						boolean isSubClass = false;
						for(int j = 0; j < generalization.size(); j++) if (generalization.get(j) != null){
							if(generalization.get(j).equals(type)){
								j = generalization.size();
								isSubClass = true;
							}
						}
						if(!isSubClass){
							throw new Exception("Assertion: Wrong object type provided for attribute: " + args[i].toString() +" , the object type provided is: " + type + ", this is not the same as, or a sub class of the object type of the attribute which is: " + attributes.get(args[i].toString()).getDSLType());
						}
					}
				}				
			}
		}
		if(params.size()!= attributes.size()){
			throw new Exception("Assertion: Wrong number of parameters for this microflow, the microflow requires " + attributes.size() + " parameter(s), this ExecuteMicroflow java action provides one parameter.");
		}
		return Core.execute(Core.createSystemContext(), microflowName, params);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "ExecuteMicroflowInSysContext";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
