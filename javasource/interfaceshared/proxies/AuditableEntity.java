// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceshared.proxies;

public class AuditableEntity
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject auditableEntityMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceShared.AuditableEntity";

	public AuditableEntity(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceShared.AuditableEntity"));
	}

	protected AuditableEntity(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject auditableEntityMendixObject)
	{
		if (auditableEntityMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("InterfaceShared.AuditableEntity", auditableEntityMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceShared.AuditableEntity");

		this.auditableEntityMendixObject = auditableEntityMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'AuditableEntity.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfaceshared.proxies.AuditableEntity initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfaceshared.proxies.AuditableEntity.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfaceshared.proxies.AuditableEntity initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		if (com.mendix.core.Core.isSubClassOf("InterfaceAffectedCIs.AffectedCI", mendixObject.getType()))
			return interfaceaffectedcis.proxies.AffectedCI.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequests.ChangeSpecificFields", mendixObject.getType()))
			return interfacerequests.proxies.ChangeSpecificFields.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.DefaultTableItem", mendixObject.getType()))
			return interfaceconfiguration.proxies.DefaultTableItem.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequests.DynamicAttribute", mendixObject.getType()))
			return interfacerequests.proxies.DynamicAttribute.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.DynamicTable", mendixObject.getType()))
			return interfaceconfiguration.proxies.DynamicTable.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceExternalReferences.ExternalReference", mendixObject.getType()))
			return interfaceexternalreferences.proxies.ExternalReference.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.InterfaceConfiguration", mendixObject.getType()))
			return interfaceconfiguration.proxies.InterfaceConfiguration.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.InterfaceMessageConfiguration", mendixObject.getType()))
			return interfaceconfiguration.proxies.InterfaceMessageConfiguration.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceLDAP.LDAPInbox", mendixObject.getType()))
			return interfaceldap.proxies.LDAPInbox.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequests.Location", mendixObject.getType()))
			return interfacerequests.proxies.Location.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceShared.Message", mendixObject.getType()))
			return interfaceshared.proxies.Message.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceNotes.Note", mendixObject.getType()))
			return interfacenotes.proxies.Note.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceAffectedCIs.OutgoingAffectedCIsConfirmationExpertDesk", mendixObject.getType()))
			return interfaceaffectedcis.proxies.OutgoingAffectedCIsConfirmationExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceAffectedCIs.OutgoingAffectedCIsExpertDesk", mendixObject.getType()))
			return interfaceaffectedcis.proxies.OutgoingAffectedCIsExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceAttachments.OutgoingAttachmentsConfirmationExpertDesk", mendixObject.getType()))
			return interfaceattachments.proxies.OutgoingAttachmentsConfirmationExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceAttachments.OutgoingAttachmentsExpertDesk", mendixObject.getType()))
			return interfaceattachments.proxies.OutgoingAttachmentsExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceContractAspectUpdates.OutgoingContractAspectUpdateConfirmationExpertDesk", mendixObject.getType()))
			return interfacecontractaspectupdates.proxies.OutgoingContractAspectUpdateConfirmationExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceContractAspectUpdates.OutgoingContractAspectUpdateExpertDesk", mendixObject.getType()))
			return interfacecontractaspectupdates.proxies.OutgoingContractAspectUpdateExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceExternalReferences.OutgoingExternalReferencesConfirmationExpertDesk", mendixObject.getType()))
			return interfaceexternalreferences.proxies.OutgoingExternalReferencesConfirmationExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceExternalReferences.OutgoingExternalReferencesExpertDesk", mendixObject.getType()))
			return interfaceexternalreferences.proxies.OutgoingExternalReferencesExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceShared.OutgoingHeartBeatConfirmationExpertDesk", mendixObject.getType()))
			return interfaceshared.proxies.OutgoingHeartBeatConfirmationExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceShared.OutgoingHeartBeatExpertDesk", mendixObject.getType()))
			return interfaceshared.proxies.OutgoingHeartBeatExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceNotes.OutgoingNotesConfirmationExpertDesk", mendixObject.getType()))
			return interfacenotes.proxies.OutgoingNotesConfirmationExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceNotes.OutgoingNotesExpertDesk", mendixObject.getType()))
			return interfacenotes.proxies.OutgoingNotesExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRelations.OutgoingRelationsConfirmationExpertDesk", mendixObject.getType()))
			return interfacerelations.proxies.OutgoingRelationsConfirmationExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRelations.OutgoingRelationsExpertDesk", mendixObject.getType()))
			return interfacerelations.proxies.OutgoingRelationsExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequests.OutgoingRequestConfirmationExpertDesk", mendixObject.getType()))
			return interfacerequests.proxies.OutgoingRequestConfirmationExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequests.OutgoingRequestExpertDesk", mendixObject.getType()))
			return interfacerequests.proxies.OutgoingRequestExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequestUpdate.OutgoingRequestUpdateConfirmationExpertDesk", mendixObject.getType()))
			return interfacerequestupdate.proxies.OutgoingRequestUpdateConfirmationExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequestUpdate.OutgoingRequestUpdateExpertDesk", mendixObject.getType()))
			return interfacerequestupdate.proxies.OutgoingRequestUpdateExpertDesk.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequestUpdate.PausedTime", mendixObject.getType()))
			return interfacerequestupdate.proxies.PausedTime.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequests.Person", mendixObject.getType()))
			return interfacerequests.proxies.Person.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequests.ProblemSpecificFields", mendixObject.getType()))
			return interfacerequests.proxies.ProblemSpecificFields.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRelations.Relation", mendixObject.getType()))
			return interfacerelations.proxies.Relation.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequests.Room", mendixObject.getType()))
			return interfacerequests.proxies.Room.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.SendFaultFilter", mendixObject.getType()))
			return interfaceconfiguration.proxies.SendFaultFilter.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequests.ServiceRequestSpecificFields", mendixObject.getType()))
			return interfacerequests.proxies.ServiceRequestSpecificFields.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.StateTransitionTranslationTable", mendixObject.getType()))
			return interfaceconfiguration.proxies.StateTransitionTranslationTable.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequestUpdate.StatusUpdate", mendixObject.getType()))
			return interfacerequestupdate.proxies.StatusUpdate.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.SystemEndPoint", mendixObject.getType()))
			return interfaceconfiguration.proxies.SystemEndPoint.initialize(context, mendixObject);

		return new interfaceshared.proxies.AuditableEntity(context, mendixObject);
	}

	public static interfaceshared.proxies.AuditableEntity load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfaceshared.proxies.AuditableEntity.initialize(context, mendixObject);
	}

	public static java.util.List<? extends interfaceshared.proxies.AuditableEntity> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceshared.proxies.AuditableEntity> result = new java.util.ArrayList<interfaceshared.proxies.AuditableEntity>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceShared.AuditableEntity" + xpathConstraint))
			result.add(interfaceshared.proxies.AuditableEntity.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return auditableEntityMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfaceshared.proxies.AuditableEntity that = (interfaceshared.proxies.AuditableEntity) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceShared.AuditableEntity";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
