// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceshared.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the InterfaceShared module
	public static void aC_AuditableEntity(IContext context, interfaceshared.proxies.AuditableEntity _auditableEntity)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("AuditableEntity", _auditableEntity == null ? null : _auditableEntity.getMendixObject());
			Core.execute(context, "InterfaceShared.AC_AuditableEntity", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aC_CheckCreateRequestEvent(IContext context, interfaceshared.proxies.MessageStatusHistory _messageStatusHistory)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MessageStatusHistory", _messageStatusHistory == null ? null : _messageStatusHistory.getMendixObject());
			Core.execute(context, "InterfaceShared.AC_CheckCreateRequestEvent", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aC_CommitProcessingPartParent(IContext context, interfaceshared.proxies.ProcessingPart _processingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.AC_CommitProcessingPartParent", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aC_RequestEventDelayedInterfaceEventCreateResultingRequestEvent(IContext context, process.proxies.RequestEventDelayedInterfaceHandling _requestEventDelayedInterfaceHandling)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestEventDelayedInterfaceHandling", _requestEventDelayedInterfaceHandling == null ? null : _requestEventDelayedInterfaceHandling.getMendixObject());
			Core.execute(context, "InterfaceShared.AC_RequestEventDelayedInterfaceEventCreateResultingRequestEvent", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aC_SetRepeatingStructureProcessingAttemptRepeatingStructureType(IContext context, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.AC_SetRepeatingStructureProcessingAttemptRepeatingStructureType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aC_UpdateProcessingLogParentProcessingPart(IContext context, interfaceshared.proxies.ProcessingLog _processingLog)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingLog", _processingLog == null ? null : _processingLog.getMendixObject());
			Core.execute(context, "InterfaceShared.AC_UpdateProcessingLogParentProcessingPart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aD_AuditableEntity(IContext context, interfaceshared.proxies.AuditableEntity _location)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Location", _location == null ? null : _location.getMendixObject());
			Core.execute(context, "InterfaceShared.AD_AuditableEntity", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addAttemptMonitoring(IContext context, interfaceshared.proxies.MonitoringEventType _monitoringEventType, interfaceshared.proxies.Attempt _attempt, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MonitoringEventType", _monitoringEventType == null ? null : _monitoringEventType.name());
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			Core.execute(context, "InterfaceShared.AddAttemptMonitoring", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addAttemptProcessingLoggingString(IContext context, java.lang.String _logMessage, boolean _addConsoleLogging, mendix.proxies.Level _logLevel, java.lang.String _logNode, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogMessage", _logMessage);
			params.put("AddConsoleLogging", _addConsoleLogging);
			params.put("LogLevel", _logLevel == null ? null : _logLevel.name());
			params.put("LogNode", _logNode);
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			Core.execute(context, "InterfaceShared.AddAttemptProcessingLoggingString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addInterfaceLoggingStringWithConsoleOption(IContext context, java.lang.String _logMessage, mendix.proxies.Level _logLevel, java.lang.String _logNode, java.lang.String _interfaceName)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogMessage", _logMessage);
			params.put("LogLevel", _logLevel == null ? null : _logLevel.name());
			params.put("LogNode", _logNode);
			params.put("InterfaceName", _interfaceName);
			Core.execute(context, "InterfaceShared.AddInterfaceLoggingStringWithConsoleOption", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addInterfaceMessageConfigurationProcessingLoggingString(IContext context, java.lang.String _logMessage, boolean _addConsoleLogging, mendix.proxies.Level _logLevel, java.lang.String _logNode, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogMessage", _logMessage);
			params.put("AddConsoleLogging", _addConsoleLogging);
			params.put("LogLevel", _logLevel == null ? null : _logLevel.name());
			params.put("LogNode", _logNode);
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			Core.execute(context, "InterfaceShared.AddInterfaceMessageConfigurationProcessingLoggingString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addMessageLoggingStringWithConsoleOption(IContext context, java.lang.String _logMessage, mendix.proxies.Level _logLevel, java.lang.String _logNode, java.lang.String _messageID)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogMessage", _logMessage);
			params.put("LogLevel", _logLevel == null ? null : _logLevel.name());
			params.put("LogNode", _logNode);
			params.put("MessageID", _messageID);
			Core.execute(context, "InterfaceShared.AddMessageLoggingStringWithConsoleOption", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addMessageMonitoring(IContext context, interfaceshared.proxies.Message _message, interfaceshared.proxies.MonitoringEventType _monitoringEventType, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			params.put("MonitoringEventType", _monitoringEventType == null ? null : _monitoringEventType.name());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			Core.execute(context, "InterfaceShared.AddMessageMonitoring", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addMessageProcessingLoggingString(IContext context, java.lang.String _logMessage, boolean _addConsoleLogging, mendix.proxies.Level _logLevel, java.lang.String _logNode, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogMessage", _logMessage);
			params.put("AddConsoleLogging", _addConsoleLogging);
			params.put("LogLevel", _logLevel == null ? null : _logLevel.name());
			params.put("LogNode", _logNode);
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "InterfaceShared.AddMessageProcessingLoggingString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addProcessingPartLoggingString(IContext context, java.lang.String _logMessage, boolean _addConsoleLogging, mendix.proxies.Level _logLevel, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _processingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogMessage", _logMessage);
			params.put("AddConsoleLogging", _addConsoleLogging);
			params.put("LogLevel", _logLevel == null ? null : _logLevel.name());
			params.put("LogNode", _logNode);
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.AddProcessingPartLoggingString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addProcessingPartLoggingStringSetFailed(IContext context, java.lang.String _logMessage, boolean _addConsoleLogging, mendix.proxies.Level _logLevel, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _processingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogMessage", _logMessage);
			params.put("AddConsoleLogging", _addConsoleLogging);
			params.put("LogLevel", _logLevel == null ? null : _logLevel.name());
			params.put("LogNode", _logNode);
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.AddProcessingPartLoggingStringSetFailed", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void asynchronousConfirmationSendingIncomingMessage(IContext context, interfaceshared.proxies.ProcessingAttempt _processingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingAttempt", _processingAttempt == null ? null : _processingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.AsynchronousConfirmationSendingIncomingMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void asynchronousConfirmationSendingIncomingMessages(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.AsynchronousConfirmationSendingIncomingMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void asynchronousProcessIncomingMessage(IContext context, interfaceshared.proxies.ProcessingAttempt _processingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingAttempt", _processingAttempt == null ? null : _processingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.AsynchronousProcessIncomingMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void asynchronousProcessIncomingMessages(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.AsynchronousProcessIncomingMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditAuditableEntityAfterCommit(IContext context, interfaceshared.proxies.AuditableEntity _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "InterfaceShared.AuditAuditableEntityAfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditAuditableEntityAfterDelete(IContext context, interfaceshared.proxies.AuditableEntity _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.AuditAuditableEntityAfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bC_FillEventDateString(IContext context, interfaceshared.proxies.Monitoring _monitoring)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Monitoring", _monitoring == null ? null : _monitoring.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.BC_FillEventDateString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bC_GetRequestMaster(IContext context, interfaceshared.proxies.InterfaceEvent _interfaceEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InterfaceEvent", _interfaceEvent == null ? null : _interfaceEvent.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.BC_GetRequestMaster", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bC_MendixWebServiceHeader(IContext context, interfaceshared.proxies.MendixWebServiceHeader _mendixWebServiceHeader)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MendixWebServiceHeader", _mendixWebServiceHeader == null ? null : _mendixWebServiceHeader.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.BC_MendixWebServiceHeader", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkAttemptsProcessing(IContext context, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.CheckAttemptsProcessing", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkCreateStatusHistory(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.CheckCreateStatusHistory", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 2321
	 * When there is no request event available. Processing the delayed request event record must stop and be set to true. Otherwise will cause loop.
	 */
	public static void checkDelayedRequestEvent(IContext context, process.proxies.RequestEventDelayedInterfaceHandling _requestEventDelayedInterfaceHandling)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestEventDelayedInterfaceHandling", _requestEventDelayedInterfaceHandling == null ? null : _requestEventDelayedInterfaceHandling.getMendixObject());
			Core.execute(context, "InterfaceShared.CheckDelayedRequestEvent", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkDelayedRequestEvents(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.CheckDelayedRequestEvents", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkIfPersonIsPartOfOrganisation(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage, nap.proxies.Organisation _organisation, boolean _addPersonToGroupOnFailure)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Organisation", _organisation == null ? null : _organisation.getMendixObject());
			params.put("AddPersonToGroupOnFailure", _addPersonToGroupOnFailure);
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.CheckIfPersonIsPartOfOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkInterfaceHasPermissionOnRequest(IContext context, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, process.proxies.Request _request, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("Request", _request == null ? null : _request.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.CheckInterfaceHasPermissionOnRequest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkIsIncomingMessage(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.CheckIsIncomingMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkIsOutgoingMessage(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.CheckIsOutgoingMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkMessagesForAsynchronousTimeOut(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.CheckMessagesForAsynchronousTimeOut", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkMessageUnicity(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage, interfaceshared.proxies.ProcessingPart _parentProcessingPart, java.lang.String _logNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LogNode", _logNode);
			Core.execute(context, "InterfaceShared.CheckMessageUnicity", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkProcessingParts(IContext context, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.CheckProcessingParts", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkQueuedMessage(IContext context, interfaceshared.proxies.OutgoingMessage _outgoingMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			Core.execute(context, "InterfaceShared.CheckQueuedMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkQueuedMessages(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.CheckQueuedMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkQueuing(IContext context, interfaceshared.proxies.InterfaceEvent _interfaceEvent, java.lang.String _logNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InterfaceEvent", _interfaceEvent == null ? null : _interfaceEvent.getMendixObject());
			params.put("LogNode", _logNode);
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.CheckQueuing", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkRequestEventProcessing(IContext context, trigger.proxies.TriggerSetup _triggerSetup, process.proxies.Request _request, process.proxies.RequestEvent _requestEvent, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, java.lang.String _interfaceEventID, process.proxies.ExternalReference _interfaceExternalReference)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			params.put("Request", _request == null ? null : _request.getMendixObject());
			params.put("RequestEvent", _requestEvent == null ? null : _requestEvent.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("InterfaceEventID", _interfaceEventID);
			params.put("InterfaceExternalReference", _interfaceExternalReference == null ? null : _interfaceExternalReference.getMendixObject());
			Core.execute(context, "InterfaceShared.CheckRequestEventProcessing", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 920858
	 * Parameter changed om CheckTemplateTriggerCondition
	 */
	public static boolean checkRequestSyncRequirement(IContext context, interfaceshared.proxies.MessageType _messageType, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, process.proxies.Request _request)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MessageType", _messageType == null ? null : _messageType.name());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("Request", _request == null ? null : _request.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.CheckRequestSyncRequirement", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkRetry(IContext context, interfaceshared.proxies.SendFault _sendFault, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, interfaceshared.proxies.SendAttempt _sendAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SendFault", _sendFault == null ? null : _sendFault.getMendixObject());
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("SendAttempt", _sendAttempt == null ? null : _sendAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.CheckRetry", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkStatusInterfaces(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.CheckStatusInterfaces", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkStatusInterfaceUsingHeartBeat(IContext context, interfaceconfiguration.proxies.WebServiceInterfaceConfiguration _webServiceInterfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("WebServiceInterfaceConfiguration", _webServiceInterfaceConfiguration == null ? null : _webServiceInterfaceConfiguration.getMendixObject());
			Core.execute(context, "InterfaceShared.CheckStatusInterfaceUsingHeartBeat", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 920858
	 * Parameter changed om CheckTemplateTriggerCondition
	 */
	public static void checkUnsyncedInterfaceExternalReference(IContext context, process.proxies.ExternalReference _unsyncedInterfaceExternalReference)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UnsyncedInterfaceExternalReference", _unsyncedInterfaceExternalReference == null ? null : _unsyncedInterfaceExternalReference.getMendixObject());
			Core.execute(context, "InterfaceShared.CheckUnsyncedInterfaceExternalReference", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkUnsyncedInterfaceExternalReferences(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.CheckUnsyncedInterfaceExternalReferences", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cleanUpFailedInterfaceEvents(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.CleanUpFailedInterfaceEvents", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 993440
	 * Added microflow to delete Error messages
	 */
	public static void cleanUpOldMessages(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.CleanUpOldMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractSelection(IContext context, slm.proxies.Service_Process _serviceProcess, slm.proxies.Service _service, slm.proxies.Impact _impact, cmdb.proxies.ConfigurationItem _configurationItem, nap.proxies.Organisation _deliveringOrganisation, boolean _isTask, boolean _blocking, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, interfaceshared.proxies.ProcessingPart _parentProcessingPart, slm.proxies.Urgency _urgency, nap.proxies.Organisation _receivingOrganisation, slm.proxies.Priority _priority)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			params.put("Service", _service == null ? null : _service.getMendixObject());
			params.put("Impact", _impact == null ? null : _impact.getMendixObject());
			params.put("ConfigurationItem", _configurationItem == null ? null : _configurationItem.getMendixObject());
			params.put("DeliveringOrganisation", _deliveringOrganisation == null ? null : _deliveringOrganisation.getMendixObject());
			params.put("IsTask", _isTask);
			params.put("Blocking", _blocking);
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("Urgency", _urgency == null ? null : _urgency.getMendixObject());
			params.put("ReceivingOrganisation", _receivingOrganisation == null ? null : _receivingOrganisation.getMendixObject());
			params.put("Priority", _priority == null ? null : _priority.getMendixObject());
			Core.execute(context, "InterfaceShared.ContractSelection", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String convertAddUpdateDeleteOperationEnumToString(IContext context, interfaceshared.proxies.AddUpdateDeleteOperation _operationEnum)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OperationEnum", _operationEnum == null ? null : _operationEnum.name());
			return (java.lang.String)Core.execute(context, "InterfaceShared.ConvertAddUpdateDeleteOperationEnumToString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String convertChangeTypeEnumToString(IContext context, process.proxies.ChangeType _changeType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChangeType", _changeType == null ? null : _changeType.name());
			return (java.lang.String)Core.execute(context, "InterfaceShared.ConvertChangeTypeEnumToString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String convertCountryEnumToString(IContext context, nap.proxies.Countries _countryEnum)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("CountryEnum", _countryEnum == null ? null : _countryEnum.name());
			return (java.lang.String)Core.execute(context, "InterfaceShared.ConvertCountryEnumToString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String convertCustomerSatisfactionEnumToString(IContext context, process.proxies.ProcessSatisfaction _customerSatisfactionEnum)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("CustomerSatisfactionEnum", _customerSatisfactionEnum == null ? null : _customerSatisfactionEnum.name());
			return (java.lang.String)Core.execute(context, "InterfaceShared.ConvertCustomerSatisfactionEnumToString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String convertPersonTitleEnumToString(IContext context, nap.proxies.Titles _personTitleEnum)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonTitleEnum", _personTitleEnum == null ? null : _personTitleEnum.name());
			return (java.lang.String)Core.execute(context, "InterfaceShared.ConvertPersonTitleEnumToString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String convertProblemTypeEnumToString(IContext context, process.proxies.ProblemType _problemType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProblemType", _problemType == null ? null : _problemType.name());
			return (java.lang.String)Core.execute(context, "InterfaceShared.ConvertProblemTypeEnumToString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String convertRelationTypeEnumToString(IContext context, process.proxies.RelationTypes _relationType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RelationType", _relationType == null ? null : _relationType.name());
			return (java.lang.String)Core.execute(context, "InterfaceShared.ConvertRelationTypeEnumToString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String convertRequestCreationEnumToString(IContext context, process.proxies.RequestCreation _requestCreation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestCreation", _requestCreation == null ? null : _requestCreation.name());
			return (java.lang.String)Core.execute(context, "InterfaceShared.ConvertRequestCreationEnumToString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean createSingle(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.CreateSingle", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 993440
	 * Added clear list action to delete objects from memory.
	 */
	public static void deleteChunked(IContext context, java.util.Date _fromDateTime, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("FromDateTime", _fromDateTime);
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			Core.execute(context, "InterfaceShared.DeleteChunked", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 993440
	 * Microflow for deleting interface Error Messages
	 * Added clear list action to delete objects from memory.
	 */
	public static void deleteChunkedErrorMessages(IContext context, java.util.Date _fromDateTime, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("FromDateTime", _fromDateTime);
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			Core.execute(context, "InterfaceShared.DeleteChunkedErrorMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String dS_GetAttemptLog(IContext context, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			return (java.lang.String)Core.execute(context, "InterfaceShared.DS_GetAttemptLog", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String fillInterfaceName(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			return (java.lang.String)Core.execute(context, "InterfaceShared.FillInterfaceName", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.MessageDirection fIllMessageDirection(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			java.lang.String result = (java.lang.String)Core.execute(context, "InterfaceShared.FIllMessageDirection", params);
			if (result == null)
				return null;
			return interfaceshared.proxies.MessageDirection.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean fillMessageFields(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.FillMessageFields", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.MessageType fillMessageType(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			java.lang.String result = (java.lang.String)Core.execute(context, "InterfaceShared.FillMessageType", params);
			if (result == null)
				return null;
			return interfaceshared.proxies.MessageType.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static process.proxies.Request findRequest(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage, java.lang.String _logNode, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, interfaceshared.proxies.ProcessingPart _parentProcessingPart, boolean _blocking)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("Blocking", _blocking);
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.FindRequest", params);
			return result == null ? null : process.proxies.Request.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static process.proxies.Request findRequestUsingInternalReferenceID(IContext context, java.lang.String _internalReferenceID)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InternalReferenceID", _internalReferenceID);
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.FindRequestUsingInternalReferenceID", params);
			return result == null ? null : process.proxies.Request.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Person getAssignedNAPPersonFromMessage(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.GetAssignedNAPPersonFromMessage", params);
			return result == null ? null : nap.proxies.Person.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfacerequests.proxies.Person getAssignedPersonFromMessage(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.GetAssignedPersonFromMessage", params);
			return result == null ? null : interfacerequests.proxies.Person.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm_notifications.proxies.Commitment getCommitment(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage, slm.proxies.Contract _contract, interfaceshared.proxies.ProcessingPart _processingPart, java.lang.String _logNode, slm.proxies.Service_Process _serviceProcess, slm.proxies.Service _service, slm.proxies.Impact _impact, cmdb.proxies.ConfigurationItem _configurationItem, slm.proxies.Urgency _urgency, slm.proxies.IUP_Combination _iUP_Combination)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			params.put("Service", _service == null ? null : _service.getMendixObject());
			params.put("Impact", _impact == null ? null : _impact.getMendixObject());
			params.put("ConfigurationItem", _configurationItem == null ? null : _configurationItem.getMendixObject());
			params.put("Urgency", _urgency == null ? null : _urgency.getMendixObject());
			params.put("IUP_Combination", _iUP_Combination == null ? null : _iUP_Combination.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.GetCommitment", params);
			return result == null ? null : slm_notifications.proxies.Commitment.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 993440
	 * Microflow for GettingErrorMessagesInChunk
	 */
	public static java.util.List<interfaceshared.proxies.Message> getErrorMessagesToBeDeletedChunk(IContext context, java.lang.Long _chunkCount, java.lang.Long _numberOfChunks, java.lang.Long _completeMessageListCount, java.lang.Long _chunkSize, java.util.Date _fromDateTime, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChunkCount", _chunkCount);
			params.put("NumberOfChunks", _numberOfChunks);
			params.put("CompleteMessageListCount", _completeMessageListCount);
			params.put("ChunkSize", _chunkSize);
			params.put("FromDateTime", _fromDateTime);
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "InterfaceShared.GetErrorMessagesToBeDeletedChunk", params);
			java.util.List<interfaceshared.proxies.Message> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<interfaceshared.proxies.Message>();
				for (IMendixObject obj : objs)
					result.add(interfaceshared.proxies.Message.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String getHTTPValueCheck(IContext context, interfaceconfiguration.proxies.SystemEndPoint _systemEndPoint)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SystemEndPoint", _systemEndPoint == null ? null : _systemEndPoint.getMendixObject());
			return (java.lang.String)Core.execute(context, "InterfaceShared.GetHTTPValueCheck", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String getMendixWebServiceHeaderValueCheck(IContext context, interfaceshared.proxies.MendixWebServiceHeader _mendixWebServiceHeader)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MendixWebServiceHeader", _mendixWebServiceHeader == null ? null : _mendixWebServiceHeader.getMendixObject());
			return (java.lang.String)Core.execute(context, "InterfaceShared.GetMendixWebServiceHeaderValueCheck", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<interfaceshared.proxies.Message> getMessagesToBeDeletedChunk(IContext context, java.lang.Long _chunkCount, java.lang.Long _numberOfChunks, java.lang.Long _completeMessageListCount, java.lang.Long _chunkSize, java.util.Date _fromDateTime, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChunkCount", _chunkCount);
			params.put("NumberOfChunks", _numberOfChunks);
			params.put("CompleteMessageListCount", _completeMessageListCount);
			params.put("ChunkSize", _chunkSize);
			params.put("FromDateTime", _fromDateTime);
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "InterfaceShared.GetMessagesToBeDeletedChunk", params);
			java.util.List<interfaceshared.proxies.Message> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<interfaceshared.proxies.Message>();
				for (IMendixObject obj : objs)
					result.add(interfaceshared.proxies.Message.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String getProcessingCombinedProcessingMessage(IContext context, interfaceshared.proxies.Processing _processing, java.lang.Long _indentOffset, boolean _debug, boolean _showWarningsToExternalSystems, boolean _generatedForInterfaceResponse, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Processing", _processing == null ? null : _processing.getMendixObject());
			params.put("IndentOffset", _indentOffset);
			params.put("Debug", _debug);
			params.put("ShowWarningsToExternalSystems", _showWarningsToExternalSystems);
			params.put("GeneratedForInterfaceResponse", _generatedForInterfaceResponse);
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			return (java.lang.String)Core.execute(context, "InterfaceShared.GetProcessingCombinedProcessingMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.LogObject getProcessingCombinedProcessingMessageChild(IContext context, interfaceshared.proxies.Processing _processing, java.lang.Long _indentOffset, boolean _debug, boolean _showWarningsToExternalSystems, boolean _generatedForInterfaceResponse, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Processing", _processing == null ? null : _processing.getMendixObject());
			params.put("IndentOffset", _indentOffset);
			params.put("Debug", _debug);
			params.put("ShowWarningsToExternalSystems", _showWarningsToExternalSystems);
			params.put("GeneratedForInterfaceResponse", _generatedForInterfaceResponse);
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.GetProcessingCombinedProcessingMessageChild", params);
			return result == null ? null : interfaceshared.proxies.LogObject.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String getProcessingMessage(IContext context, interfaceshared.proxies.Processing _processing)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Processing", _processing == null ? null : _processing.getMendixObject());
			return (java.lang.String)Core.execute(context, "InterfaceShared.GetProcessingMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void heartBeat(IContext context, interfaceconfiguration.proxies.WebServiceInterfaceConfiguration _webServiceInterfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("WebServiceInterfaceConfiguration", _webServiceInterfaceConfiguration == null ? null : _webServiceInterfaceConfiguration.getMendixObject());
			Core.execute(context, "InterfaceShared.HeartBeat", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void heartBeats(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.HeartBeats", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void incomingAffectedCIsCustomWorkflowTestMicroflow(IContext context, interfaceaffectedcis.proxies.IncomingAffectedCIs _incomingAffectedCIs)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingAffectedCIs", _incomingAffectedCIs == null ? null : _incomingAffectedCIs.getMendixObject());
			Core.execute(context, "InterfaceShared.IncomingAffectedCIsCustomWorkflowTestMicroflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void incomingAttachmentsCustomWorkflowTestMicroflow(IContext context, interfaceattachments.proxies.IncomingAttachments _incomingAttachments)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingAttachments", _incomingAttachments == null ? null : _incomingAttachments.getMendixObject());
			Core.execute(context, "InterfaceShared.IncomingAttachmentsCustomWorkflowTestMicroflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void incomingContractAspectUpdateCustomWorkflowTestMicroflow(IContext context, interfacecontractaspectupdates.proxies.IncomingContractAspectUpdate _incomingContractAspectUpdate)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingContractAspectUpdate", _incomingContractAspectUpdate == null ? null : _incomingContractAspectUpdate.getMendixObject());
			Core.execute(context, "InterfaceShared.IncomingContractAspectUpdateCustomWorkflowTestMicroflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void incomingExternalReferencesCustomWorkflowTestMicroflow(IContext context, interfaceexternalreferences.proxies.IncomingExternalReferences _incomingExternalReferences)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingExternalReferences", _incomingExternalReferences == null ? null : _incomingExternalReferences.getMendixObject());
			Core.execute(context, "InterfaceShared.IncomingExternalReferencesCustomWorkflowTestMicroflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void incomingNotesCustomWorkflowTestMicroflow(IContext context, interfacenotes.proxies.IncomingNotes _incomingNotes)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingNotes", _incomingNotes == null ? null : _incomingNotes.getMendixObject());
			Core.execute(context, "InterfaceShared.IncomingNotesCustomWorkflowTestMicroflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void incomingRelationsCustomWorkflowTestMicroflow(IContext context, interfacerelations.proxies.IncomingRelations _incomingRelations)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingRelations", _incomingRelations == null ? null : _incomingRelations.getMendixObject());
			Core.execute(context, "InterfaceShared.IncomingRelationsCustomWorkflowTestMicroflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void incomingRequestCustomWorkflowTestMicroflow(IContext context, interfacerequests.proxies.IncomingRequest _incomingRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingRequest", _incomingRequest == null ? null : _incomingRequest.getMendixObject());
			Core.execute(context, "InterfaceShared.IncomingRequestCustomWorkflowTestMicroflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void incomingRequestUpdateCustomWorkflowTestMicroflow(IContext context, interfacerequestupdate.proxies.IncomingRequestUpdate _incomingRequestUpdate)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingRequestUpdate", _incomingRequestUpdate == null ? null : _incomingRequestUpdate.getMendixObject());
			Core.execute(context, "InterfaceShared.IncomingRequestUpdateCustomWorkflowTestMicroflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void indexMessage(IContext context, interfaceshared.proxies.IndexData _indexData)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IndexData", _indexData == null ? null : _indexData.getMendixObject());
			Core.execute(context, "InterfaceShared.IndexMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void interfaceUnusedItemCollection(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.InterfaceUnusedItemCollection", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean isInterfaceAdminUser(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.IsInterfaceAdminUser", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean isLDAPAdminUser(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.IsLDAPAdminUser", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Attempt_NewEdit_Close(IContext context, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_Attempt_NewEdit_Close", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AttemptOpenMessageSpecializationFromMessage(IContext context, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_AttemptOpenMessageSpecializationFromMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseDatabaseProcessingAttempt_NewEdit(IContext context, interfaceshared.proxies.DatabaseProcessingAttempt _databaseProcessingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DatabaseProcessingAttempt", _databaseProcessingAttempt == null ? null : _databaseProcessingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseDatabaseProcessingAttempt_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseDatabaseServiceSendAttempt_NewEdit(IContext context, interfaceshared.proxies.DatabaseSendAttempt _databaseSendAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DatabaseSendAttempt", _databaseSendAttempt == null ? null : _databaseSendAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseDatabaseServiceSendAttempt_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseInterfaceMonitoringHistory_Dialog(IContext context, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseInterfaceMonitoringHistory_Dialog", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseLDAPProcessingAttempt_NewEdit(IContext context, interfaceshared.proxies.LDAPProcessingAttempt _lDAPProcessingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPProcessingAttempt", _lDAPProcessingAttempt == null ? null : _lDAPProcessingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseLDAPProcessingAttempt_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseOutgoingConfirmation_NewEdit(IContext context, interfaceshared.proxies.OutgoingConfirmation _outgoingConfirmation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingConfirmation", _outgoingConfirmation == null ? null : _outgoingConfirmation.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseOutgoingConfirmation_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClosePrepareAttempt_NewEdit(IContext context, interfaceshared.proxies.PrepareAttempt _prepareAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PrepareAttempt", _prepareAttempt == null ? null : _prepareAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_ClosePrepareAttempt_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseProcessing_NewEdit(IContext context, interfaceshared.proxies.Processing _processing)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Processing", _processing == null ? null : _processing.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseProcessing_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseProcessingAttempt_NewEdit(IContext context, interfaceshared.proxies.ProcessingAttempt _processingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingAttempt", _processingAttempt == null ? null : _processingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseProcessingAttempt_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseProcessingLog_NewEdit(IContext context, interfaceshared.proxies.ProcessingLog _processingLog)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingLog", _processingLog == null ? null : _processingLog.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseProcessingLog_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseProcessingPart_NewEdit(IContext context, interfaceshared.proxies.ProcessingPart _processingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseProcessingPart_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseRepeatingStructureProcessingAttempt_NewEdit(IContext context, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseRepeatingStructureProcessingAttempt_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseSendAttempt_NewEdit(IContext context, interfaceshared.proxies.SendAttempt _sendAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SendAttempt", _sendAttempt == null ? null : _sendAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseSendAttempt_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseSendFault_NewEdit(IContext context, interfaceshared.proxies.SendFault _sendFault)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SendFault", _sendFault == null ? null : _sendFault.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseSendFault_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseWebServiceProcessingAttempt_NewEdit(IContext context, interfaceshared.proxies.WebServiceProcessingAttempt _webServiceProcessingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("WebServiceProcessingAttempt", _webServiceProcessingAttempt == null ? null : _webServiceProcessingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseWebServiceProcessingAttempt_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseWebServiceSendAttempt_NewEdit(IContext context, interfaceshared.proxies.WebServiceSendAttempt _webServiceSendAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("WebServiceSendAttempt", _webServiceSendAttempt == null ? null : _webServiceSendAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CloseWebServiceSendAttempt_NewEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CreateSendFaultFilterFromSendFault(IContext context, interfaceshared.proxies.SendFault _sendFault)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SendFault", _sendFault == null ? null : _sendFault.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_CreateSendFaultFilterFromSendFault", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GetAuditableEntityAuditRecord(IContext context, interfaceshared.proxies.AuditableEntity _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_GetAuditableEntityAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingConfirmation_NewEditClose(IContext context, interfaceshared.proxies.IncomingConfirmation _incomingConfirmation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingConfirmation", _incomingConfirmation == null ? null : _incomingConfirmation.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_IncomingConfirmation_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingHeartBeatCancel(IContext context, interfaceshared.proxies.IncomingHeartBeat _incomingHeartBeat)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingHeartBeat", _incomingHeartBeat == null ? null : _incomingHeartBeat.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_IncomingHeartBeatCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingHeartBeatConfirmationCancel(IContext context, interfaceshared.proxies.IncomingHeartBeatConfirmation _incomingHeartBeatConfirmation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingHeartBeatConfirmation", _incomingHeartBeatConfirmation == null ? null : _incomingHeartBeatConfirmation.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_IncomingHeartBeatConfirmationCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingHeartBeatConfirmationResponse_NewEditClose(IContext context, interfaceshared.proxies.IncomingHeartBeatConfirmationResponse _incomingHeartBeatConfirmationResponse)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingHeartBeatConfirmationResponse", _incomingHeartBeatConfirmationResponse == null ? null : _incomingHeartBeatConfirmationResponse.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_IncomingHeartBeatConfirmationResponse_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingHeartBeatConfirmationSave(IContext context, interfaceshared.proxies.IncomingHeartBeatConfirmation _incomingHeartBeatConfirmation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingHeartBeatConfirmation", _incomingHeartBeatConfirmation == null ? null : _incomingHeartBeatConfirmation.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_IncomingHeartBeatConfirmationSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingHeartBeatConfirmationSaveAndClose(IContext context, interfaceshared.proxies.IncomingHeartBeatConfirmation _incomingHeartBeatConfirmation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingHeartBeatConfirmation", _incomingHeartBeatConfirmation == null ? null : _incomingHeartBeatConfirmation.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_IncomingHeartBeatConfirmationSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingHeartBeatResponse_NewEditClose(IContext context, interfaceshared.proxies.IncomingHeartBeatResponse _incomingHeartBeatResponse)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingHeartBeatResponse", _incomingHeartBeatResponse == null ? null : _incomingHeartBeatResponse.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_IncomingHeartBeatResponse_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingHeartBeatSave(IContext context, interfaceshared.proxies.IncomingHeartBeat _incomingHeartBeat)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingHeartBeat", _incomingHeartBeat == null ? null : _incomingHeartBeat.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_IncomingHeartBeatSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingHeartBeatSaveAndClose(IContext context, interfaceshared.proxies.IncomingHeartBeat _incomingHeartBeat)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingHeartBeat", _incomingHeartBeat == null ? null : _incomingHeartBeat.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_IncomingHeartBeatSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingMessage_NewEditClose(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_IncomingMessage_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_InterfaceEvent_NewEditClose(IContext context, interfaceshared.proxies.InterfaceEvent _interfaceEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InterfaceEvent", _interfaceEvent == null ? null : _interfaceEvent.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_InterfaceEvent_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Message_NewEditClose(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_Message_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenAttemptSpecializationForm(IContext context, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenAttemptSpecializationForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenInterfaceConfigurationSpecializationFromMessageInContent(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenInterfaceConfigurationSpecializationFromMessageInContent", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenInterfaceConfigurationSpecializationFromMessageInPopUp(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenInterfaceConfigurationSpecializationFromMessageInPopUp", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenInterfaceEventOutgoingMessage(IContext context, interfaceshared.proxies.InterfaceEvent _interfaceEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InterfaceEvent", _interfaceEvent == null ? null : _interfaceEvent.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenInterfaceEventOutgoingMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenInterfaceMessageConfigurationSpecializationFromMessageInContent(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenInterfaceMessageConfigurationSpecializationFromMessageInContent", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenInterfaceMessageConfigurationSpecializationFromMessageInPopUp(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenInterfaceMessageConfigurationSpecializationFromMessageInPopUp", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenMessageSpecialization(IContext context, interfaceshared.proxies.Message _inputMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputMessage", _inputMessage == null ? null : _inputMessage.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenMessageSpecialization", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenOutgoingConfirmationAttempt(IContext context, interfaceshared.proxies.OutgoingConfirmation _outgoingConfirmation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingConfirmation", _outgoingConfirmation == null ? null : _outgoingConfirmation.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenOutgoingConfirmationAttempt", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenProcessAttemptConfirmation(IContext context, interfaceshared.proxies.ProcessingAttempt _processingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingAttempt", _processingAttempt == null ? null : _processingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenProcessAttemptConfirmation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenQueuedByOutgoingMessage(IContext context, interfaceshared.proxies.OutgoingMessage _outgoingMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenQueuedByOutgoingMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenRepeatingStructureProcessingAttemptRelatedAttempt(IContext context, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenRepeatingStructureProcessingAttemptRelatedAttempt", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenRequest(IContext context, process.proxies.Request _request)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Request", _request == null ? null : _request.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenRequest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenResponseFromProcessingAttempt(IContext context, interfaceshared.proxies.ProcessingAttempt _processingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingAttempt", _processingAttempt == null ? null : _processingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenResponseFromProcessingAttempt", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenResponseSpecialization(IContext context, interfaceshared.proxies.Response _response)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Response", _response == null ? null : _response.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenResponseSpecialization", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenResponseSpecializationFromIncomingMessage(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenResponseSpecializationFromIncomingMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenResponseSpecializationFromSendAttempt(IContext context, interfaceshared.proxies.SendAttempt _sendAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SendAttempt", _sendAttempt == null ? null : _sendAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OpenResponseSpecializationFromSendAttempt", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeat_NewEditClose(IContext context, interfaceshared.proxies.OutgoingHeartBeat _outgoingHeartBeat)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeat", _outgoingHeartBeat == null ? null : _outgoingHeartBeat.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeat_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatConfirmation_NewEditClose(IContext context, interfaceshared.proxies.OutgoingHeartBeatConfirmation _outgoingHeartBeatConfirmation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatConfirmation", _outgoingHeartBeatConfirmation == null ? null : _outgoingHeartBeatConfirmation.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatConfirmation_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatConfirmationExpertDeskCancel(IContext context, interfaceshared.proxies.OutgoingHeartBeatConfirmationExpertDesk _outgoingHeartBeatConfirmationExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatConfirmationExpertDesk", _outgoingHeartBeatConfirmationExpertDesk == null ? null : _outgoingHeartBeatConfirmationExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatConfirmationExpertDeskCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatConfirmationExpertDeskSave(IContext context, interfaceshared.proxies.OutgoingHeartBeatConfirmationExpertDesk _outgoingHeartBeatConfirmationExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatConfirmationExpertDesk", _outgoingHeartBeatConfirmationExpertDesk == null ? null : _outgoingHeartBeatConfirmationExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatConfirmationExpertDeskSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatConfirmationExpertDeskSaveAndClose(IContext context, interfaceshared.proxies.OutgoingHeartBeatConfirmationExpertDesk _outgoingHeartBeatConfirmationExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatConfirmationExpertDesk", _outgoingHeartBeatConfirmationExpertDesk == null ? null : _outgoingHeartBeatConfirmationExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatConfirmationExpertDeskSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatConfirmationMessageExpertDeskCancel(IContext context, interfaceshared.proxies.OutgoingHeartBeatConfirmationMessageExpertDesk _outgoingHeartBeatConfirmationMessageExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatConfirmationMessageExpertDesk", _outgoingHeartBeatConfirmationMessageExpertDesk == null ? null : _outgoingHeartBeatConfirmationMessageExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatConfirmationMessageExpertDeskCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatConfirmationMessageExpertDeskSave(IContext context, interfaceshared.proxies.OutgoingHeartBeatConfirmationMessageExpertDesk _outgoingHeartBeatConfirmationMessageExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatConfirmationMessageExpertDesk", _outgoingHeartBeatConfirmationMessageExpertDesk == null ? null : _outgoingHeartBeatConfirmationMessageExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatConfirmationMessageExpertDeskSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatConfirmationMessageExpertDeskSaveAndClose(IContext context, interfaceshared.proxies.OutgoingHeartBeatConfirmationMessageExpertDesk _outgoingHeartBeatConfirmationMessageExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatConfirmationMessageExpertDesk", _outgoingHeartBeatConfirmationMessageExpertDesk == null ? null : _outgoingHeartBeatConfirmationMessageExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatConfirmationMessageExpertDeskSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatConfirmationResponseMessageExpertDesk_NewEditClose(IContext context, interfaceshared.proxies.OutgoingHeartBeatConfirmationResponseMessageExpertDesk _outgoingHeartBeatConfirmationResponseMessageExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatConfirmationResponseMessageExpertDesk", _outgoingHeartBeatConfirmationResponseMessageExpertDesk == null ? null : _outgoingHeartBeatConfirmationResponseMessageExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatConfirmationResponseMessageExpertDesk_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatExpertDeskCancel(IContext context, interfaceshared.proxies.OutgoingHeartBeatExpertDesk _outgoingHeartBeatExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatExpertDesk", _outgoingHeartBeatExpertDesk == null ? null : _outgoingHeartBeatExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatExpertDeskCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatExpertDeskSave(IContext context, interfaceshared.proxies.OutgoingHeartBeatExpertDesk _outgoingHeartBeatExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatExpertDesk", _outgoingHeartBeatExpertDesk == null ? null : _outgoingHeartBeatExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatExpertDeskSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatExpertDeskSaveAndClose(IContext context, interfaceshared.proxies.OutgoingHeartBeatExpertDesk _outgoingHeartBeatExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatExpertDesk", _outgoingHeartBeatExpertDesk == null ? null : _outgoingHeartBeatExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatExpertDeskSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatMessageExpertDeskCancel(IContext context, interfaceshared.proxies.OutgoingHeartBeatMessageExpertDesk _outgoingHeartBeatMessageExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatMessageExpertDesk", _outgoingHeartBeatMessageExpertDesk == null ? null : _outgoingHeartBeatMessageExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatMessageExpertDeskCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatMessageExpertDeskSave(IContext context, interfaceshared.proxies.OutgoingHeartBeatMessageExpertDesk _outgoingHeartBeatMessageExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatMessageExpertDesk", _outgoingHeartBeatMessageExpertDesk == null ? null : _outgoingHeartBeatMessageExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatMessageExpertDeskSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingHeartBeatMessageExpertDeskSaveAndClose(IContext context, interfaceshared.proxies.OutgoingHeartBeatMessageExpertDesk _outgoingHeartBeatMessageExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingHeartBeatMessageExpertDesk", _outgoingHeartBeatMessageExpertDesk == null ? null : _outgoingHeartBeatMessageExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingHeartBeatMessageExpertDeskSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OutgoingMessage_NewEditClose(IContext context, interfaceshared.proxies.OutgoingMessage _outgoingMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_OutgoingMessage_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RequestEventDelayedInterfaceHandlingCancel(IContext context, process.proxies.RequestEventDelayedInterfaceHandling _requestEventDelayedInterfaceHandling)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestEventDelayedInterfaceHandling", _requestEventDelayedInterfaceHandling == null ? null : _requestEventDelayedInterfaceHandling.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_RequestEventDelayedInterfaceHandlingCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RequestEventDelayedInterfaceHandlingSave(IContext context, process.proxies.RequestEventDelayedInterfaceHandling _requestEventDelayedInterfaceHandling)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestEventDelayedInterfaceHandling", _requestEventDelayedInterfaceHandling == null ? null : _requestEventDelayedInterfaceHandling.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_RequestEventDelayedInterfaceHandlingSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RequestEventDelayedInterfaceHandlingSaveAndClose(IContext context, process.proxies.RequestEventDelayedInterfaceHandling _requestEventDelayedInterfaceHandling)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestEventDelayedInterfaceHandling", _requestEventDelayedInterfaceHandling == null ? null : _requestEventDelayedInterfaceHandling.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_RequestEventDelayedInterfaceHandlingSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Response_NewEditClose(IContext context, interfaceshared.proxies.Response _response)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Response", _response == null ? null : _response.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_Response_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ResponseExpertDesk_NewEditClose(IContext context, interfaceshared.proxies.ResponseExpertDesk _responseExpertDesk)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ResponseExpertDesk", _responseExpertDesk == null ? null : _responseExpertDesk.getMendixObject());
			Core.execute(context, "InterfaceShared.IVK_ResponseExpertDesk_NewEditClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void message_AfterCommit_Index(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "InterfaceShared.Message_AfterCommit_Index", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean message_BeforeDelete_Index(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.Message_BeforeDelete_Index", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oC_LogLevel(IContext context, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			Core.execute(context, "InterfaceShared.OC_LogLevel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void outgoingMessageAsynchronousSuccesfulResponse(IContext context, interfaceshared.proxies.SendAttempt _sendAttempt, java.lang.String _logNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SendAttempt", _sendAttempt == null ? null : _sendAttempt.getMendixObject());
			params.put("LogNode", _logNode);
			Core.execute(context, "InterfaceShared.OutgoingMessageAsynchronousSuccesfulResponse", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void outgoingMessageSuccesFailedResponse(IContext context, java.lang.String _logNode, java.lang.String _responseMessage, interfaceshared.proxies.SendAttempt _sendAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("ResponseMessage", _responseMessage);
			params.put("SendAttempt", _sendAttempt == null ? null : _sendAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.OutgoingMessageSuccesFailedResponse", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void outgoingMessageSuccesUnkownResponse(IContext context, java.lang.String _logNode, java.lang.String _responseMessage, interfaceshared.proxies.SendAttempt _sendAttempt, java.lang.String _responseCode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("ResponseMessage", _responseMessage);
			params.put("SendAttempt", _sendAttempt == null ? null : _sendAttempt.getMendixObject());
			params.put("ResponseCode", _responseCode);
			Core.execute(context, "InterfaceShared.OutgoingMessageSuccesUnkownResponse", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void outgoingMessageSynchronousSuccesfulResponse(IContext context, interfaceshared.proxies.SendAttempt _sendAttempt, java.lang.String _logNode, java.lang.String _referenceID)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SendAttempt", _sendAttempt == null ? null : _sendAttempt.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("ReferenceID", _referenceID);
			Core.execute(context, "InterfaceShared.OutgoingMessageSynchronousSuccesfulResponse", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void prepareOutgoingHeartBeatConfirmationExpertDesk(IContext context, interfaceshared.proxies.ProcessingAttempt _processingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingAttempt", _processingAttempt == null ? null : _processingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.PrepareOutgoingHeartBeatConfirmationExpertDesk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void prepareOutgoingHeartBeatExpertDesk(IContext context, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			Core.execute(context, "InterfaceShared.PrepareOutgoingHeartBeatExpertDesk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processActualEndTime(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessActualEndTime", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processAssignedPerson(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart, nap.proxies.Organisation _deliveringOrganisation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("DeliveringOrganisation", _deliveringOrganisation == null ? null : _deliveringOrganisation.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessAssignedPerson", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processChangeType(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessChangeType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processCI(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processCIType(IContext context, java.lang.String _logNode, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart, interfaceshared.proxies.IncomingMessage _incomingMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessCIType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processClosureCategory(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessClosureCategory", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processContractEndTime(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessContractEndTime", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processCustomerSatisfaction(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessCustomerSatisfaction", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processCustomerWishDate(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart, interfacerequests.proxies.ServiceRequestSpecificFields _serviceRequestSpecificFields)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("ServiceRequestSpecificFields", _serviceRequestSpecificFields == null ? null : _serviceRequestSpecificFields.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessCustomerWishDate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processDeliveringOrganisation(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, interfaceshared.proxies.ProcessingPart _parentProcessingPart, boolean _blocking)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("Blocking", _blocking);
			Core.execute(context, "InterfaceShared.ProcessDeliveringOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processImpact(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessImpact", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.IncomingHeartBeatResponse processIncomingHeartBeat(IContext context, interfaceshared.proxies.IncomingHeartBeat _incomingHeartBeat)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingHeartBeat", _incomingHeartBeat == null ? null : _incomingHeartBeat.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.ProcessIncomingHeartBeat", params);
			return result == null ? null : interfaceshared.proxies.IncomingHeartBeatResponse.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processIncomingHeartBeatAsynchronously(IContext context, interfaceshared.proxies.ProcessingAttempt _processingAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessingAttempt", _processingAttempt == null ? null : _processingAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessIncomingHeartBeatAsynchronously", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.IncomingHeartBeatConfirmationResponse processIncomingHeartBeatConfirmation(IContext context, interfaceshared.proxies.IncomingHeartBeatConfirmation _incomingHeartBeatConfirmation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingHeartBeatConfirmation", _incomingHeartBeatConfirmation == null ? null : _incomingHeartBeatConfirmation.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.ProcessIncomingHeartBeatConfirmation", params);
			return result == null ? null : interfaceshared.proxies.IncomingHeartBeatConfirmationResponse.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processInterfaceEvent(IContext context, interfaceshared.proxies.InterfaceEvent _interfaceEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InterfaceEvent", _interfaceEvent == null ? null : _interfaceEvent.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessInterfaceEvent", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processInterfaceEvents(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.ProcessInterfaceEvents", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processOpeningCategory(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessOpeningCategory", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processOutgoingActualEndTime(IContext context, java.lang.String _logNode, interfaceshared.proxies.OutgoingMessage _outgoingMessage, boolean _isTask, interfacerequests.proxies.OutgoingRequestExpertDesk _outgoingTaskExpertDesk, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, process.proxies.RequestSnapShot _requestSnapShot)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			params.put("IsTask", _isTask);
			params.put("OutgoingTaskExpertDesk", _outgoingTaskExpertDesk == null ? null : _outgoingTaskExpertDesk.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("RequestSnapShot", _requestSnapShot == null ? null : _requestSnapShot.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessOutgoingActualEndTime", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processOutgoingCustomerWishDate(IContext context, java.lang.String _logNode, interfaceshared.proxies.OutgoingMessage _outgoingMessage, interfacerequests.proxies.ServiceRequestSpecificFields _serviceRequestSpecificFields, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, process.proxies.ServiceRequestSnapShot _serviceRequestSnapShot)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			params.put("ServiceRequestSpecificFields", _serviceRequestSpecificFields == null ? null : _serviceRequestSpecificFields.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("ServiceRequestSnapShot", _serviceRequestSnapShot == null ? null : _serviceRequestSnapShot.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessOutgoingCustomerWishDate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processOutgoingScheduledEnd(IContext context, java.lang.String _logNode, interfaceshared.proxies.OutgoingMessage _outgoingMessage, boolean _isTask, interfacerequests.proxies.OutgoingRequestExpertDesk _outgoingTaskExpertDesk, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, process.proxies.RequestSnapShot _requestSnapShot)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			params.put("IsTask", _isTask);
			params.put("OutgoingTaskExpertDesk", _outgoingTaskExpertDesk == null ? null : _outgoingTaskExpertDesk.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("RequestSnapShot", _requestSnapShot == null ? null : _requestSnapShot.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessOutgoingScheduledEnd", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processOutgoingScheduledStart(IContext context, java.lang.String _logNode, interfaceshared.proxies.OutgoingMessage _outgoingMessage, boolean _isTask, interfacerequests.proxies.OutgoingRequestExpertDesk _outgoingTaskExpertDesk, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, process.proxies.RequestSnapShot _requestSnapShot)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			params.put("IsTask", _isTask);
			params.put("OutgoingTaskExpertDesk", _outgoingTaskExpertDesk == null ? null : _outgoingTaskExpertDesk.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("RequestSnapShot", _requestSnapShot == null ? null : _requestSnapShot.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessOutgoingScheduledStart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processOutgoingWishDateEnd(IContext context, java.lang.String _logNode, interfaceshared.proxies.OutgoingMessage _outgoingMessage, boolean _isTask, interfacerequests.proxies.OutgoingRequestExpertDesk _outgoingTaskExpertDesk, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, process.proxies.RequestSnapShot _requestSnapShot)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			params.put("IsTask", _isTask);
			params.put("OutgoingTaskExpertDesk", _outgoingTaskExpertDesk == null ? null : _outgoingTaskExpertDesk.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("RequestSnapShot", _requestSnapShot == null ? null : _requestSnapShot.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessOutgoingWishDateEnd", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processOutgoingWishDateStart(IContext context, java.lang.String _logNode, interfaceshared.proxies.OutgoingMessage _outgoingMessage, boolean _isTask, interfacerequests.proxies.OutgoingRequestExpertDesk _outgoingTaskExpertDesk, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, process.proxies.RequestSnapShot _requestSnapShot)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			params.put("IsTask", _isTask);
			params.put("OutgoingTaskExpertDesk", _outgoingTaskExpertDesk == null ? null : _outgoingTaskExpertDesk.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("RequestSnapShot", _requestSnapShot == null ? null : _requestSnapShot.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessOutgoingWishDateStart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processPausedTime(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessPausedTime", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processPriority(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessPriority", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processProblemType(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessProblemType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processProcessSpecificFields(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage, process.proxies.Request _request, interfaceshared.proxies.ProcessingPart _parentProcessingPart, java.lang.String _logNode, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, boolean _blocking)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Request", _request == null ? null : _request.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("Blocking", _blocking);
			Core.execute(context, "InterfaceShared.ProcessProcessSpecificFields", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processReceivingOrganisation(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processRequestCreateTime(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessRequestCreateTime", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processScheduledEnd(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessScheduledEnd", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processScheduledStart(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessScheduledStart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processService(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processServiceProcess(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processShortDescription(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessShortDescription", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processStatusUpdate(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, process.proxies.Request _request)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("Request", _request == null ? null : _request.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessStatusUpdate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processUrgency(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessUrgency", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processWishDateEnd(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessWishDateEnd", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processWishDateStart(IContext context, java.lang.String _logNode, interfaceshared.proxies.IncomingMessage _incomingMessage, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceShared.ProcessWishDateStart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.Message retrieveAttemptMessage(IContext context, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveAttemptMessage", params);
			return result == null ? null : interfaceshared.proxies.Message.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.IncomingHeartBeat retrieveIncomingHeartBeatFromMessage(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveIncomingHeartBeatFromMessage", params);
			return result == null ? null : interfaceshared.proxies.IncomingHeartBeat.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String retrieveInternalReferenceID(IContext context, process.proxies.Request _request)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Request", _request == null ? null : _request.getMendixObject());
			return (java.lang.String)Core.execute(context, "InterfaceShared.RetrieveInternalReferenceID", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.OutgoingHeartBeatConfirmationMessageExpertDesk retrieveOutgoingHeartBeatConfirmationMessageExpertDeskFromMessage(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveOutgoingHeartBeatConfirmationMessageExpertDeskFromMessage", params);
			return result == null ? null : interfaceshared.proxies.OutgoingHeartBeatConfirmationMessageExpertDesk.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.OutgoingHeartBeatConfirmationResponseMessageExpertDesk retrieveOutgoingHeartBeatConfirmationResponseMessageExpertDeskFromResponse(IContext context, interfaceshared.proxies.Response _response)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Response", _response == null ? null : _response.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveOutgoingHeartBeatConfirmationResponseMessageExpertDeskFromResponse", params);
			return result == null ? null : interfaceshared.proxies.OutgoingHeartBeatConfirmationResponseMessageExpertDesk.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.OutgoingHeartBeatMessageExpertDesk retrieveOutgoingHeartBeatMessageExpertDeskFromMessage(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveOutgoingHeartBeatMessageExpertDeskFromMessage", params);
			return result == null ? null : interfaceshared.proxies.OutgoingHeartBeatMessageExpertDesk.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.OutgoingHeartBeatResponseMessageExpertDesk retrieveOutgoingHeartBeatResponseMessageExpertDeskFromResponse(IContext context, interfaceshared.proxies.Response _response)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Response", _response == null ? null : _response.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveOutgoingHeartBeatResponseMessageExpertDeskFromResponse", params);
			return result == null ? null : interfaceshared.proxies.OutgoingHeartBeatResponseMessageExpertDesk.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.OutgoingMessage retrieveOutgoingMessage(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveOutgoingMessage", params);
			return result == null ? null : interfaceshared.proxies.OutgoingMessage.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.Processing retrieveProcessingTopLevelParentFromProcessing(IContext context, interfaceshared.proxies.Processing _processing)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Processing", _processing == null ? null : _processing.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveProcessingTopLevelParentFromProcessing", params);
			return result == null ? null : interfaceshared.proxies.Processing.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static process.proxies.Request retrieveRequestFromInputMessage(IContext context, interfaceshared.proxies.Message _inputMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputMessage", _inputMessage == null ? null : _inputMessage.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveRequestFromInputMessage", params);
			return result == null ? null : process.proxies.Request.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static process.proxies.Request retrieveRequestFromMessage(IContext context, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveRequestFromMessage", params);
			return result == null ? null : process.proxies.Request.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static process.proxies.Request retrieveRequestMaster(IContext context, process.proxies.Request _request)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Request", _request == null ? null : _request.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveRequestMaster", params);
			return result == null ? null : process.proxies.Request.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration retrieveWebServiceInterfaceMessageConfigurationFromInterfaceMessageConfiguration(IContext context, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveWebServiceInterfaceMessageConfigurationFromInterfaceMessageConfiguration", params);
			return result == null ? null : interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.WebServiceProcessingAttempt retrieveWebServiceProcessingAttemptFromAttempt(IContext context, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveWebServiceProcessingAttemptFromAttempt", params);
			return result == null ? null : interfaceshared.proxies.WebServiceProcessingAttempt.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared.proxies.RepeatingStructureProcessingAttempt retrieveWebServiceRepeatingStructureProcessingAttemptFromAttempt(IContext context, interfaceshared.proxies.Attempt _attempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.RetrieveWebServiceRepeatingStructureProcessingAttemptFromAttempt", params);
			return result == null ? null : interfaceshared.proxies.RepeatingStructureProcessingAttempt.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void retrySendingInterfaceOutgoingMessages(IContext context, interfaceconfiguration.proxies.WebServiceInterfaceConfiguration _webServiceInterfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("WebServiceInterfaceConfiguration", _webServiceInterfaceConfiguration == null ? null : _webServiceInterfaceConfiguration.getMendixObject());
			Core.execute(context, "InterfaceShared.RetrySendingInterfaceOutgoingMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void retrySendingOutgoingMessage(IContext context, interfaceshared.proxies.OutgoingMessage _outgoingMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			Core.execute(context, "InterfaceShared.RetrySendingOutgoingMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void retrySendingOutgoingMessages(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared.RetrySendingOutgoingMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sendAttemptFailedSent(IContext context, interfaceshared.proxies.OutgoingMessage _outgoingMessage, java.lang.String _error, interfaceshared.proxies.SendAttempt _sendAttempt, java.lang.String _logNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			params.put("Error", _error);
			params.put("SendAttempt", _sendAttempt == null ? null : _sendAttempt.getMendixObject());
			params.put("LogNode", _logNode);
			Core.execute(context, "InterfaceShared.SendAttemptFailedSent", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sendAttemptNoEndPointFound(IContext context, java.lang.String _logNode, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, java.lang.String _hostName, interfaceshared.proxies.SendAttempt _sendAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("HostName", _hostName);
			params.put("SendAttempt", _sendAttempt == null ? null : _sendAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.SendAttemptNoEndPointFound", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sendAttemptResponseCastFailed(IContext context, java.lang.String _logNode, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, interfaceshared.proxies.SendAttempt _sendAttempt)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("SendAttempt", _sendAttempt == null ? null : _sendAttempt.getMendixObject());
			Core.execute(context, "InterfaceShared.SendAttemptResponseCastFailed", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sendMicroflowMessageCastFailed(IContext context, java.lang.String _logNode, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "InterfaceShared.SendMicroflowMessageCastFailed", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sendOutgoingHeartBeatConfirmationExpertDesk(IContext context, interfaceshared.proxies.Message _message, interfaceshared.proxies.BooleanWrapper _manualSendAttemptWrapper)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			params.put("ManualSendAttemptWrapper", _manualSendAttemptWrapper == null ? null : _manualSendAttemptWrapper.getMendixObject());
			Core.execute(context, "InterfaceShared.SendOutgoingHeartBeatConfirmationExpertDesk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sendOutgoingHeartBeatExpertDesk(IContext context, interfaceshared.proxies.Message _message, interfaceshared.proxies.BooleanWrapper _manualSendAttemptWrapper)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			params.put("ManualSendAttemptWrapper", _manualSendAttemptWrapper == null ? null : _manualSendAttemptWrapper.getMendixObject());
			Core.execute(context, "InterfaceShared.SendOutgoingHeartBeatExpertDesk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm.proxies.IUP_Combination setAndGetIUPCombination(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage, slm.proxies.Contract _contract, interfaceshared.proxies.ProcessingPart _processingPart, java.lang.String _logNode, slm.proxies.Impact _impact, slm.proxies.Urgency _urgency, slm.proxies.Priority _priority)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("Impact", _impact == null ? null : _impact.getMendixObject());
			params.put("Urgency", _urgency == null ? null : _urgency.getMendixObject());
			params.put("Priority", _priority == null ? null : _priority.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared.SetAndGetIUPCombination", params);
			return result == null ? null : slm.proxies.IUP_Combination.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setContractAspects(IContext context, interfaceshared.proxies.IncomingMessage _incomingMessage, slm_notifications.proxies.Commitment _commitment, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingMessage", _incomingMessage == null ? null : _incomingMessage.getMendixObject());
			params.put("Commitment", _commitment == null ? null : _commitment.getMendixObject());
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "InterfaceShared.SetContractAspects", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean setMessageDefaultValue(IContext context, interfaceshared.proxies.Message _message, java.lang.String _logNode, interfaceshared.proxies.FieldCode _fieldCode, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("FieldCode", _fieldCode == null ? null : _fieldCode.name());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.SetMessageDefaultValue", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setMessageStatus(IContext context, interfaceshared.proxies.Message _message, interfaceshared.proxies.MessageStatus _messageStatus)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			params.put("MessageStatus", _messageStatus == null ? null : _messageStatus.name());
			Core.execute(context, "InterfaceShared.SetMessageStatus", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean setMessageTranslatedValue(IContext context, interfaceshared.proxies.Message _message, java.lang.String _logNode, interfaceshared.proxies.FieldCode _fieldCode, java.lang.String _fromValue, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("FieldCode", _fieldCode == null ? null : _fieldCode.name());
			params.put("FromValue", _fromValue);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared.SetMessageTranslatedValue", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setWebServiceHeaderInstance(IContext context, interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration _webServiceInterfaceMessageConfiguration, interfaceshared.proxies.ProcessingPart _processingPart, java.lang.String _logNode, interfaceshared.proxies.OutgoingMessage _outgoingMessage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("WebServiceInterfaceMessageConfiguration", _webServiceInterfaceMessageConfiguration == null ? null : _webServiceInterfaceMessageConfiguration.getMendixObject());
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("OutgoingMessage", _outgoingMessage == null ? null : _outgoingMessage.getMendixObject());
			Core.execute(context, "InterfaceShared.SetWebServiceHeaderInstance", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}