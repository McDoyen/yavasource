// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceshared.proxies;

public class IncomingConfirmation extends interfaceshared.proxies.IncomingMessage
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceShared.IncomingConfirmation";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		ConfirmationMessageID("ConfirmationMessageID"),
		InterfaceName("InterfaceName"),
		ExternalReferenceID("ExternalReferenceID"),
		InternalReferenceID("InternalReferenceID"),
		SuccessfullyProcessed("SuccessfullyProcessed"),
		MessageID("MessageID"),
		MessageType("MessageType"),
		MessageDirection("MessageDirection"),
		Status("Status"),
		RetrievedInterfaceName("RetrievedInterfaceName"),
		CreatedByCustomMessage("CreatedByCustomMessage"),
		IncomingConfirmation_OutgoingMessage("InterfaceShared.IncomingConfirmation_OutgoingMessage"),
		IncomingMessage_SynchronousResponse("InterfaceShared.IncomingMessage_SynchronousResponse"),
		BooleanWrapper_Message("InterfaceShared.BooleanWrapper_Message"),
		Message_IndexData("InterfaceShared.Message_IndexData"),
		Message_InterfaceMessageConfiguration("InterfaceShared.Message_InterfaceMessageConfiguration"),
		Message_InterfaceConfiguration("InterfaceShared.Message_InterfaceConfiguration");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public IncomingConfirmation(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceShared.IncomingConfirmation"));
	}

	protected IncomingConfirmation(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject incomingConfirmationMendixObject)
	{
		super(context, incomingConfirmationMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("InterfaceShared.IncomingConfirmation", incomingConfirmationMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceShared.IncomingConfirmation");
	}

	/**
	 * @deprecated Use 'IncomingConfirmation.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfaceshared.proxies.IncomingConfirmation initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfaceshared.proxies.IncomingConfirmation.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfaceshared.proxies.IncomingConfirmation initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		if (com.mendix.core.Core.isSubClassOf("InterfaceAffectedCIs.IncomingAffectedCIsConfirmation", mendixObject.getType()))
			return interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceAttachments.IncomingAttachmentsConfirmation", mendixObject.getType()))
			return interfaceattachments.proxies.IncomingAttachmentsConfirmation.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceContractAspectUpdates.IncomingContractAspectUpdateConfirmation", mendixObject.getType()))
			return interfacecontractaspectupdates.proxies.IncomingContractAspectUpdateConfirmation.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceExternalReferences.IncomingExternalReferencesConfirmation", mendixObject.getType()))
			return interfaceexternalreferences.proxies.IncomingExternalReferencesConfirmation.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceShared.IncomingHeartBeatConfirmation", mendixObject.getType()))
			return interfaceshared.proxies.IncomingHeartBeatConfirmation.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceNotes.IncomingNotesConfirmation", mendixObject.getType()))
			return interfacenotes.proxies.IncomingNotesConfirmation.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRelations.IncomingRelationsConfirmation", mendixObject.getType()))
			return interfacerelations.proxies.IncomingRelationsConfirmation.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequests.IncomingRequestConfirmation", mendixObject.getType()))
			return interfacerequests.proxies.IncomingRequestConfirmation.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("InterfaceRequestUpdate.IncomingRequestUpdateConfirmation", mendixObject.getType()))
			return interfacerequestupdate.proxies.IncomingRequestUpdateConfirmation.initialize(context, mendixObject);

		return new interfaceshared.proxies.IncomingConfirmation(context, mendixObject);
	}

	public static interfaceshared.proxies.IncomingConfirmation load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfaceshared.proxies.IncomingConfirmation.initialize(context, mendixObject);
	}

	public static java.util.List<? extends interfaceshared.proxies.IncomingConfirmation> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceshared.proxies.IncomingConfirmation> result = new java.util.ArrayList<interfaceshared.proxies.IncomingConfirmation>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceShared.IncomingConfirmation" + xpathConstraint))
			result.add(interfaceshared.proxies.IncomingConfirmation.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of ConfirmationMessageID
	 */
	public final java.lang.String getConfirmationMessageID()
	{
		return getConfirmationMessageID(getContext());
	}

	/**
	 * @param context
	 * @return value of ConfirmationMessageID
	 */
	public final java.lang.String getConfirmationMessageID(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ConfirmationMessageID.toString());
	}

	/**
	 * Set value of ConfirmationMessageID
	 * @param confirmationmessageid
	 */
	public final void setConfirmationMessageID(java.lang.String confirmationmessageid)
	{
		setConfirmationMessageID(getContext(), confirmationmessageid);
	}

	/**
	 * Set value of ConfirmationMessageID
	 * @param context
	 * @param confirmationmessageid
	 */
	public final void setConfirmationMessageID(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String confirmationmessageid)
	{
		getMendixObject().setValue(context, MemberNames.ConfirmationMessageID.toString(), confirmationmessageid);
	}

	/**
	 * @return value of IncomingConfirmation_OutgoingMessage
	 */
	public final interfaceshared.proxies.OutgoingMessage getIncomingConfirmation_OutgoingMessage() throws com.mendix.core.CoreException
	{
		return getIncomingConfirmation_OutgoingMessage(getContext());
	}

	/**
	 * @param context
	 * @return value of IncomingConfirmation_OutgoingMessage
	 */
	public final interfaceshared.proxies.OutgoingMessage getIncomingConfirmation_OutgoingMessage(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceshared.proxies.OutgoingMessage result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.IncomingConfirmation_OutgoingMessage.toString());
		if (identifier != null)
			result = interfaceshared.proxies.OutgoingMessage.load(context, identifier);
		return result;
	}

	/**
	 * Set value of IncomingConfirmation_OutgoingMessage
	 * @param incomingconfirmation_outgoingmessage
	 */
	public final void setIncomingConfirmation_OutgoingMessage(interfaceshared.proxies.OutgoingMessage incomingconfirmation_outgoingmessage)
	{
		setIncomingConfirmation_OutgoingMessage(getContext(), incomingconfirmation_outgoingmessage);
	}

	/**
	 * Set value of IncomingConfirmation_OutgoingMessage
	 * @param context
	 * @param incomingconfirmation_outgoingmessage
	 */
	public final void setIncomingConfirmation_OutgoingMessage(com.mendix.systemwideinterfaces.core.IContext context, interfaceshared.proxies.OutgoingMessage incomingconfirmation_outgoingmessage)
	{
		if (incomingconfirmation_outgoingmessage == null)
			getMendixObject().setValue(context, MemberNames.IncomingConfirmation_OutgoingMessage.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.IncomingConfirmation_OutgoingMessage.toString(), incomingconfirmation_outgoingmessage.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfaceshared.proxies.IncomingConfirmation that = (interfaceshared.proxies.IncomingConfirmation) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceShared.IncomingConfirmation";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
