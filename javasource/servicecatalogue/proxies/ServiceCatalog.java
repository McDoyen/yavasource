// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package servicecatalogue.proxies;

public class ServiceCatalog
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject serviceCatalogMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "ServiceCatalogue.ServiceCatalog";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		CatalogName("CatalogName"),
		ServiceCatalog_Product("ServiceCatalogue.ServiceCatalog_Product"),
		ServiceCatalog_Organisation("ServiceCatalogue.ServiceCatalog_Organisation");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ServiceCatalog(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "ServiceCatalogue.ServiceCatalog"));
	}

	protected ServiceCatalog(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject serviceCatalogMendixObject)
	{
		if (serviceCatalogMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("ServiceCatalogue.ServiceCatalog", serviceCatalogMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a ServiceCatalogue.ServiceCatalog");

		this.serviceCatalogMendixObject = serviceCatalogMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'ServiceCatalog.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static servicecatalogue.proxies.ServiceCatalog initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return servicecatalogue.proxies.ServiceCatalog.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static servicecatalogue.proxies.ServiceCatalog initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new servicecatalogue.proxies.ServiceCatalog(context, mendixObject);
	}

	public static servicecatalogue.proxies.ServiceCatalog load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return servicecatalogue.proxies.ServiceCatalog.initialize(context, mendixObject);
	}

	public static java.util.List<servicecatalogue.proxies.ServiceCatalog> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<servicecatalogue.proxies.ServiceCatalog> result = new java.util.ArrayList<servicecatalogue.proxies.ServiceCatalog>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//ServiceCatalogue.ServiceCatalog" + xpathConstraint))
			result.add(servicecatalogue.proxies.ServiceCatalog.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of CatalogName
	 */
	public final java.lang.String getCatalogName()
	{
		return getCatalogName(getContext());
	}

	/**
	 * @param context
	 * @return value of CatalogName
	 */
	public final java.lang.String getCatalogName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.CatalogName.toString());
	}

	/**
	 * Set value of CatalogName
	 * @param catalogname
	 */
	public final void setCatalogName(java.lang.String catalogname)
	{
		setCatalogName(getContext(), catalogname);
	}

	/**
	 * Set value of CatalogName
	 * @param context
	 * @param catalogname
	 */
	public final void setCatalogName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String catalogname)
	{
		getMendixObject().setValue(context, MemberNames.CatalogName.toString(), catalogname);
	}

	/**
	 * @return value of ServiceCatalog_Product
	 */
	public final java.util.List<servicecatalogue.proxies.Product> getServiceCatalog_Product() throws com.mendix.core.CoreException
	{
		return getServiceCatalog_Product(getContext());
	}

	/**
	 * @param context
	 * @return value of ServiceCatalog_Product
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<servicecatalogue.proxies.Product> getServiceCatalog_Product(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<servicecatalogue.proxies.Product> result = new java.util.ArrayList<servicecatalogue.proxies.Product>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.ServiceCatalog_Product.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(servicecatalogue.proxies.Product.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of ServiceCatalog_Product
	 * @param servicecatalog_product
	 */
	public final void setServiceCatalog_Product(java.util.List<servicecatalogue.proxies.Product> servicecatalog_product)
	{
		setServiceCatalog_Product(getContext(), servicecatalog_product);
	}

	/**
	 * Set value of ServiceCatalog_Product
	 * @param context
	 * @param servicecatalog_product
	 */
	public final void setServiceCatalog_Product(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<servicecatalogue.proxies.Product> servicecatalog_product)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (servicecatalogue.proxies.Product proxyObject : servicecatalog_product)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.ServiceCatalog_Product.toString(), identifiers);
	}

	/**
	 * @return value of ServiceCatalog_Organisation
	 */
	public final java.util.List<nap.proxies.Organisation> getServiceCatalog_Organisation() throws com.mendix.core.CoreException
	{
		return getServiceCatalog_Organisation(getContext());
	}

	/**
	 * @param context
	 * @return value of ServiceCatalog_Organisation
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<nap.proxies.Organisation> getServiceCatalog_Organisation(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<nap.proxies.Organisation> result = new java.util.ArrayList<nap.proxies.Organisation>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.ServiceCatalog_Organisation.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(nap.proxies.Organisation.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of ServiceCatalog_Organisation
	 * @param servicecatalog_organisation
	 */
	public final void setServiceCatalog_Organisation(java.util.List<nap.proxies.Organisation> servicecatalog_organisation)
	{
		setServiceCatalog_Organisation(getContext(), servicecatalog_organisation);
	}

	/**
	 * Set value of ServiceCatalog_Organisation
	 * @param context
	 * @param servicecatalog_organisation
	 */
	public final void setServiceCatalog_Organisation(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<nap.proxies.Organisation> servicecatalog_organisation)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (nap.proxies.Organisation proxyObject : servicecatalog_organisation)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.ServiceCatalog_Organisation.toString(), identifiers);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return serviceCatalogMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final servicecatalogue.proxies.ServiceCatalog that = (servicecatalogue.proxies.ServiceCatalog) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "ServiceCatalogue.ServiceCatalog";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
