// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package process.proxies;

public class AutoClose
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject autoCloseMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Process.AutoClose";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		DateTime("DateTime"),
		isDone("isDone"),
		ClosedManually("ClosedManually"),
		AutoClose_Request("Process.AutoClose_Request");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public AutoClose(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Process.AutoClose"));
	}

	protected AutoClose(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject autoCloseMendixObject)
	{
		if (autoCloseMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("Process.AutoClose", autoCloseMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Process.AutoClose");

		this.autoCloseMendixObject = autoCloseMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'AutoClose.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static process.proxies.AutoClose initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return process.proxies.AutoClose.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static process.proxies.AutoClose initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new process.proxies.AutoClose(context, mendixObject);
	}

	public static process.proxies.AutoClose load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return process.proxies.AutoClose.initialize(context, mendixObject);
	}

	public static java.util.List<process.proxies.AutoClose> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<process.proxies.AutoClose> result = new java.util.ArrayList<process.proxies.AutoClose>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Process.AutoClose" + xpathConstraint))
			result.add(process.proxies.AutoClose.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of DateTime
	 */
	public final java.util.Date getDateTime()
	{
		return getDateTime(getContext());
	}

	/**
	 * @param context
	 * @return value of DateTime
	 */
	public final java.util.Date getDateTime(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.DateTime.toString());
	}

	/**
	 * Set value of DateTime
	 * @param datetime
	 */
	public final void setDateTime(java.util.Date datetime)
	{
		setDateTime(getContext(), datetime);
	}

	/**
	 * Set value of DateTime
	 * @param context
	 * @param datetime
	 */
	public final void setDateTime(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date datetime)
	{
		getMendixObject().setValue(context, MemberNames.DateTime.toString(), datetime);
	}

	/**
	 * @return value of isDone
	 */
	public final java.lang.Boolean getisDone()
	{
		return getisDone(getContext());
	}

	/**
	 * @param context
	 * @return value of isDone
	 */
	public final java.lang.Boolean getisDone(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.isDone.toString());
	}

	/**
	 * Set value of isDone
	 * @param isdone
	 */
	public final void setisDone(java.lang.Boolean isdone)
	{
		setisDone(getContext(), isdone);
	}

	/**
	 * Set value of isDone
	 * @param context
	 * @param isdone
	 */
	public final void setisDone(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean isdone)
	{
		getMendixObject().setValue(context, MemberNames.isDone.toString(), isdone);
	}

	/**
	 * @return value of ClosedManually
	 */
	public final java.lang.Boolean getClosedManually()
	{
		return getClosedManually(getContext());
	}

	/**
	 * @param context
	 * @return value of ClosedManually
	 */
	public final java.lang.Boolean getClosedManually(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.ClosedManually.toString());
	}

	/**
	 * Set value of ClosedManually
	 * @param closedmanually
	 */
	public final void setClosedManually(java.lang.Boolean closedmanually)
	{
		setClosedManually(getContext(), closedmanually);
	}

	/**
	 * Set value of ClosedManually
	 * @param context
	 * @param closedmanually
	 */
	public final void setClosedManually(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean closedmanually)
	{
		getMendixObject().setValue(context, MemberNames.ClosedManually.toString(), closedmanually);
	}

	/**
	 * @return value of AutoClose_Request
	 */
	public final process.proxies.Request getAutoClose_Request() throws com.mendix.core.CoreException
	{
		return getAutoClose_Request(getContext());
	}

	/**
	 * @param context
	 * @return value of AutoClose_Request
	 */
	public final process.proxies.Request getAutoClose_Request(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		process.proxies.Request result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.AutoClose_Request.toString());
		if (identifier != null)
			result = process.proxies.Request.load(context, identifier);
		return result;
	}

	/**
	 * Set value of AutoClose_Request
	 * @param autoclose_request
	 */
	public final void setAutoClose_Request(process.proxies.Request autoclose_request)
	{
		setAutoClose_Request(getContext(), autoclose_request);
	}

	/**
	 * Set value of AutoClose_Request
	 * @param context
	 * @param autoclose_request
	 */
	public final void setAutoClose_Request(com.mendix.systemwideinterfaces.core.IContext context, process.proxies.Request autoclose_request)
	{
		if (autoclose_request == null)
			getMendixObject().setValue(context, MemberNames.AutoClose_Request.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.AutoClose_Request.toString(), autoclose_request.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return autoCloseMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final process.proxies.AutoClose that = (process.proxies.AutoClose) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Process.AutoClose";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
