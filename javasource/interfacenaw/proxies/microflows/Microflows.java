// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfacenaw.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the InterfaceNAW module
	public static void checkDeletedOrganisation_BusinessGroup(IContext context, java.util.List<interfacenaw.proxies.Organisation> _organisationList_new)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_organisationList_new = null;
			if (_organisationList_new != null)
			{
				listparam_organisationList_new = new java.util.ArrayList<IMendixObject>();
				for (interfacenaw.proxies.Organisation obj : _organisationList_new)
					listparam_organisationList_new.add(obj.getMendixObject());
			}
			params.put("OrganisationList_new", listparam_organisationList_new);
			Core.execute(context, "InterfaceNAW.CheckDeletedOrganisation_BusinessGroup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkDeletedOrganisation_Department(IContext context, java.util.List<interfacenaw.proxies.Organisation> _organisationList_new)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_organisationList_new = null;
			if (_organisationList_new != null)
			{
				listparam_organisationList_new = new java.util.ArrayList<IMendixObject>();
				for (interfacenaw.proxies.Organisation obj : _organisationList_new)
					listparam_organisationList_new.add(obj.getMendixObject());
			}
			params.put("OrganisationList_new", listparam_organisationList_new);
			Core.execute(context, "InterfaceNAW.CheckDeletedOrganisation_Department", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkDeletedPersons(IContext context, java.util.List<interfacenaw.proxies.Person> _personList_new)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList_new = null;
			if (_personList_new != null)
			{
				listparam_personList_new = new java.util.ArrayList<IMendixObject>();
				for (interfacenaw.proxies.Person obj : _personList_new)
					listparam_personList_new.add(obj.getMendixObject());
			}
			params.put("PersonList_new", listparam_personList_new);
			Core.execute(context, "InterfaceNAW.CheckDeletedPersons", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Location get_Location(IContext context, interfacenaw.proxies.Person _incomingPerson)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingPerson", _incomingPerson == null ? null : _incomingPerson.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceNAW.Get_Location", params);
			return result == null ? null : nap.proxies.Location.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Room get_Room(IContext context, interfacenaw.proxies.Person _incomingPerson, nap.proxies.Location _location)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingPerson", _incomingPerson == null ? null : _incomingPerson.getMendixObject());
			params.put("Location", _location == null ? null : _location.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceNAW.Get_Room", params);
			return result == null ? null : nap.proxies.Room.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static mendix.proxies.Account getAccount(IContext context, interfacenaw.proxies.Person _incomingPerson, interfacenaw.proxies.NAWDefaultTableItem _nAWDefaultTableItem, java.util.List<roletemplates.proxies.Template> _templateList, nap.proxies.Person _person)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingPerson", _incomingPerson == null ? null : _incomingPerson.getMendixObject());
			params.put("NAWDefaultTableItem", _nAWDefaultTableItem == null ? null : _nAWDefaultTableItem.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_templateList = null;
			if (_templateList != null)
			{
				listparam_templateList = new java.util.ArrayList<IMendixObject>();
				for (roletemplates.proxies.Template obj : _templateList)
					listparam_templateList.add(obj.getMendixObject());
			}
			params.put("TemplateList", listparam_templateList);
			params.put("Person", _person == null ? null : _person.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceNAW.GetAccount", params);
			return result == null ? null : mendix.proxies.Account.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<mendix.proxies.Account> getAccountwithDifferentPerson_ID(IContext context, interfacenaw.proxies.Person _person)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Person", _person == null ? null : _person.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "InterfaceNAW.GetAccountwithDifferentPerson_ID", params);
			java.util.List<mendix.proxies.Account> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<mendix.proxies.Account>();
				for (IMendixObject obj : objs)
					result.add(mendix.proxies.Account.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Person> getCurrentPerson_OtherAccount(IContext context, interfacenaw.proxies.Person _person)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Person", _person == null ? null : _person.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "InterfaceNAW.GetCurrentPerson_OtherAccount", params);
			java.util.List<nap.proxies.Person> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Person>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Person.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<mendix.proxies.Account> getOtherAccountForCurrentID(IContext context, interfacenaw.proxies.Person _person)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Person", _person == null ? null : _person.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "InterfaceNAW.GetOtherAccountForCurrentID", params);
			java.util.List<mendix.proxies.Account> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<mendix.proxies.Account>();
				for (IMendixObject obj : objs)
					result.add(mendix.proxies.Account.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Person> getPersonWithOtherPerson_id(IContext context, interfacenaw.proxies.Person _person)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Person", _person == null ? null : _person.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "InterfaceNAW.GetPersonWithOtherPerson_id", params);
			java.util.List<nap.proxies.Person> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Person>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Person.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importOrganisations(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceNAW.ImportOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importPersons(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceNAW.ImportPersons", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenDefaults(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceNAW.IVK_OpenDefaults", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ReProcessOrganisation(IContext context, interfacenaw.proxies.Organisation _organisation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Organisation", _organisation == null ? null : _organisation.getMendixObject());
			Core.execute(context, "InterfaceNAW.IVK_ReProcessOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ReProcessPerson(IContext context, interfacenaw.proxies.Person _person)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Person", _person == null ? null : _person.getMendixObject());
			Core.execute(context, "InterfaceNAW.IVK_ReProcessPerson", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ReProcessPerson_FromList(IContext context, java.util.List<interfacenaw.proxies.Person> _persons)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_persons = null;
			if (_persons != null)
			{
				listparam_persons = new java.util.ArrayList<IMendixObject>();
				for (interfacenaw.proxies.Person obj : _persons)
					listparam_persons.add(obj.getMendixObject());
			}
			params.put("Persons", listparam_persons);
			Core.execute(context, "InterfaceNAW.IVK_ReProcessPerson_FromList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processOrganisation(IContext context, interfacenaw.proxies.Organisation _organisation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Organisation", _organisation == null ? null : _organisation.getMendixObject());
			Core.execute(context, "InterfaceNAW.ProcessOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * [802975] In case an existing Contact Detail is found, check if the imported data contains that information. If not, delete the contact detail;
	 * Commit the person at the end. Validation flow will mark default contact info per type;
	 * Added Error handlers for committing contact details, to prevent microflow stops processing the next Person;
	 */
	public static void processPerson(IContext context, interfacenaw.proxies.Person _incomingPerson)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingPerson", _incomingPerson == null ? null : _incomingPerson.getMendixObject());
			Core.execute(context, "InterfaceNAW.ProcessPerson", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sE_ImportNAW(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceNAW.SE_ImportNAW", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sub_GenerateFullName(IContext context, interfacenaw.proxies.Person _incomingPerson)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingPerson", _incomingPerson == null ? null : _incomingPerson.getMendixObject());
			Core.execute(context, "InterfaceNAW.Sub_GenerateFullName", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}