// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package advancedsearch.actions;

import interfaceshared.proxies.IndexData;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import nap.proxies.Organisation;
import nap.proxies.Person;
import nl.mansystems.advancedsearch.common.IndexConfiguration;
import advancedsearch.proxies.Index;
import advancedsearch.proxies.QueuedIndexRecord;
import categories.proxies.Category;
import categories_cmdb.proxies.CICategory;
import cmdb.proxies.AffectedCI;
import cmdb.proxies.CIPersons;
import cmdb.proxies.ConfigurationItem;
import googlemaps.proxies.Location;
import servicecatalogue.proxies.Product;
import servicecatalogue.proxies.ProductCategory;
import slm.proxies.Priority;
import slm.proxies.Service;
import statetransition.proxies.Phase;
import statetransition.proxies.State;
import process.proxies.Request;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataRow;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTable;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import emailplus.proxies.Message;

public class QueueReferentialIndexObjects extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject referenceObject;

	public QueueReferentialIndexObjects(IContext context, IMendixObject referenceObject)
	{
		super(context);
		this.referenceObject = referenceObject;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		if (referenceObject == null) {
			Core.getLogger(LOGGER).info("No referenceObject provided, skipping IndexRecord..");
			return false;
		}
			
		Date start = new Date();
		IMetaObject metaObject = referenceObject.getMetaObject();		
		String refObjectType = metaObject.getSuperName();
		
		refObjectType = (refObjectType.equalsIgnoreCase("")) ? metaObject.getName() : refObjectType;
		String[][] refMembers = REF_MEMBERS.get(refObjectType);
		
		if (refMembers != null) {
			Long mxObjectId = referenceObject.getId().toLong();
			Core.getLogger(LOGGER).debug("Starting refindex objects processing for " + refObjectType + " with id " + mxObjectId);
			
			for(String[] refObject : refMembers) {
				String indexObjectType = refObject[0];
				String member = refObject[1];
				
				getIndexObjects(indexObjectType, member, mxObjectId, refObjectType);
			}
		}		
				
		Date end = new Date();
		Core.getLogger(LOGGER).debug("Processing refindex objects took " + (end.getTime() - start.getTime()) + " milliseconds");

		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "QueueReferentialIndexObjects";
	}

	// BEGIN EXTRA CODE

	private IContext context = getContext();

	private void getIndexObjects(String indexObjectType, String refMember, Long mxObjectId, String refObjectType) throws CoreException {
		List<IMendixIdentifier> objectList;
		
		String queueMember = getQueueMember(indexObjectType).toString();

		String oql = 
				"  FROM " + indexObjectType + " AS mainObject \n" +
				" WHERE mainObject/ " + refMember + " = " + mxObjectId + "\n" +
				"   AND NOT EXISTS(SELECT id \n" + 
				"  					 FROM " + QueuedIndexRecord.getType() + " AS queueObject \n" +
				"	                WHERE queueObject/ " + queueMember + " = mainObject/ID )\n" +
				"SELECT mainObject/ID AS ID \n" +
				" ORDER BY mainObject/ID DESC";

		boolean hasNext = true;
		int chunksize = 10000,
			offset = 0,
			totalrows = 0,
			rows;		
		
		while (hasNext) {
			IDataTable iDataTable = Core.retrieveOQLDataTable(context,oql,chunksize,offset);
			
			rows = iDataTable.getRowCount();
			totalrows += rows;
			hasNext = (rows < chunksize) ? false : true;
		
			objectList = new ArrayList<IMendixIdentifier>();

			for (IDataRow dataRow:iDataTable.getRows()) {
				IMendixIdentifier id = (IMendixIdentifier) dataRow.getValue(context, "ID");				
				objectList.add(id);
			}
			
			if (!objectList.isEmpty()) {
				addObjectsToQueue(objectList, indexObjectType, refObjectType);
				Core.getLogger(LOGGER).debug("Added " + rows + " " + indexObjectType + " objects to the index queue");
			}
		}
		
		Core.getLogger(LOGGER).debug("Added a total of " + totalrows + " " + indexObjectType + " objects to the index queue");		
	}

	@SuppressWarnings("unchecked")
	private void addObjectsToQueue(List<IMendixIdentifier> objects, String objectsType, String refObjectType) {

		QueuedIndexRecord.MemberNames queueMember = getQueueMember(objectsType);
		Index index = getIndexFromMember(queueMember);

		QueuedIndexRecord indexQueue = new QueuedIndexRecord(context);
		indexQueue.setIndexEntity(index);
		indexQueue.setByReference(true);
		indexQueue.setReferenceEntity(refObjectType);			
		
		List<IMendixIdentifier> objectList = new ArrayList<IMendixIdentifier>();
		Object valueObject = indexQueue.getMendixObject().getValue(context, queueMember.toString());
		if (valueObject != null)
			objectList.addAll((List<IMendixIdentifier>)valueObject);			
		objectList.addAll(objects);
		indexQueue.getMendixObject().setValue(context, queueMember.toString(), objectList);
		Core.commitWithoutEvents(context, indexQueue.getMendixObject());
	}

	private QueuedIndexRecord.MemberNames getQueueMember(String objectType) {
		if (objectType == Request.getType()) {
			return QueuedIndexRecord.MemberNames.QueuedIndexRecord_Request;
		} else if (objectType == ConfigurationItem.getType()) {
			return QueuedIndexRecord.MemberNames.QueuedIndexRecord_ConfigurationItem;
		} else if (objectType == Person.getType()) {
			return QueuedIndexRecord.MemberNames.QueuedIndexRecord_Person;
		} else if (objectType == Product.getType()) {
			return QueuedIndexRecord.MemberNames.QueuedIndexRecord_Product;
		} else if (objectType == IndexData.getType()) {
			return QueuedIndexRecord.MemberNames.QueuedIndexRecord_IndexData;
		}

		return null;
	}

	private Index getIndexFromMember(QueuedIndexRecord.MemberNames member) {
		if (member == QueuedIndexRecord.MemberNames.QueuedIndexRecord_ConfigurationItem) {
			return Index.CMDB;
		} else if (member == QueuedIndexRecord.MemberNames.QueuedIndexRecord_IndexData) {
			return Index._Interface;
		} else if (member == QueuedIndexRecord.MemberNames.QueuedIndexRecord_Person) {
			return Index.Person;
		} else if (member == QueuedIndexRecord.MemberNames.QueuedIndexRecord_Product) {
			return Index.Product;
		} else if (member == QueuedIndexRecord.MemberNames.QueuedIndexRecord_Request) {
			return Index.Request;
		}

		return null;		
	}

	private static Map<String, String[][]> REF_MEMBERS;

	static {
		REF_MEMBERS = new HashMap<String, String[][]>();

		// CMDB.ConfigurationItem
		REF_MEMBERS.put(cmdb.proxies.ConfigurationItem.getType(), new String[][] {
			new String[] { Request.getType(), Request.MemberNames.Request_ConfigurationItem.toString() },
			new String[] { Request.getType(), AffectedCI.MemberNames.AffectedCI_Request + "/" 
					+ AffectedCI.getType() + "/" + AffectedCI.MemberNames.AffectedCI_ConfigurationItem } });		
		// NAP.Person
		REF_MEMBERS.put(Person.getType(), new String[][] {
			new String[] { ConfigurationItem.getType(), CIPersons.MemberNames.CIUser_ConfigurationItem + "/"
					+ CIPersons.getType() + "/" + CIPersons.MemberNames.CIUser_Persons },
			new String[] { ConfigurationItem.getType(), ConfigurationItem.MemberNames.ConfigurationItem_Owner.toString() } });
		// NAP.Organisation
		REF_MEMBERS.put(Organisation.getType(), new String[][] {
			new String[] { Request.getType(), Request.MemberNames.Receiving_Organisation.toString() },
			new String[] { Request.getType(), Request.MemberNames.Delivering_Organisation.toString() },
			new String[] { Person.getType(), Person.MemberNames.Person_Organisation.toString() } });
		// NAP.Location
		REF_MEMBERS.put(Location.getType(),	new String[][] { 
			new String[] { Request.getType(), Request.MemberNames.Request_Location.toString() },
			new String[] { Person.getType(), Person.MemberNames.Person_Location.toString() } });
		// SLM.Service
		REF_MEMBERS.put(Service.getType(), new String[][] { 
			new String[] { Request.getType(), Request.MemberNames.Request_Service.toString() } });
		// SLM.Priority
		REF_MEMBERS.put(Priority.getType(), new String[][] { 
			new String[] { Request.getType(), Request.MemberNames.Request_Priority.toString() } });
		// StateTransition.State
		REF_MEMBERS.put(State.getType(), new String[][] { 
			new String[] { Request.getType(), Request.MemberNames.Request_State.toString() },
			new String[] { ConfigurationItem.getType(), ConfigurationItem.MemberNames.ConfigurationItem_States.toString() } });
		// StateTransition.Phase
		REF_MEMBERS.put(Phase.getType(), new String[][] { 
			new String[] { Request.getType(), Request.MemberNames.Request_Phase.toString() } });
		// Category_CMDB.Category
		REF_MEMBERS.put(CICategory.getType(), new String[][] { 
			new String[] { Request.getType(), ConfigurationItem.MemberNames.ConfigurationItem_Category.toString() } });
		// ServiceCatalogue.ProductCategory
		REF_MEMBERS.put(ProductCategory.getType(), new String[][] { 
			new String[] { Product.getType(), Product.MemberNames.Product_ProductCategory.toString() } });
		// Category.Category
		REF_MEMBERS.put(Category.getType(),	new String[][] { 
			new String[] { Request.getType(), Request.MemberNames.Request_Category_Opening.toString() },
			new String[] { Request.getType(), Request.MemberNames.Request_Category_Closure.toString() } });
		// EmailPlus.Message
		REF_MEMBERS.put(emailplus.proxies.Message.getType(), new String[][] { 
			new String[] { Request.getType(), Message.MemberNames.Message_Request.toString() } });
	};

	private final String LOGGER = IndexConfiguration.getLogNode();

	// END EXTRA CODE
}
