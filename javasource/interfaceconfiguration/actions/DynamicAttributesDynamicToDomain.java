// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package interfaceconfiguration.actions;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import metamodel.proxies.PrimitiveTypeEnum;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaEnumValue;
import com.mendix.systemwideinterfaces.core.meta.IMetaEnumeration;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class DynamicAttributesDynamicToDomain extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject InputObject;
	private java.lang.String FieldName;
	private java.lang.String Value;
	private metamodel.proxies.PrimitiveTypeEnum AttributeTypeParameter1;
	private IMendixObject __DynamicAttributeResult;
	private interfaceshared.proxies.JavaActionResult DynamicAttributeResult;

	public DynamicAttributesDynamicToDomain(IContext context, IMendixObject InputObject, java.lang.String FieldName, java.lang.String Value, java.lang.String AttributeTypeParameter1, IMendixObject DynamicAttributeResult)
	{
		super(context);
		this.InputObject = InputObject;
		this.FieldName = FieldName;
		this.Value = Value;
		this.AttributeTypeParameter1 = AttributeTypeParameter1 == null ? null : metamodel.proxies.PrimitiveTypeEnum.valueOf(AttributeTypeParameter1);
		this.__DynamicAttributeResult = DynamicAttributeResult;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.DynamicAttributeResult = __DynamicAttributeResult == null ? null : interfaceshared.proxies.JavaActionResult.initialize(getContext(), __DynamicAttributeResult);

		// BEGIN USER CODE
		boolean result = true;
		if (InputObject.hasMember(FieldName)){
			try{
				switch(AttributeTypeParameter1){
				case DateTime:
					SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss zzzzz");
					Date date = simpleDateFormat.parse(Value);
					InputObject.setValue(this.getContext(), FieldName, date);
				break;
				case IntegerType: case AutoNumber:
					InputObject.setValue(this.getContext(), FieldName, new Integer(Value));
				break;
				case FloatType:
					InputObject.setValue(this.getContext(), FieldName, new Float(Value));
				break;	
				case LongType:
					InputObject.setValue(this.getContext(), FieldName, new Long(Value));
				break;
				case BooleanType:
					if(Value.toLowerCase().equals("true")||Value.toLowerCase().equals("false")){
						InputObject.setValue(this.getContext(), FieldName, Value);
					}
					else{
						String errorMessage = "This is not a boolean value";
						Core.getLogger("SetChangeDynamicAttributes").error(getErrorMessage(AttributeTypeParameter1, errorMessage));
						__DynamicAttributeResult.setValue(this.getContext(), "ErrorMessage", getErrorMessage(AttributeTypeParameter1, errorMessage));
						result = false;
					}
				break;
				case Currency:
					InputObject.setValue(this.getContext(), FieldName, new Double(Value));
				break;
				case EnumType:
					IMetaObject iMetaObject = InputObject.getMetaObject();
					IMetaPrimitive iMetaPrimitive = iMetaObject.getMetaPrimitive(FieldName);
					IMetaEnumeration iMetaEnumeration = iMetaPrimitive.getEnumeration();
					Map<String, IMetaEnumValue> map = iMetaEnumeration.getEnumValues();
					IMetaEnumValue iMetaEnumValue = map.get(Value);
					if(iMetaEnumValue == null){
						Core.getLogger("SetChangeDynamicAttributes").error("Invalid enumeration value: " + Value + " for enumeration "+ iMetaEnumeration.getName() + " linked to field " + FieldName);
						__DynamicAttributeResult.setValue(this.getContext(), "ErrorMessage", "Invalid enumeration value: " + Value + " for enumeration "+ iMetaEnumeration.getName() + " linked to field " + FieldName);
						result = false;				
					}
					else{
						InputObject.setValue(this.getContext(), FieldName, Value);
					}
				break;
				default:
					InputObject.setValue(this.getContext(), FieldName, Value);
				break;
				}
			}
			catch(ParseException pe){
				Core.getLogger("SetChangeDynamicAttributes").error(getErrorMessage(AttributeTypeParameter1, pe.toString()));
				__DynamicAttributeResult.setValue(this.getContext(), "ErrorMessage", getErrorMessage(AttributeTypeParameter1, pe.toString()));
				result = false;
			}		
			catch(NumberFormatException nfe){
				Core.getLogger("SetChangeDynamicAttributes").error(getErrorMessage(AttributeTypeParameter1, nfe.toString()));
				__DynamicAttributeResult.setValue(this.getContext(), "ErrorMessage", getErrorMessage(AttributeTypeParameter1, nfe.toString()));
				result = false;
			}
			catch(IllegalArgumentException iae){
				Core.getLogger("SetChangeDynamicAttributes").error(getErrorMessage(AttributeTypeParameter1, iae.toString()));
				__DynamicAttributeResult.setValue(this.getContext(), "ErrorMessage", getErrorMessage(AttributeTypeParameter1, iae.toString()));
				result = false;
			}
		}
		else{
			Core.getLogger("SetChangeDynamicAttributes").error("Unkown attribute: " + FieldName);
			__DynamicAttributeResult.setValue(this.getContext(), "ErrorMessage", "Unkown attribute: " + FieldName);
			result = false;			
		}
		return result;		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "DynamicAttributesDynamicToDomain";
	}

	// BEGIN EXTRA CODE
	private static String getErrorMessage(PrimitiveTypeEnum attributeTypeParameter12, String errorMessage) {
		String errorMessagePart1 = "Parsing of ";
		String errorMessagePart2 = " failed with error: ";
		return errorMessagePart1 + attributeTypeParameter12.toString() + errorMessagePart2 + errorMessage;
	}	
	// END EXTRA CODE
}
