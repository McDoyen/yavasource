// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package interfaceconfiguration.actions;

import java.net.InetAddress;
import java.net.UnknownHostException;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import communitycommons.XPath;
import interfaceconfiguration.proxies.LDAPInterfaceConfiguration;

public class getLDAPEnabledForServer extends CustomJavaAction<java.lang.Boolean>
{
	public getLDAPEnabledForServer(IContext context)
	{
		super(context);
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		return ldapAuthenticationEnabled();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "getLDAPEnabledForServer";
	}

	// BEGIN EXTRA CODE
	public static boolean ldapAuthenticationEnabled(){
		if(getHostLDAPInterfaceConfiguration() != null){
			return true;
		}
		return false;
	}
		
	public static LDAPInterfaceConfiguration getHostLDAPInterfaceConfiguration(){
		try{
			String hostName = InetAddress.getLocalHost().getHostName();
			XPath<LDAPInterfaceConfiguration> hostLDAPInterfaceConfigurationsXPath = XPath.create(Core.createSystemContext(), LDAPInterfaceConfiguration.class).eq(LDAPInterfaceConfiguration.MemberNames.HostName, hostName).and().eq(LDAPInterfaceConfiguration.MemberNames.UseLDAP, true);
			return hostLDAPInterfaceConfigurationsXPath.first();
		}
		catch(UnknownHostException uhe){
			Core.getLogger("LDAP").error("An error occured during host name resolution, this functionality is used in the interface to determine current host, which in turn is used to determine which ldap configuration entry to use.");
			return null;
		}
		catch (CoreException e) 
		{
			Core.getLogger("LDAP").error("Could not retrieve userrole to determine whether to use LDAP authentication or not: " + e.getMessage(),e);
			return null;
		}
	}
	// END EXTRA CODE
}
