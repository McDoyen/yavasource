// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceconfiguration.proxies;

public class DatabaseInterfaceMessageConfiguration extends interfaceconfiguration.proxies.InterfaceMessageConfiguration
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceConfiguration.DatabaseInterfaceMessageConfiguration";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		MessageDirection("MessageDirection"),
		MessageType("MessageType"),
		Name("Name"),
		Description("Description"),
		ReferenceTaskErrorHandling("ReferenceTaskErrorHandling"),
		CreatePersonWhenNotExist("CreatePersonWhenNotExist"),
		CreateLocationWhenNotExist("CreateLocationWhenNotExist"),
		AlllowOmittingOfUnchangedFields("AlllowOmittingOfUnchangedFields"),
		EmptyFieldIdentifier("EmptyFieldIdentifier"),
		IsAsynchronous("IsAsynchronous"),
		SuccessResponseCode("SuccessResponseCode"),
		FailResponseCode("FailResponseCode"),
		DefaultFailCode("DefaultFailCode"),
		DefaulSuccessCode("DefaulSuccessCode"),
		CreateCIWhenNotExist("CreateCIWhenNotExist"),
		Debug("Debug"),
		OutgoingAttachmentMaximumFileSize("OutgoingAttachmentMaximumFileSize"),
		IncomingAttachmentMaximumFileSize("IncomingAttachmentMaximumFileSize"),
		ShowDefaulting("ShowDefaulting"),
		ShowTranslation("ShowTranslation"),
		ShowInitialStateTranlation("ShowInitialStateTranlation"),
		ShowStateTransitionTranlation("ShowStateTransitionTranlation"),
		ContinueProcessingOnFailedInitialStateTranslation("ContinueProcessingOnFailedInitialStateTranslation"),
		SendMicroflowName("SendMicroflowName"),
		PrepareMicroflowName("PrepareMicroflowName"),
		CustomMicroflowName("CustomMicroflowName"),
		AddPersonToReceivingOrgIFNotAlready("AddPersonToReceivingOrgIFNotAlready"),
		AddPersonToDeliveryGroupIFNotAlready("AddPersonToDeliveryGroupIFNotAlready"),
		CreatePersonInactive("CreatePersonInactive"),
		BINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW("InterfaceConfiguration.BINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW"),
		InterfaceMessageConfiguration_InterfaceConfiguration("InterfaceConfiguration.InterfaceMessageConfiguration_InterfaceConfiguration"),
		InterfaceMessageConfiguration_InterfaceMessageConfigurationConfirmation("InterfaceConfiguration.InterfaceMessageConfiguration_InterfaceMessageConfigurationConfirmation"),
		SendFaultFilter_InterfaceMessageConfiguration("InterfaceConfiguration.SendFaultFilter_InterfaceMessageConfiguration"),
		TempInterfaceMessageConfiguration_InterfaceMessageConfigurationConfirmation("InterfaceConfiguration.TempInterfaceMessageConfiguration_InterfaceMessageConfigurationConfirmation"),
		InterfaceMessageConfiguration_SendMicroflow("InterfaceConfiguration.InterfaceMessageConfiguration_SendMicroflow"),
		InterfaceMessageConfiguration_PrepareMicroflow("InterfaceConfiguration.InterfaceMessageConfiguration_PrepareMicroflow"),
		InterfaceMessageConfiguration_CustomMicroflow("InterfaceConfiguration.InterfaceMessageConfiguration_CustomMicroflow");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public DatabaseInterfaceMessageConfiguration(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceConfiguration.DatabaseInterfaceMessageConfiguration"));
	}

	protected DatabaseInterfaceMessageConfiguration(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject databaseInterfaceMessageConfigurationMendixObject)
	{
		super(context, databaseInterfaceMessageConfigurationMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.DatabaseInterfaceMessageConfiguration", databaseInterfaceMessageConfigurationMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceConfiguration.DatabaseInterfaceMessageConfiguration");
	}

	/**
	 * @deprecated Use 'DatabaseInterfaceMessageConfiguration.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration(context, mendixObject);
	}

	public static interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration.initialize(context, mendixObject);
	}

	public static java.util.List<interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration> result = new java.util.ArrayList<interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceConfiguration.DatabaseInterfaceMessageConfiguration" + xpathConstraint))
			result.add(interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of BINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW
	 */
	public final interfaceconfiguration.proxies.DatabaseInterfaceConfiguration getBINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW() throws com.mendix.core.CoreException
	{
		return getBINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW(getContext());
	}

	/**
	 * @param context
	 * @return value of BINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW
	 */
	public final interfaceconfiguration.proxies.DatabaseInterfaceConfiguration getBINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceconfiguration.proxies.DatabaseInterfaceConfiguration result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.BINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW.toString());
		if (identifier != null)
			result = interfaceconfiguration.proxies.DatabaseInterfaceConfiguration.load(context, identifier);
		return result;
	}

	/**
	 * Set value of BINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW
	 * @param binding_databaseinterfacemessageconfiguration_to_databaseinterfaceconfiguration_do_not_use_in_workflow
	 */
	public final void setBINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW(interfaceconfiguration.proxies.DatabaseInterfaceConfiguration binding_databaseinterfacemessageconfiguration_to_databaseinterfaceconfiguration_do_not_use_in_workflow)
	{
		setBINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW(getContext(), binding_databaseinterfacemessageconfiguration_to_databaseinterfaceconfiguration_do_not_use_in_workflow);
	}

	/**
	 * Set value of BINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW
	 * @param context
	 * @param binding_databaseinterfacemessageconfiguration_to_databaseinterfaceconfiguration_do_not_use_in_workflow
	 */
	public final void setBINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW(com.mendix.systemwideinterfaces.core.IContext context, interfaceconfiguration.proxies.DatabaseInterfaceConfiguration binding_databaseinterfacemessageconfiguration_to_databaseinterfaceconfiguration_do_not_use_in_workflow)
	{
		if (binding_databaseinterfacemessageconfiguration_to_databaseinterfaceconfiguration_do_not_use_in_workflow == null)
			getMendixObject().setValue(context, MemberNames.BINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.BINDING_DatabaseInterfaceMessageConfiguration_TO_DatabaseInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW.toString(), binding_databaseinterfacemessageconfiguration_to_databaseinterfaceconfiguration_do_not_use_in_workflow.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration that = (interfaceconfiguration.proxies.DatabaseInterfaceMessageConfiguration) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceConfiguration.DatabaseInterfaceMessageConfiguration";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
