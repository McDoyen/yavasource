// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceconfiguration.proxies;

public class LDAPInterfaceConfiguration extends interfaceconfiguration.proxies.InterfaceConfiguration
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceConfiguration.LDAPInterfaceConfiguration";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Value("Value"),
		ValueCheck("ValueCheck"),
		ServerAddress("ServerAddress"),
		Root("Root"),
		UseLDAP("UseLDAP"),
		LoginSuffix("LoginSuffix"),
		IsActiveDirectory("IsActiveDirectory"),
		LDAPMaxQueryResultSize("LDAPMaxQueryResultSize"),
		Saved("Saved"),
		LDAPRead("LDAPRead"),
		CurrentHostName("CurrentHostName"),
		HostName("HostName"),
		EntryForCurrentServer("EntryForCurrentServer"),
		ImportLDAPForThisServer("ImportLDAPForThisServer"),
		AllowFallbackLocalAuthentication("AllowFallbackLocalAuthentication"),
		Name("Name"),
		Description("Description"),
		RetryInterval("RetryInterval"),
		IncomingDateTimeFormat("IncomingDateTimeFormat"),
		OutgoingDateTimeFormat("OutgoingDateTimeFormat"),
		DefaultDateTimeFormat("DefaultDateTimeFormat"),
		AsynchronousTimeOut("AsynchronousTimeOut"),
		IncomingStatus("IncomingStatus"),
		OutgoingStatus("OutgoingStatus"),
		MessageCleanUpAge("MessageCleanUpAge"),
		Debug("Debug"),
		ErrorMessageCleanUpAge("ErrorMessageCleanUpAge"),
		LDAPInterfaceConfiguration_LdapServerByPassUserRole("InterfaceConfiguration.LDAPInterfaceConfiguration_LdapServerByPassUserRole"),
		InterfaceMonitoring_InterfaceConfiguration("InterfaceConfiguration.InterfaceMonitoring_InterfaceConfiguration"),
		Note_InitiatingInterfaceConfiguration("Notes.Note_InitiatingInterfaceConfiguration"),
		UU95_RequestAttachment_InitiatingInterfaceConfiguration("Process.UU95_RequestAttachment_InitiatingInterfaceConfiguration"),
		TicketRelations_InitiatingInterfaceConfiguration("Process.TicketRelations_InitiatingInterfaceConfiguration");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public LDAPInterfaceConfiguration(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceConfiguration.LDAPInterfaceConfiguration"));
	}

	protected LDAPInterfaceConfiguration(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject lDAPInterfaceConfigurationMendixObject)
	{
		super(context, lDAPInterfaceConfigurationMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.LDAPInterfaceConfiguration", lDAPInterfaceConfigurationMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceConfiguration.LDAPInterfaceConfiguration");
	}

	/**
	 * @deprecated Use 'LDAPInterfaceConfiguration.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfaceconfiguration.proxies.LDAPInterfaceConfiguration initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfaceconfiguration.proxies.LDAPInterfaceConfiguration.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfaceconfiguration.proxies.LDAPInterfaceConfiguration initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new interfaceconfiguration.proxies.LDAPInterfaceConfiguration(context, mendixObject);
	}

	public static interfaceconfiguration.proxies.LDAPInterfaceConfiguration load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfaceconfiguration.proxies.LDAPInterfaceConfiguration.initialize(context, mendixObject);
	}

	public static java.util.List<interfaceconfiguration.proxies.LDAPInterfaceConfiguration> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceconfiguration.proxies.LDAPInterfaceConfiguration> result = new java.util.ArrayList<interfaceconfiguration.proxies.LDAPInterfaceConfiguration>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceConfiguration.LDAPInterfaceConfiguration" + xpathConstraint))
			result.add(interfaceconfiguration.proxies.LDAPInterfaceConfiguration.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of Value
	 */
	public final java.lang.String getValue()
	{
		return getValue(getContext());
	}

	/**
	 * @param context
	 * @return value of Value
	 */
	public final java.lang.String getValue(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Value.toString());
	}

	/**
	 * Set value of Value
	 * @param value
	 */
	public final void setValue(java.lang.String value)
	{
		setValue(getContext(), value);
	}

	/**
	 * Set value of Value
	 * @param context
	 * @param value
	 */
	public final void setValue(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String value)
	{
		getMendixObject().setValue(context, MemberNames.Value.toString(), value);
	}

	/**
	 * @return value of ValueCheck
	 */
	public final java.lang.String getValueCheck()
	{
		return getValueCheck(getContext());
	}

	/**
	 * @param context
	 * @return value of ValueCheck
	 */
	public final java.lang.String getValueCheck(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ValueCheck.toString());
	}

	/**
	 * Set value of ValueCheck
	 * @param valuecheck
	 */
	public final void setValueCheck(java.lang.String valuecheck)
	{
		setValueCheck(getContext(), valuecheck);
	}

	/**
	 * Set value of ValueCheck
	 * @param context
	 * @param valuecheck
	 */
	public final void setValueCheck(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String valuecheck)
	{
		getMendixObject().setValue(context, MemberNames.ValueCheck.toString(), valuecheck);
	}

	/**
	 * @return value of ServerAddress
	 */
	public final java.lang.String getServerAddress()
	{
		return getServerAddress(getContext());
	}

	/**
	 * @param context
	 * @return value of ServerAddress
	 */
	public final java.lang.String getServerAddress(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ServerAddress.toString());
	}

	/**
	 * Set value of ServerAddress
	 * @param serveraddress
	 */
	public final void setServerAddress(java.lang.String serveraddress)
	{
		setServerAddress(getContext(), serveraddress);
	}

	/**
	 * Set value of ServerAddress
	 * @param context
	 * @param serveraddress
	 */
	public final void setServerAddress(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String serveraddress)
	{
		getMendixObject().setValue(context, MemberNames.ServerAddress.toString(), serveraddress);
	}

	/**
	 * @return value of Root
	 */
	public final java.lang.String getRoot()
	{
		return getRoot(getContext());
	}

	/**
	 * @param context
	 * @return value of Root
	 */
	public final java.lang.String getRoot(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Root.toString());
	}

	/**
	 * Set value of Root
	 * @param root
	 */
	public final void setRoot(java.lang.String root)
	{
		setRoot(getContext(), root);
	}

	/**
	 * Set value of Root
	 * @param context
	 * @param root
	 */
	public final void setRoot(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String root)
	{
		getMendixObject().setValue(context, MemberNames.Root.toString(), root);
	}

	/**
	 * @return value of UseLDAP
	 */
	public final java.lang.Boolean getUseLDAP()
	{
		return getUseLDAP(getContext());
	}

	/**
	 * @param context
	 * @return value of UseLDAP
	 */
	public final java.lang.Boolean getUseLDAP(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.UseLDAP.toString());
	}

	/**
	 * Set value of UseLDAP
	 * @param useldap
	 */
	public final void setUseLDAP(java.lang.Boolean useldap)
	{
		setUseLDAP(getContext(), useldap);
	}

	/**
	 * Set value of UseLDAP
	 * @param context
	 * @param useldap
	 */
	public final void setUseLDAP(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean useldap)
	{
		getMendixObject().setValue(context, MemberNames.UseLDAP.toString(), useldap);
	}

	/**
	 * @return value of LoginSuffix
	 */
	public final java.lang.String getLoginSuffix()
	{
		return getLoginSuffix(getContext());
	}

	/**
	 * @param context
	 * @return value of LoginSuffix
	 */
	public final java.lang.String getLoginSuffix(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.LoginSuffix.toString());
	}

	/**
	 * Set value of LoginSuffix
	 * @param loginsuffix
	 */
	public final void setLoginSuffix(java.lang.String loginsuffix)
	{
		setLoginSuffix(getContext(), loginsuffix);
	}

	/**
	 * Set value of LoginSuffix
	 * @param context
	 * @param loginsuffix
	 */
	public final void setLoginSuffix(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String loginsuffix)
	{
		getMendixObject().setValue(context, MemberNames.LoginSuffix.toString(), loginsuffix);
	}

	/**
	 * @return value of IsActiveDirectory
	 */
	public final java.lang.Boolean getIsActiveDirectory()
	{
		return getIsActiveDirectory(getContext());
	}

	/**
	 * @param context
	 * @return value of IsActiveDirectory
	 */
	public final java.lang.Boolean getIsActiveDirectory(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.IsActiveDirectory.toString());
	}

	/**
	 * Set value of IsActiveDirectory
	 * @param isactivedirectory
	 */
	public final void setIsActiveDirectory(java.lang.Boolean isactivedirectory)
	{
		setIsActiveDirectory(getContext(), isactivedirectory);
	}

	/**
	 * Set value of IsActiveDirectory
	 * @param context
	 * @param isactivedirectory
	 */
	public final void setIsActiveDirectory(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean isactivedirectory)
	{
		getMendixObject().setValue(context, MemberNames.IsActiveDirectory.toString(), isactivedirectory);
	}

	/**
	 * @return value of LDAPMaxQueryResultSize
	 */
	public final java.lang.Integer getLDAPMaxQueryResultSize()
	{
		return getLDAPMaxQueryResultSize(getContext());
	}

	/**
	 * @param context
	 * @return value of LDAPMaxQueryResultSize
	 */
	public final java.lang.Integer getLDAPMaxQueryResultSize(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.LDAPMaxQueryResultSize.toString());
	}

	/**
	 * Set value of LDAPMaxQueryResultSize
	 * @param ldapmaxqueryresultsize
	 */
	public final void setLDAPMaxQueryResultSize(java.lang.Integer ldapmaxqueryresultsize)
	{
		setLDAPMaxQueryResultSize(getContext(), ldapmaxqueryresultsize);
	}

	/**
	 * Set value of LDAPMaxQueryResultSize
	 * @param context
	 * @param ldapmaxqueryresultsize
	 */
	public final void setLDAPMaxQueryResultSize(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer ldapmaxqueryresultsize)
	{
		getMendixObject().setValue(context, MemberNames.LDAPMaxQueryResultSize.toString(), ldapmaxqueryresultsize);
	}

	/**
	 * @return value of Saved
	 */
	public final java.lang.Boolean getSaved()
	{
		return getSaved(getContext());
	}

	/**
	 * @param context
	 * @return value of Saved
	 */
	public final java.lang.Boolean getSaved(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Saved.toString());
	}

	/**
	 * Set value of Saved
	 * @param saved
	 */
	public final void setSaved(java.lang.Boolean saved)
	{
		setSaved(getContext(), saved);
	}

	/**
	 * Set value of Saved
	 * @param context
	 * @param saved
	 */
	public final void setSaved(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean saved)
	{
		getMendixObject().setValue(context, MemberNames.Saved.toString(), saved);
	}

	/**
	 * @return value of LDAPRead
	 */
	public final java.lang.Boolean getLDAPRead()
	{
		return getLDAPRead(getContext());
	}

	/**
	 * @param context
	 * @return value of LDAPRead
	 */
	public final java.lang.Boolean getLDAPRead(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.LDAPRead.toString());
	}

	/**
	 * Set value of LDAPRead
	 * @param ldapread
	 */
	public final void setLDAPRead(java.lang.Boolean ldapread)
	{
		setLDAPRead(getContext(), ldapread);
	}

	/**
	 * Set value of LDAPRead
	 * @param context
	 * @param ldapread
	 */
	public final void setLDAPRead(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean ldapread)
	{
		getMendixObject().setValue(context, MemberNames.LDAPRead.toString(), ldapread);
	}

	/**
	 * @return value of CurrentHostName
	 */
	public final java.lang.String getCurrentHostName()
	{
		return getCurrentHostName(getContext());
	}

	/**
	 * @param context
	 * @return value of CurrentHostName
	 */
	public final java.lang.String getCurrentHostName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.CurrentHostName.toString());
	}

	/**
	 * Set value of CurrentHostName
	 * @param currenthostname
	 */
	public final void setCurrentHostName(java.lang.String currenthostname)
	{
		setCurrentHostName(getContext(), currenthostname);
	}

	/**
	 * Set value of CurrentHostName
	 * @param context
	 * @param currenthostname
	 */
	public final void setCurrentHostName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String currenthostname)
	{
		getMendixObject().setValue(context, MemberNames.CurrentHostName.toString(), currenthostname);
	}

	/**
	 * @return value of HostName
	 */
	public final java.lang.String getHostName()
	{
		return getHostName(getContext());
	}

	/**
	 * @param context
	 * @return value of HostName
	 */
	public final java.lang.String getHostName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.HostName.toString());
	}

	/**
	 * Set value of HostName
	 * @param hostname
	 */
	public final void setHostName(java.lang.String hostname)
	{
		setHostName(getContext(), hostname);
	}

	/**
	 * Set value of HostName
	 * @param context
	 * @param hostname
	 */
	public final void setHostName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String hostname)
	{
		getMendixObject().setValue(context, MemberNames.HostName.toString(), hostname);
	}

	/**
	 * @return value of EntryForCurrentServer
	 */
	public final java.lang.Boolean getEntryForCurrentServer()
	{
		return getEntryForCurrentServer(getContext());
	}

	/**
	 * @param context
	 * @return value of EntryForCurrentServer
	 */
	public final java.lang.Boolean getEntryForCurrentServer(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.EntryForCurrentServer.toString());
	}

	/**
	 * Set value of EntryForCurrentServer
	 * @param entryforcurrentserver
	 */
	public final void setEntryForCurrentServer(java.lang.Boolean entryforcurrentserver)
	{
		setEntryForCurrentServer(getContext(), entryforcurrentserver);
	}

	/**
	 * Set value of EntryForCurrentServer
	 * @param context
	 * @param entryforcurrentserver
	 */
	public final void setEntryForCurrentServer(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean entryforcurrentserver)
	{
		getMendixObject().setValue(context, MemberNames.EntryForCurrentServer.toString(), entryforcurrentserver);
	}

	/**
	 * @return value of ImportLDAPForThisServer
	 */
	public final java.lang.Boolean getImportLDAPForThisServer()
	{
		return getImportLDAPForThisServer(getContext());
	}

	/**
	 * @param context
	 * @return value of ImportLDAPForThisServer
	 */
	public final java.lang.Boolean getImportLDAPForThisServer(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.ImportLDAPForThisServer.toString());
	}

	/**
	 * Set value of ImportLDAPForThisServer
	 * @param importldapforthisserver
	 */
	public final void setImportLDAPForThisServer(java.lang.Boolean importldapforthisserver)
	{
		setImportLDAPForThisServer(getContext(), importldapforthisserver);
	}

	/**
	 * Set value of ImportLDAPForThisServer
	 * @param context
	 * @param importldapforthisserver
	 */
	public final void setImportLDAPForThisServer(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean importldapforthisserver)
	{
		getMendixObject().setValue(context, MemberNames.ImportLDAPForThisServer.toString(), importldapforthisserver);
	}

	/**
	 * Set value of AllowFallbackLocalAuthentication
	 * @param allowfallbacklocalauthentication
	 */
	public final interfaceconfiguration.proxies.AuthenticationBehaviour getAllowFallbackLocalAuthentication()
	{
		return getAllowFallbackLocalAuthentication(getContext());
	}

	/**
	 * @param context
	 * @return value of AllowFallbackLocalAuthentication
	 */
	public final interfaceconfiguration.proxies.AuthenticationBehaviour getAllowFallbackLocalAuthentication(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.AllowFallbackLocalAuthentication.toString());
		if (obj == null)
			return null;

		return interfaceconfiguration.proxies.AuthenticationBehaviour.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of AllowFallbackLocalAuthentication
	 * @param allowfallbacklocalauthentication
	 */
	public final void setAllowFallbackLocalAuthentication(interfaceconfiguration.proxies.AuthenticationBehaviour allowfallbacklocalauthentication)
	{
		setAllowFallbackLocalAuthentication(getContext(), allowfallbacklocalauthentication);
	}

	/**
	 * Set value of AllowFallbackLocalAuthentication
	 * @param context
	 * @param allowfallbacklocalauthentication
	 */
	public final void setAllowFallbackLocalAuthentication(com.mendix.systemwideinterfaces.core.IContext context, interfaceconfiguration.proxies.AuthenticationBehaviour allowfallbacklocalauthentication)
	{
		if (allowfallbacklocalauthentication != null)
			getMendixObject().setValue(context, MemberNames.AllowFallbackLocalAuthentication.toString(), allowfallbacklocalauthentication.toString());
		else
			getMendixObject().setValue(context, MemberNames.AllowFallbackLocalAuthentication.toString(), null);
	}

	/**
	 * @return value of LDAPInterfaceConfiguration_LdapServerByPassUserRole
	 */
	public final java.util.List<interfaceconfiguration.proxies.UserRole> getLDAPInterfaceConfiguration_LdapServerByPassUserRole() throws com.mendix.core.CoreException
	{
		return getLDAPInterfaceConfiguration_LdapServerByPassUserRole(getContext());
	}

	/**
	 * @param context
	 * @return value of LDAPInterfaceConfiguration_LdapServerByPassUserRole
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<interfaceconfiguration.proxies.UserRole> getLDAPInterfaceConfiguration_LdapServerByPassUserRole(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceconfiguration.proxies.UserRole> result = new java.util.ArrayList<interfaceconfiguration.proxies.UserRole>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.LDAPInterfaceConfiguration_LdapServerByPassUserRole.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(interfaceconfiguration.proxies.UserRole.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of LDAPInterfaceConfiguration_LdapServerByPassUserRole
	 * @param ldapinterfaceconfiguration_ldapserverbypassuserrole
	 */
	public final void setLDAPInterfaceConfiguration_LdapServerByPassUserRole(java.util.List<interfaceconfiguration.proxies.UserRole> ldapinterfaceconfiguration_ldapserverbypassuserrole)
	{
		setLDAPInterfaceConfiguration_LdapServerByPassUserRole(getContext(), ldapinterfaceconfiguration_ldapserverbypassuserrole);
	}

	/**
	 * Set value of LDAPInterfaceConfiguration_LdapServerByPassUserRole
	 * @param context
	 * @param ldapinterfaceconfiguration_ldapserverbypassuserrole
	 */
	public final void setLDAPInterfaceConfiguration_LdapServerByPassUserRole(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<interfaceconfiguration.proxies.UserRole> ldapinterfaceconfiguration_ldapserverbypassuserrole)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (interfaceconfiguration.proxies.UserRole proxyObject : ldapinterfaceconfiguration_ldapserverbypassuserrole)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.LDAPInterfaceConfiguration_LdapServerByPassUserRole.toString(), identifiers);
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfaceconfiguration.proxies.LDAPInterfaceConfiguration that = (interfaceconfiguration.proxies.LDAPInterfaceConfiguration) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceConfiguration.LDAPInterfaceConfiguration";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
