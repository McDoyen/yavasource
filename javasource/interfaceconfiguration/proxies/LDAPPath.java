// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceconfiguration.proxies;

/**
 * LdapPath stores a single import location of a LdapServer. A single LdapServer is allowed to import users from serveral paths.
 * For each linked LdapDirectory a LdapPath will be created
 */
public class LDAPPath
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject lDAPPathMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceConfiguration.LDAPPath";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Location("Location"),
		ImportRecursive("ImportRecursive"),
		ImportTypeDescription("ImportTypeDescription"),
		LDAPPath_LDAPImportType("InterfaceConfiguration.LDAPPath_LDAPImportType");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public LDAPPath(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceConfiguration.LDAPPath"));
	}

	protected LDAPPath(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject lDAPPathMendixObject)
	{
		if (lDAPPathMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.LDAPPath", lDAPPathMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceConfiguration.LDAPPath");

		this.lDAPPathMendixObject = lDAPPathMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'LDAPPath.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfaceconfiguration.proxies.LDAPPath initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfaceconfiguration.proxies.LDAPPath.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfaceconfiguration.proxies.LDAPPath initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new interfaceconfiguration.proxies.LDAPPath(context, mendixObject);
	}

	public static interfaceconfiguration.proxies.LDAPPath load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfaceconfiguration.proxies.LDAPPath.initialize(context, mendixObject);
	}

	public static java.util.List<interfaceconfiguration.proxies.LDAPPath> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceconfiguration.proxies.LDAPPath> result = new java.util.ArrayList<interfaceconfiguration.proxies.LDAPPath>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceConfiguration.LDAPPath" + xpathConstraint))
			result.add(interfaceconfiguration.proxies.LDAPPath.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Location
	 */
	public final java.lang.String getLocation()
	{
		return getLocation(getContext());
	}

	/**
	 * @param context
	 * @return value of Location
	 */
	public final java.lang.String getLocation(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Location.toString());
	}

	/**
	 * Set value of Location
	 * @param location
	 */
	public final void setLocation(java.lang.String location)
	{
		setLocation(getContext(), location);
	}

	/**
	 * Set value of Location
	 * @param context
	 * @param location
	 */
	public final void setLocation(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String location)
	{
		getMendixObject().setValue(context, MemberNames.Location.toString(), location);
	}

	/**
	 * @return value of ImportRecursive
	 */
	public final java.lang.Boolean getImportRecursive()
	{
		return getImportRecursive(getContext());
	}

	/**
	 * @param context
	 * @return value of ImportRecursive
	 */
	public final java.lang.Boolean getImportRecursive(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.ImportRecursive.toString());
	}

	/**
	 * Set value of ImportRecursive
	 * @param importrecursive
	 */
	public final void setImportRecursive(java.lang.Boolean importrecursive)
	{
		setImportRecursive(getContext(), importrecursive);
	}

	/**
	 * Set value of ImportRecursive
	 * @param context
	 * @param importrecursive
	 */
	public final void setImportRecursive(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean importrecursive)
	{
		getMendixObject().setValue(context, MemberNames.ImportRecursive.toString(), importrecursive);
	}

	/**
	 * @return value of ImportTypeDescription
	 */
	public final java.lang.String getImportTypeDescription()
	{
		return getImportTypeDescription(getContext());
	}

	/**
	 * @param context
	 * @return value of ImportTypeDescription
	 */
	public final java.lang.String getImportTypeDescription(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ImportTypeDescription.toString());
	}

	/**
	 * Set value of ImportTypeDescription
	 * @param importtypedescription
	 */
	public final void setImportTypeDescription(java.lang.String importtypedescription)
	{
		setImportTypeDescription(getContext(), importtypedescription);
	}

	/**
	 * Set value of ImportTypeDescription
	 * @param context
	 * @param importtypedescription
	 */
	public final void setImportTypeDescription(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String importtypedescription)
	{
		getMendixObject().setValue(context, MemberNames.ImportTypeDescription.toString(), importtypedescription);
	}

	/**
	 * @return value of LDAPPath_LDAPImportType
	 */
	public final interfaceconfiguration.proxies.LDAPImportType getLDAPPath_LDAPImportType() throws com.mendix.core.CoreException
	{
		return getLDAPPath_LDAPImportType(getContext());
	}

	/**
	 * @param context
	 * @return value of LDAPPath_LDAPImportType
	 */
	public final interfaceconfiguration.proxies.LDAPImportType getLDAPPath_LDAPImportType(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceconfiguration.proxies.LDAPImportType result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.LDAPPath_LDAPImportType.toString());
		if (identifier != null)
			result = interfaceconfiguration.proxies.LDAPImportType.load(context, identifier);
		return result;
	}

	/**
	 * Set value of LDAPPath_LDAPImportType
	 * @param ldappath_ldapimporttype
	 */
	public final void setLDAPPath_LDAPImportType(interfaceconfiguration.proxies.LDAPImportType ldappath_ldapimporttype)
	{
		setLDAPPath_LDAPImportType(getContext(), ldappath_ldapimporttype);
	}

	/**
	 * Set value of LDAPPath_LDAPImportType
	 * @param context
	 * @param ldappath_ldapimporttype
	 */
	public final void setLDAPPath_LDAPImportType(com.mendix.systemwideinterfaces.core.IContext context, interfaceconfiguration.proxies.LDAPImportType ldappath_ldapimporttype)
	{
		if (ldappath_ldapimporttype == null)
			getMendixObject().setValue(context, MemberNames.LDAPPath_LDAPImportType.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.LDAPPath_LDAPImportType.toString(), ldappath_ldapimporttype.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return lDAPPathMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfaceconfiguration.proxies.LDAPPath that = (interfaceconfiguration.proxies.LDAPPath) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceConfiguration.LDAPPath";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
