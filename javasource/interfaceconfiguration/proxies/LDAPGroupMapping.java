// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceconfiguration.proxies;

public class LDAPGroupMapping
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject lDAPGroupMappingMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceConfiguration.LDAPGroupMapping";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Status("Status"),
		LDAPGroupMapping_LDAPImportType("InterfaceConfiguration.LDAPGroupMapping_LDAPImportType"),
		LDAPGroupMapping_LDAPGroup("InterfaceConfiguration.LDAPGroupMapping_LDAPGroup"),
		LDAPGroupMapping_Template("InterfaceConfiguration.LDAPGroupMapping_Template"),
		LDAPGroupMapping_Organisation("InterfaceConfiguration.LDAPGroupMapping_Organisation");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public LDAPGroupMapping(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceConfiguration.LDAPGroupMapping"));
	}

	protected LDAPGroupMapping(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject lDAPGroupMappingMendixObject)
	{
		if (lDAPGroupMappingMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.LDAPGroupMapping", lDAPGroupMappingMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceConfiguration.LDAPGroupMapping");

		this.lDAPGroupMappingMendixObject = lDAPGroupMappingMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'LDAPGroupMapping.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfaceconfiguration.proxies.LDAPGroupMapping initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfaceconfiguration.proxies.LDAPGroupMapping.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfaceconfiguration.proxies.LDAPGroupMapping initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new interfaceconfiguration.proxies.LDAPGroupMapping(context, mendixObject);
	}

	public static interfaceconfiguration.proxies.LDAPGroupMapping load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfaceconfiguration.proxies.LDAPGroupMapping.initialize(context, mendixObject);
	}

	public static java.util.List<interfaceconfiguration.proxies.LDAPGroupMapping> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceconfiguration.proxies.LDAPGroupMapping> result = new java.util.ArrayList<interfaceconfiguration.proxies.LDAPGroupMapping>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceConfiguration.LDAPGroupMapping" + xpathConstraint))
			result.add(interfaceconfiguration.proxies.LDAPGroupMapping.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * Set value of Status
	 * @param status
	 */
	public final interfaceconfiguration.proxies.LDAPGroup_Status getStatus()
	{
		return getStatus(getContext());
	}

	/**
	 * @param context
	 * @return value of Status
	 */
	public final interfaceconfiguration.proxies.LDAPGroup_Status getStatus(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.Status.toString());
		if (obj == null)
			return null;

		return interfaceconfiguration.proxies.LDAPGroup_Status.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of Status
	 * @param status
	 */
	public final void setStatus(interfaceconfiguration.proxies.LDAPGroup_Status status)
	{
		setStatus(getContext(), status);
	}

	/**
	 * Set value of Status
	 * @param context
	 * @param status
	 */
	public final void setStatus(com.mendix.systemwideinterfaces.core.IContext context, interfaceconfiguration.proxies.LDAPGroup_Status status)
	{
		if (status != null)
			getMendixObject().setValue(context, MemberNames.Status.toString(), status.toString());
		else
			getMendixObject().setValue(context, MemberNames.Status.toString(), null);
	}

	/**
	 * @return value of LDAPGroupMapping_LDAPImportType
	 */
	public final interfaceconfiguration.proxies.LDAPImportType getLDAPGroupMapping_LDAPImportType() throws com.mendix.core.CoreException
	{
		return getLDAPGroupMapping_LDAPImportType(getContext());
	}

	/**
	 * @param context
	 * @return value of LDAPGroupMapping_LDAPImportType
	 */
	public final interfaceconfiguration.proxies.LDAPImportType getLDAPGroupMapping_LDAPImportType(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceconfiguration.proxies.LDAPImportType result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.LDAPGroupMapping_LDAPImportType.toString());
		if (identifier != null)
			result = interfaceconfiguration.proxies.LDAPImportType.load(context, identifier);
		return result;
	}

	/**
	 * Set value of LDAPGroupMapping_LDAPImportType
	 * @param ldapgroupmapping_ldapimporttype
	 */
	public final void setLDAPGroupMapping_LDAPImportType(interfaceconfiguration.proxies.LDAPImportType ldapgroupmapping_ldapimporttype)
	{
		setLDAPGroupMapping_LDAPImportType(getContext(), ldapgroupmapping_ldapimporttype);
	}

	/**
	 * Set value of LDAPGroupMapping_LDAPImportType
	 * @param context
	 * @param ldapgroupmapping_ldapimporttype
	 */
	public final void setLDAPGroupMapping_LDAPImportType(com.mendix.systemwideinterfaces.core.IContext context, interfaceconfiguration.proxies.LDAPImportType ldapgroupmapping_ldapimporttype)
	{
		if (ldapgroupmapping_ldapimporttype == null)
			getMendixObject().setValue(context, MemberNames.LDAPGroupMapping_LDAPImportType.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.LDAPGroupMapping_LDAPImportType.toString(), ldapgroupmapping_ldapimporttype.getMendixObject().getId());
	}

	/**
	 * @return value of LDAPGroupMapping_LDAPGroup
	 */
	public final interfaceconfiguration.proxies.LDAPGroup getLDAPGroupMapping_LDAPGroup() throws com.mendix.core.CoreException
	{
		return getLDAPGroupMapping_LDAPGroup(getContext());
	}

	/**
	 * @param context
	 * @return value of LDAPGroupMapping_LDAPGroup
	 */
	public final interfaceconfiguration.proxies.LDAPGroup getLDAPGroupMapping_LDAPGroup(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceconfiguration.proxies.LDAPGroup result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.LDAPGroupMapping_LDAPGroup.toString());
		if (identifier != null)
			result = interfaceconfiguration.proxies.LDAPGroup.load(context, identifier);
		return result;
	}

	/**
	 * Set value of LDAPGroupMapping_LDAPGroup
	 * @param ldapgroupmapping_ldapgroup
	 */
	public final void setLDAPGroupMapping_LDAPGroup(interfaceconfiguration.proxies.LDAPGroup ldapgroupmapping_ldapgroup)
	{
		setLDAPGroupMapping_LDAPGroup(getContext(), ldapgroupmapping_ldapgroup);
	}

	/**
	 * Set value of LDAPGroupMapping_LDAPGroup
	 * @param context
	 * @param ldapgroupmapping_ldapgroup
	 */
	public final void setLDAPGroupMapping_LDAPGroup(com.mendix.systemwideinterfaces.core.IContext context, interfaceconfiguration.proxies.LDAPGroup ldapgroupmapping_ldapgroup)
	{
		if (ldapgroupmapping_ldapgroup == null)
			getMendixObject().setValue(context, MemberNames.LDAPGroupMapping_LDAPGroup.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.LDAPGroupMapping_LDAPGroup.toString(), ldapgroupmapping_ldapgroup.getMendixObject().getId());
	}

	/**
	 * @return value of LDAPGroupMapping_Template
	 */
	public final java.util.List<roletemplates.proxies.Template> getLDAPGroupMapping_Template() throws com.mendix.core.CoreException
	{
		return getLDAPGroupMapping_Template(getContext());
	}

	/**
	 * @param context
	 * @return value of LDAPGroupMapping_Template
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<roletemplates.proxies.Template> getLDAPGroupMapping_Template(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<roletemplates.proxies.Template> result = new java.util.ArrayList<roletemplates.proxies.Template>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.LDAPGroupMapping_Template.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(roletemplates.proxies.Template.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of LDAPGroupMapping_Template
	 * @param ldapgroupmapping_template
	 */
	public final void setLDAPGroupMapping_Template(java.util.List<roletemplates.proxies.Template> ldapgroupmapping_template)
	{
		setLDAPGroupMapping_Template(getContext(), ldapgroupmapping_template);
	}

	/**
	 * Set value of LDAPGroupMapping_Template
	 * @param context
	 * @param ldapgroupmapping_template
	 */
	public final void setLDAPGroupMapping_Template(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<roletemplates.proxies.Template> ldapgroupmapping_template)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (roletemplates.proxies.Template proxyObject : ldapgroupmapping_template)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.LDAPGroupMapping_Template.toString(), identifiers);
	}

	/**
	 * @return value of LDAPGroupMapping_Organisation
	 */
	public final java.util.List<nap.proxies.Organisation> getLDAPGroupMapping_Organisation() throws com.mendix.core.CoreException
	{
		return getLDAPGroupMapping_Organisation(getContext());
	}

	/**
	 * @param context
	 * @return value of LDAPGroupMapping_Organisation
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<nap.proxies.Organisation> getLDAPGroupMapping_Organisation(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<nap.proxies.Organisation> result = new java.util.ArrayList<nap.proxies.Organisation>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.LDAPGroupMapping_Organisation.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(nap.proxies.Organisation.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of LDAPGroupMapping_Organisation
	 * @param ldapgroupmapping_organisation
	 */
	public final void setLDAPGroupMapping_Organisation(java.util.List<nap.proxies.Organisation> ldapgroupmapping_organisation)
	{
		setLDAPGroupMapping_Organisation(getContext(), ldapgroupmapping_organisation);
	}

	/**
	 * Set value of LDAPGroupMapping_Organisation
	 * @param context
	 * @param ldapgroupmapping_organisation
	 */
	public final void setLDAPGroupMapping_Organisation(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<nap.proxies.Organisation> ldapgroupmapping_organisation)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (nap.proxies.Organisation proxyObject : ldapgroupmapping_organisation)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.LDAPGroupMapping_Organisation.toString(), identifiers);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return lDAPGroupMappingMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfaceconfiguration.proxies.LDAPGroupMapping that = (interfaceconfiguration.proxies.LDAPGroupMapping) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceConfiguration.LDAPGroupMapping";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
