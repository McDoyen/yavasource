// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceconfiguration.proxies;

public class WebServiceInterfaceMessageConfiguration extends interfaceconfiguration.proxies.InterfaceMessageConfiguration
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceConfiguration.WebServiceInterfaceMessageConfiguration";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		CurrentHostName("CurrentHostName"),
		ShowWarningsToExternalSystems("ShowWarningsToExternalSystems"),
		MessageDirection("MessageDirection"),
		MessageType("MessageType"),
		Name("Name"),
		Description("Description"),
		ReferenceTaskErrorHandling("ReferenceTaskErrorHandling"),
		CreatePersonWhenNotExist("CreatePersonWhenNotExist"),
		CreateLocationWhenNotExist("CreateLocationWhenNotExist"),
		AlllowOmittingOfUnchangedFields("AlllowOmittingOfUnchangedFields"),
		EmptyFieldIdentifier("EmptyFieldIdentifier"),
		IsAsynchronous("IsAsynchronous"),
		SuccessResponseCode("SuccessResponseCode"),
		FailResponseCode("FailResponseCode"),
		DefaultFailCode("DefaultFailCode"),
		DefaulSuccessCode("DefaulSuccessCode"),
		CreateCIWhenNotExist("CreateCIWhenNotExist"),
		Debug("Debug"),
		OutgoingAttachmentMaximumFileSize("OutgoingAttachmentMaximumFileSize"),
		IncomingAttachmentMaximumFileSize("IncomingAttachmentMaximumFileSize"),
		ShowDefaulting("ShowDefaulting"),
		ShowTranslation("ShowTranslation"),
		ShowInitialStateTranlation("ShowInitialStateTranlation"),
		ShowStateTransitionTranlation("ShowStateTransitionTranlation"),
		ContinueProcessingOnFailedInitialStateTranslation("ContinueProcessingOnFailedInitialStateTranslation"),
		SendMicroflowName("SendMicroflowName"),
		PrepareMicroflowName("PrepareMicroflowName"),
		CustomMicroflowName("CustomMicroflowName"),
		AddPersonToReceivingOrgIFNotAlready("AddPersonToReceivingOrgIFNotAlready"),
		AddPersonToDeliveryGroupIFNotAlready("AddPersonToDeliveryGroupIFNotAlready"),
		CreatePersonInactive("CreatePersonInactive"),
		OutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration("InterfaceConfiguration.OutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration"),
		IncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration("InterfaceConfiguration.IncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration"),
		BINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW("InterfaceConfiguration.BINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW"),
		WebServiceInterfaceMessageConfiguration_WebServiceHeader("InterfaceConfiguration.WebServiceInterfaceMessageConfiguration_WebServiceHeader"),
		InterfaceMessageConfiguration_InterfaceConfiguration("InterfaceConfiguration.InterfaceMessageConfiguration_InterfaceConfiguration"),
		InterfaceMessageConfiguration_InterfaceMessageConfigurationConfirmation("InterfaceConfiguration.InterfaceMessageConfiguration_InterfaceMessageConfigurationConfirmation"),
		SendFaultFilter_InterfaceMessageConfiguration("InterfaceConfiguration.SendFaultFilter_InterfaceMessageConfiguration"),
		TempInterfaceMessageConfiguration_InterfaceMessageConfigurationConfirmation("InterfaceConfiguration.TempInterfaceMessageConfiguration_InterfaceMessageConfigurationConfirmation"),
		InterfaceMessageConfiguration_SendMicroflow("InterfaceConfiguration.InterfaceMessageConfiguration_SendMicroflow"),
		InterfaceMessageConfiguration_PrepareMicroflow("InterfaceConfiguration.InterfaceMessageConfiguration_PrepareMicroflow"),
		InterfaceMessageConfiguration_CustomMicroflow("InterfaceConfiguration.InterfaceMessageConfiguration_CustomMicroflow");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public WebServiceInterfaceMessageConfiguration(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceConfiguration.WebServiceInterfaceMessageConfiguration"));
	}

	protected WebServiceInterfaceMessageConfiguration(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject webServiceInterfaceMessageConfigurationMendixObject)
	{
		super(context, webServiceInterfaceMessageConfigurationMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("InterfaceConfiguration.WebServiceInterfaceMessageConfiguration", webServiceInterfaceMessageConfigurationMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceConfiguration.WebServiceInterfaceMessageConfiguration");
	}

	/**
	 * @deprecated Use 'WebServiceInterfaceMessageConfiguration.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration(context, mendixObject);
	}

	public static interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration.initialize(context, mendixObject);
	}

	public static java.util.List<interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration> result = new java.util.ArrayList<interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceConfiguration.WebServiceInterfaceMessageConfiguration" + xpathConstraint))
			result.add(interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of CurrentHostName
	 */
	public final java.lang.String getCurrentHostName()
	{
		return getCurrentHostName(getContext());
	}

	/**
	 * @param context
	 * @return value of CurrentHostName
	 */
	public final java.lang.String getCurrentHostName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.CurrentHostName.toString());
	}

	/**
	 * Set value of CurrentHostName
	 * @param currenthostname
	 */
	public final void setCurrentHostName(java.lang.String currenthostname)
	{
		setCurrentHostName(getContext(), currenthostname);
	}

	/**
	 * Set value of CurrentHostName
	 * @param context
	 * @param currenthostname
	 */
	public final void setCurrentHostName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String currenthostname)
	{
		getMendixObject().setValue(context, MemberNames.CurrentHostName.toString(), currenthostname);
	}

	/**
	 * @return value of ShowWarningsToExternalSystems
	 */
	public final java.lang.Boolean getShowWarningsToExternalSystems()
	{
		return getShowWarningsToExternalSystems(getContext());
	}

	/**
	 * @param context
	 * @return value of ShowWarningsToExternalSystems
	 */
	public final java.lang.Boolean getShowWarningsToExternalSystems(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.ShowWarningsToExternalSystems.toString());
	}

	/**
	 * Set value of ShowWarningsToExternalSystems
	 * @param showwarningstoexternalsystems
	 */
	public final void setShowWarningsToExternalSystems(java.lang.Boolean showwarningstoexternalsystems)
	{
		setShowWarningsToExternalSystems(getContext(), showwarningstoexternalsystems);
	}

	/**
	 * Set value of ShowWarningsToExternalSystems
	 * @param context
	 * @param showwarningstoexternalsystems
	 */
	public final void setShowWarningsToExternalSystems(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean showwarningstoexternalsystems)
	{
		getMendixObject().setValue(context, MemberNames.ShowWarningsToExternalSystems.toString(), showwarningstoexternalsystems);
	}

	/**
	 * @return value of OutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration
	 */
	public final interfaceconfiguration.proxies.WebServiceInterfaceConfiguration getOutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration() throws com.mendix.core.CoreException
	{
		return getOutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration(getContext());
	}

	/**
	 * @param context
	 * @return value of OutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration
	 */
	public final interfaceconfiguration.proxies.WebServiceInterfaceConfiguration getOutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceconfiguration.proxies.WebServiceInterfaceConfiguration result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.OutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration.toString());
		if (identifier != null)
			result = interfaceconfiguration.proxies.WebServiceInterfaceConfiguration.load(context, identifier);
		return result;
	}

	/**
	 * Set value of OutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration
	 * @param outgoingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration
	 */
	public final void setOutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration(interfaceconfiguration.proxies.WebServiceInterfaceConfiguration outgoingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration)
	{
		setOutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration(getContext(), outgoingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration);
	}

	/**
	 * Set value of OutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration
	 * @param context
	 * @param outgoingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration
	 */
	public final void setOutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration(com.mendix.systemwideinterfaces.core.IContext context, interfaceconfiguration.proxies.WebServiceInterfaceConfiguration outgoingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration)
	{
		if (outgoingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration == null)
			getMendixObject().setValue(context, MemberNames.OutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.OutgoingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration.toString(), outgoingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration.getMendixObject().getId());
	}

	/**
	 * @return value of IncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration
	 */
	public final interfaceconfiguration.proxies.WebServiceInterfaceConfiguration getIncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration() throws com.mendix.core.CoreException
	{
		return getIncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration(getContext());
	}

	/**
	 * @param context
	 * @return value of IncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration
	 */
	public final interfaceconfiguration.proxies.WebServiceInterfaceConfiguration getIncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceconfiguration.proxies.WebServiceInterfaceConfiguration result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.IncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration.toString());
		if (identifier != null)
			result = interfaceconfiguration.proxies.WebServiceInterfaceConfiguration.load(context, identifier);
		return result;
	}

	/**
	 * Set value of IncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration
	 * @param incomingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration
	 */
	public final void setIncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration(interfaceconfiguration.proxies.WebServiceInterfaceConfiguration incomingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration)
	{
		setIncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration(getContext(), incomingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration);
	}

	/**
	 * Set value of IncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration
	 * @param context
	 * @param incomingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration
	 */
	public final void setIncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration(com.mendix.systemwideinterfaces.core.IContext context, interfaceconfiguration.proxies.WebServiceInterfaceConfiguration incomingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration)
	{
		if (incomingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration == null)
			getMendixObject().setValue(context, MemberNames.IncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.IncomingHeartBeatWebServiceInterfaceMessageConfiguration_WebServiceInterfaceConfiguration.toString(), incomingheartbeatwebserviceinterfacemessageconfiguration_webserviceinterfaceconfiguration.getMendixObject().getId());
	}

	/**
	 * @return value of BINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW
	 */
	public final interfaceconfiguration.proxies.WebServiceInterfaceConfiguration getBINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW() throws com.mendix.core.CoreException
	{
		return getBINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW(getContext());
	}

	/**
	 * @param context
	 * @return value of BINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW
	 */
	public final interfaceconfiguration.proxies.WebServiceInterfaceConfiguration getBINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceconfiguration.proxies.WebServiceInterfaceConfiguration result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.BINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW.toString());
		if (identifier != null)
			result = interfaceconfiguration.proxies.WebServiceInterfaceConfiguration.load(context, identifier);
		return result;
	}

	/**
	 * Set value of BINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW
	 * @param binding_webserviceinterfacemessageconfiguration_to_webserviceinterfaceconfiguration_do_not_use_in_workflow
	 */
	public final void setBINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW(interfaceconfiguration.proxies.WebServiceInterfaceConfiguration binding_webserviceinterfacemessageconfiguration_to_webserviceinterfaceconfiguration_do_not_use_in_workflow)
	{
		setBINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW(getContext(), binding_webserviceinterfacemessageconfiguration_to_webserviceinterfaceconfiguration_do_not_use_in_workflow);
	}

	/**
	 * Set value of BINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW
	 * @param context
	 * @param binding_webserviceinterfacemessageconfiguration_to_webserviceinterfaceconfiguration_do_not_use_in_workflow
	 */
	public final void setBINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW(com.mendix.systemwideinterfaces.core.IContext context, interfaceconfiguration.proxies.WebServiceInterfaceConfiguration binding_webserviceinterfacemessageconfiguration_to_webserviceinterfaceconfiguration_do_not_use_in_workflow)
	{
		if (binding_webserviceinterfacemessageconfiguration_to_webserviceinterfaceconfiguration_do_not_use_in_workflow == null)
			getMendixObject().setValue(context, MemberNames.BINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.BINDING_WebServiceInterfaceMessageConfiguration_TO_WebServiceInterfaceConfiguration_DO_NOT_USE_IN_WORKFLOW.toString(), binding_webserviceinterfacemessageconfiguration_to_webserviceinterfaceconfiguration_do_not_use_in_workflow.getMendixObject().getId());
	}

	/**
	 * @return value of WebServiceInterfaceMessageConfiguration_WebServiceHeader
	 */
	public final interfaceshared.proxies.WebServiceHeader getWebServiceInterfaceMessageConfiguration_WebServiceHeader() throws com.mendix.core.CoreException
	{
		return getWebServiceInterfaceMessageConfiguration_WebServiceHeader(getContext());
	}

	/**
	 * @param context
	 * @return value of WebServiceInterfaceMessageConfiguration_WebServiceHeader
	 */
	public final interfaceshared.proxies.WebServiceHeader getWebServiceInterfaceMessageConfiguration_WebServiceHeader(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceshared.proxies.WebServiceHeader result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.WebServiceInterfaceMessageConfiguration_WebServiceHeader.toString());
		if (identifier != null)
			result = interfaceshared.proxies.WebServiceHeader.load(context, identifier);
		return result;
	}

	/**
	 * Set value of WebServiceInterfaceMessageConfiguration_WebServiceHeader
	 * @param webserviceinterfacemessageconfiguration_webserviceheader
	 */
	public final void setWebServiceInterfaceMessageConfiguration_WebServiceHeader(interfaceshared.proxies.WebServiceHeader webserviceinterfacemessageconfiguration_webserviceheader)
	{
		setWebServiceInterfaceMessageConfiguration_WebServiceHeader(getContext(), webserviceinterfacemessageconfiguration_webserviceheader);
	}

	/**
	 * Set value of WebServiceInterfaceMessageConfiguration_WebServiceHeader
	 * @param context
	 * @param webserviceinterfacemessageconfiguration_webserviceheader
	 */
	public final void setWebServiceInterfaceMessageConfiguration_WebServiceHeader(com.mendix.systemwideinterfaces.core.IContext context, interfaceshared.proxies.WebServiceHeader webserviceinterfacemessageconfiguration_webserviceheader)
	{
		if (webserviceinterfacemessageconfiguration_webserviceheader == null)
			getMendixObject().setValue(context, MemberNames.WebServiceInterfaceMessageConfiguration_WebServiceHeader.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.WebServiceInterfaceMessageConfiguration_WebServiceHeader.toString(), webserviceinterfacemessageconfiguration_webserviceheader.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration that = (interfaceconfiguration.proxies.WebServiceInterfaceMessageConfiguration) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceConfiguration.WebServiceInterfaceMessageConfiguration";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
