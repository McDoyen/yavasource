// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceldap.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the InterfaceLDAP module
	public static void aC_GroupLDAPInbox(IContext context, interfaceldap.proxies.GroupLDAPInbox _groupLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("GroupLDAPInbox", _groupLDAPInbox == null ? null : _groupLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.AC_GroupLDAPInbox", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aC_LocationLDAPInbox(IContext context, interfaceldap.proxies.LocationLDAPInbox _locationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocationLDAPInbox", _locationLDAPInbox == null ? null : _locationLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.AC_LocationLDAPInbox", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aC_OrganisationLDAPInbox(IContext context, interfaceldap.proxies.OrganisationLDAPInbox _organisationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OrganisationLDAPInbox", _organisationLDAPInbox == null ? null : _organisationLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.AC_OrganisationLDAPInbox", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aC_PersonLDAPInbox(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.AC_PersonLDAPInbox", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean accountSetRolesAndTemplates(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox, mendix.proxies.Account _account, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _parentProcessingPart, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			params.put("Account", _account == null ? null : _account.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceLDAP.AccountSetRolesAndTemplates", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean commitAccount(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox, interfaceshared.proxies.ProcessingPart _parentProcessingPart, java.lang.String _logNode, interfaceshared.proxies.Attempt _attempt, mendix.proxies.Account _account, nap.proxies.Person _person, interfaceldap.proxies.LDAPImport _lDAPImport, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			params.put("Account", _account == null ? null : _account.getMendixObject());
			params.put("Person", _person == null ? null : _person.getMendixObject());
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceLDAP.CommitAccount", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean commitBusinessGroup(IContext context, interfaceldap.proxies.OrganisationLDAPInbox _organisationLDAPInbox, interfaceshared.proxies.ProcessingPart _parentProcessingPart, java.lang.String _logNode, interfaceshared.proxies.Attempt _attempt, nap.proxies.BusinessGroup _businessGroup, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OrganisationLDAPInbox", _organisationLDAPInbox == null ? null : _organisationLDAPInbox.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			params.put("BusinessGroup", _businessGroup == null ? null : _businessGroup.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceLDAP.CommitBusinessGroup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean commitCustomer(IContext context, interfaceldap.proxies.OrganisationLDAPInbox _organisationLDAPInbox, interfaceshared.proxies.ProcessingPart _parentProcessingPart, java.lang.String _logNode, interfaceshared.proxies.Attempt _attempt, nap.proxies.Customer _customer, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OrganisationLDAPInbox", _organisationLDAPInbox == null ? null : _organisationLDAPInbox.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			params.put("Customer", _customer == null ? null : _customer.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceLDAP.CommitCustomer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean commitLocation(IContext context, interfaceldap.proxies.LocationLDAPInbox _locationLDAPInbox, interfaceshared.proxies.ProcessingPart _parentProcessingPart, java.lang.String _logNode, interfaceshared.proxies.Attempt _attempt, nap.proxies.Location _location, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocationLDAPInbox", _locationLDAPInbox == null ? null : _locationLDAPInbox.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			params.put("Location", _location == null ? null : _location.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceLDAP.CommitLocation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean commitOrganisation(IContext context, interfaceldap.proxies.OrganisationLDAPInbox _organisationLDAPInbox, interfaceshared.proxies.ProcessingPart _parentProcessingPart, java.lang.String _logNode, interfaceshared.proxies.Attempt _attempt, nap.proxies.Organisation _organisation, java.util.List<interfaceldap.proxies.LDAPImportedLocation> _toBeCreatedLDAPImportedLocationList, java.util.List<interfaceldap.proxies.LDAPImportedLocation> _toBeDeletedLDAPImportedLocationList, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OrganisationLDAPInbox", _organisationLDAPInbox == null ? null : _organisationLDAPInbox.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			params.put("Organisation", _organisation == null ? null : _organisation.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedLocationList = null;
			if (_toBeCreatedLDAPImportedLocationList != null)
			{
				listparam_toBeCreatedLDAPImportedLocationList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedLocation obj : _toBeCreatedLDAPImportedLocationList)
					listparam_toBeCreatedLDAPImportedLocationList.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedLocationList", listparam_toBeCreatedLDAPImportedLocationList);
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedLocationList = null;
			if (_toBeDeletedLDAPImportedLocationList != null)
			{
				listparam_toBeDeletedLDAPImportedLocationList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedLocation obj : _toBeDeletedLDAPImportedLocationList)
					listparam_toBeDeletedLDAPImportedLocationList.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedLocationList", listparam_toBeDeletedLDAPImportedLocationList);
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceLDAP.CommitOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean commitPerson(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox, interfaceshared.proxies.ProcessingPart _parentProcessingPart, java.lang.String _logNode, interfaceshared.proxies.Attempt _attempt, nap.proxies.Person _person, java.util.List<interfaceldap.proxies.LDAPImportedLocation> _toBeCreatedLDAPImportedLocationList, java.util.List<interfaceldap.proxies.LDAPImportedBusinessGroup> _toBeCreatedLDAPImportedBusinessGroupList, java.util.List<interfaceldap.proxies.LDAPImportedCustomer> _toBeCreatedLDAPImportedCustomerList, java.util.List<interfaceldap.proxies.LDAPImportedBusinessGroup> _toBeDeletedLDAPImportedBusinessGroupList, java.util.List<interfaceldap.proxies.LDAPImportedCustomer> _toBeDeletedLDAPImportedCustomerList, java.util.List<interfaceldap.proxies.LDAPImportedLocation> _toBeDeletedLDAPImportedLocationlist)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("Attempt", _attempt == null ? null : _attempt.getMendixObject());
			params.put("Person", _person == null ? null : _person.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedLocationList = null;
			if (_toBeCreatedLDAPImportedLocationList != null)
			{
				listparam_toBeCreatedLDAPImportedLocationList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedLocation obj : _toBeCreatedLDAPImportedLocationList)
					listparam_toBeCreatedLDAPImportedLocationList.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedLocationList", listparam_toBeCreatedLDAPImportedLocationList);
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedBusinessGroupList = null;
			if (_toBeCreatedLDAPImportedBusinessGroupList != null)
			{
				listparam_toBeCreatedLDAPImportedBusinessGroupList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedBusinessGroup obj : _toBeCreatedLDAPImportedBusinessGroupList)
					listparam_toBeCreatedLDAPImportedBusinessGroupList.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedBusinessGroupList", listparam_toBeCreatedLDAPImportedBusinessGroupList);
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedCustomerList = null;
			if (_toBeCreatedLDAPImportedCustomerList != null)
			{
				listparam_toBeCreatedLDAPImportedCustomerList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedCustomer obj : _toBeCreatedLDAPImportedCustomerList)
					listparam_toBeCreatedLDAPImportedCustomerList.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedCustomerList", listparam_toBeCreatedLDAPImportedCustomerList);
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedBusinessGroupList = null;
			if (_toBeDeletedLDAPImportedBusinessGroupList != null)
			{
				listparam_toBeDeletedLDAPImportedBusinessGroupList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedBusinessGroup obj : _toBeDeletedLDAPImportedBusinessGroupList)
					listparam_toBeDeletedLDAPImportedBusinessGroupList.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedBusinessGroupList", listparam_toBeDeletedLDAPImportedBusinessGroupList);
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedCustomerList = null;
			if (_toBeDeletedLDAPImportedCustomerList != null)
			{
				listparam_toBeDeletedLDAPImportedCustomerList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedCustomer obj : _toBeDeletedLDAPImportedCustomerList)
					listparam_toBeDeletedLDAPImportedCustomerList.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedCustomerList", listparam_toBeDeletedLDAPImportedCustomerList);
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedLocationlist = null;
			if (_toBeDeletedLDAPImportedLocationlist != null)
			{
				listparam_toBeDeletedLDAPImportedLocationlist = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedLocation obj : _toBeDeletedLDAPImportedLocationlist)
					listparam_toBeDeletedLDAPImportedLocationlist.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedLocationlist", listparam_toBeDeletedLDAPImportedLocationlist);
			return (java.lang.Boolean)Core.execute(context, "InterfaceLDAP.CommitPerson", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean createOrUpdate_Account(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt, java.lang.String _logNode, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, nap.proxies.Person _person, interfaceldap.proxies.LDAPImport _lDAPImport, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("Person", _person == null ? null : _person.getMendixObject());
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceLDAP.CreateOrUpdate_Account", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deactivateAccount(IContext context, mendix.proxies.Account _account, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _processingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Account", _account == null ? null : _account.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.DeactivateAccount", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deactivateLDAPGroup(IContext context, interfaceconfiguration.proxies.LDAPGroup _lDAPGroup, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _processingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPGroup", _lDAPGroup == null ? null : _lDAPGroup.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.DeactivateLDAPGroup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deactivateLocation(IContext context, nap.proxies.Location _location, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _processingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Location", _location == null ? null : _location.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.DeactivateLocation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deactivateOrganisation(IContext context, nap.proxies.Organisation _organisation, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _processingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Organisation", _organisation == null ? null : _organisation.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.DeactivateOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deactivatePerson(IContext context, nap.proxies.Person _person, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _processingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Person", _person == null ? null : _person.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("ProcessingPart", _processingPart == null ? null : _processingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.DeactivatePerson", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean fillToBeCreatedImportOrganisationLocations(IContext context, java.util.List<interfaceldap.proxies.LDAPImportedLocation> _toBeCreatedLDAPImportedLocationlist, java.util.List<nap.proxies.Location> _existingLocationList, java.util.List<nap.proxies.Location> _locationList, nap.proxies.Organisation _organisation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedLocationlist = null;
			if (_toBeCreatedLDAPImportedLocationlist != null)
			{
				listparam_toBeCreatedLDAPImportedLocationlist = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedLocation obj : _toBeCreatedLDAPImportedLocationlist)
					listparam_toBeCreatedLDAPImportedLocationlist.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedLocationlist", listparam_toBeCreatedLDAPImportedLocationlist);
			java.util.ArrayList<IMendixObject> listparam_existingLocationList = null;
			if (_existingLocationList != null)
			{
				listparam_existingLocationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Location obj : _existingLocationList)
					listparam_existingLocationList.add(obj.getMendixObject());
			}
			params.put("ExistingLocationList", listparam_existingLocationList);
			java.util.ArrayList<IMendixObject> listparam_locationList = null;
			if (_locationList != null)
			{
				listparam_locationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Location obj : _locationList)
					listparam_locationList.add(obj.getMendixObject());
			}
			params.put("LocationList", listparam_locationList);
			params.put("Organisation", _organisation == null ? null : _organisation.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceLDAP.FillToBeCreatedImportOrganisationLocations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void fillToBeCreatedImportPersonBusinessGroups(IContext context, java.util.List<interfaceldap.proxies.LDAPImportedBusinessGroup> _toBeCreatedLDAPImportedBusinessGroupList, java.util.List<nap.proxies.BusinessGroup> _existingBusinessGroupList, java.util.List<nap.proxies.BusinessGroup> _businessGroupList, nap.proxies.Person _person)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedBusinessGroupList = null;
			if (_toBeCreatedLDAPImportedBusinessGroupList != null)
			{
				listparam_toBeCreatedLDAPImportedBusinessGroupList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedBusinessGroup obj : _toBeCreatedLDAPImportedBusinessGroupList)
					listparam_toBeCreatedLDAPImportedBusinessGroupList.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedBusinessGroupList", listparam_toBeCreatedLDAPImportedBusinessGroupList);
			java.util.ArrayList<IMendixObject> listparam_existingBusinessGroupList = null;
			if (_existingBusinessGroupList != null)
			{
				listparam_existingBusinessGroupList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.BusinessGroup obj : _existingBusinessGroupList)
					listparam_existingBusinessGroupList.add(obj.getMendixObject());
			}
			params.put("ExistingBusinessGroupList", listparam_existingBusinessGroupList);
			java.util.ArrayList<IMendixObject> listparam_businessGroupList = null;
			if (_businessGroupList != null)
			{
				listparam_businessGroupList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.BusinessGroup obj : _businessGroupList)
					listparam_businessGroupList.add(obj.getMendixObject());
			}
			params.put("BusinessGroupList", listparam_businessGroupList);
			params.put("Person", _person == null ? null : _person.getMendixObject());
			Core.execute(context, "InterfaceLDAP.FillToBeCreatedImportPersonBusinessGroups", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void fillToBeCreatedImportPersonCustomers(IContext context, java.util.List<interfaceldap.proxies.LDAPImportedCustomer> _toBeCreatedLDAPImportedCustomerList, java.util.List<nap.proxies.Customer> _existingCustomerList, java.util.List<nap.proxies.Customer> _customerList, nap.proxies.Person _person)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedCustomerList = null;
			if (_toBeCreatedLDAPImportedCustomerList != null)
			{
				listparam_toBeCreatedLDAPImportedCustomerList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedCustomer obj : _toBeCreatedLDAPImportedCustomerList)
					listparam_toBeCreatedLDAPImportedCustomerList.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedCustomerList", listparam_toBeCreatedLDAPImportedCustomerList);
			java.util.ArrayList<IMendixObject> listparam_existingCustomerList = null;
			if (_existingCustomerList != null)
			{
				listparam_existingCustomerList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Customer obj : _existingCustomerList)
					listparam_existingCustomerList.add(obj.getMendixObject());
			}
			params.put("ExistingCustomerList", listparam_existingCustomerList);
			java.util.ArrayList<IMendixObject> listparam_customerList = null;
			if (_customerList != null)
			{
				listparam_customerList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Customer obj : _customerList)
					listparam_customerList.add(obj.getMendixObject());
			}
			params.put("CustomerList", listparam_customerList);
			params.put("Person", _person == null ? null : _person.getMendixObject());
			Core.execute(context, "InterfaceLDAP.FillToBeCreatedImportPersonCustomers", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void fillToBeCreatedImportPersonLocations(IContext context, java.util.List<interfaceldap.proxies.LDAPImportedLocation> _toBeCreatedLDAPImportedLocationList, java.util.List<nap.proxies.Location> _existingLocationList, java.util.List<nap.proxies.Location> _locationList, nap.proxies.Person _person)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedLocationList = null;
			if (_toBeCreatedLDAPImportedLocationList != null)
			{
				listparam_toBeCreatedLDAPImportedLocationList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedLocation obj : _toBeCreatedLDAPImportedLocationList)
					listparam_toBeCreatedLDAPImportedLocationList.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedLocationList", listparam_toBeCreatedLDAPImportedLocationList);
			java.util.ArrayList<IMendixObject> listparam_existingLocationList = null;
			if (_existingLocationList != null)
			{
				listparam_existingLocationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Location obj : _existingLocationList)
					listparam_existingLocationList.add(obj.getMendixObject());
			}
			params.put("ExistingLocationList", listparam_existingLocationList);
			java.util.ArrayList<IMendixObject> listparam_locationList = null;
			if (_locationList != null)
			{
				listparam_locationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Location obj : _locationList)
					listparam_locationList.add(obj.getMendixObject());
			}
			params.put("LocationList", listparam_locationList);
			params.put("Person", _person == null ? null : _person.getMendixObject());
			Core.execute(context, "InterfaceLDAP.FillToBeCreatedImportPersonLocations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean fillToBeDeletedImportOrganisationLocations(IContext context, java.util.List<interfaceldap.proxies.LDAPImportedLocation> _toBeDeletedLDAPImportedLocationlist, java.util.List<nap.proxies.Location> _existingLocationList, java.util.List<nap.proxies.Location> _locationList, nap.proxies.Organisation _organisation, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedLocationlist = null;
			if (_toBeDeletedLDAPImportedLocationlist != null)
			{
				listparam_toBeDeletedLDAPImportedLocationlist = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedLocation obj : _toBeDeletedLDAPImportedLocationlist)
					listparam_toBeDeletedLDAPImportedLocationlist.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedLocationlist", listparam_toBeDeletedLDAPImportedLocationlist);
			java.util.ArrayList<IMendixObject> listparam_existingLocationList = null;
			if (_existingLocationList != null)
			{
				listparam_existingLocationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Location obj : _existingLocationList)
					listparam_existingLocationList.add(obj.getMendixObject());
			}
			params.put("ExistingLocationList", listparam_existingLocationList);
			java.util.ArrayList<IMendixObject> listparam_locationList = null;
			if (_locationList != null)
			{
				listparam_locationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Location obj : _locationList)
					listparam_locationList.add(obj.getMendixObject());
			}
			params.put("LocationList", listparam_locationList);
			params.put("Organisation", _organisation == null ? null : _organisation.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceLDAP.FillToBeDeletedImportOrganisationLocations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void fillToBeDeletedImportPersonBusinessGroup(IContext context, java.util.List<interfaceldap.proxies.LDAPImportedBusinessGroup> _toBeDeletedLDAPImportedBusinessGroupList, java.util.List<nap.proxies.BusinessGroup> _existingBusinessGroupList, java.util.List<nap.proxies.BusinessGroup> _businessGroupList, nap.proxies.Person _person, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedBusinessGroupList = null;
			if (_toBeDeletedLDAPImportedBusinessGroupList != null)
			{
				listparam_toBeDeletedLDAPImportedBusinessGroupList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedBusinessGroup obj : _toBeDeletedLDAPImportedBusinessGroupList)
					listparam_toBeDeletedLDAPImportedBusinessGroupList.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedBusinessGroupList", listparam_toBeDeletedLDAPImportedBusinessGroupList);
			java.util.ArrayList<IMendixObject> listparam_existingBusinessGroupList = null;
			if (_existingBusinessGroupList != null)
			{
				listparam_existingBusinessGroupList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.BusinessGroup obj : _existingBusinessGroupList)
					listparam_existingBusinessGroupList.add(obj.getMendixObject());
			}
			params.put("ExistingBusinessGroupList", listparam_existingBusinessGroupList);
			java.util.ArrayList<IMendixObject> listparam_businessGroupList = null;
			if (_businessGroupList != null)
			{
				listparam_businessGroupList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.BusinessGroup obj : _businessGroupList)
					listparam_businessGroupList.add(obj.getMendixObject());
			}
			params.put("BusinessGroupList", listparam_businessGroupList);
			params.put("Person", _person == null ? null : _person.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			Core.execute(context, "InterfaceLDAP.FillToBeDeletedImportPersonBusinessGroup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void fillToBeDeletedImportPersonCustomers(IContext context, java.util.List<interfaceldap.proxies.LDAPImportedCustomer> _toBeDeletedLDAPImportedCustomerlist, java.util.List<nap.proxies.Customer> _existingCustomerList, java.util.List<nap.proxies.Customer> _customerList, nap.proxies.Person _person, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedCustomerlist = null;
			if (_toBeDeletedLDAPImportedCustomerlist != null)
			{
				listparam_toBeDeletedLDAPImportedCustomerlist = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedCustomer obj : _toBeDeletedLDAPImportedCustomerlist)
					listparam_toBeDeletedLDAPImportedCustomerlist.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedCustomerlist", listparam_toBeDeletedLDAPImportedCustomerlist);
			java.util.ArrayList<IMendixObject> listparam_existingCustomerList = null;
			if (_existingCustomerList != null)
			{
				listparam_existingCustomerList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Customer obj : _existingCustomerList)
					listparam_existingCustomerList.add(obj.getMendixObject());
			}
			params.put("ExistingCustomerList", listparam_existingCustomerList);
			java.util.ArrayList<IMendixObject> listparam_customerList = null;
			if (_customerList != null)
			{
				listparam_customerList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Customer obj : _customerList)
					listparam_customerList.add(obj.getMendixObject());
			}
			params.put("CustomerList", listparam_customerList);
			params.put("Person", _person == null ? null : _person.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			Core.execute(context, "InterfaceLDAP.FillToBeDeletedImportPersonCustomers", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void fillToBeDeletedImportPersonLocations(IContext context, java.util.List<interfaceldap.proxies.LDAPImportedLocation> _toBeDeletedLDAPImportedLocationlist, java.util.List<nap.proxies.Location> _existingLocationList, java.util.List<nap.proxies.Location> _locationList, nap.proxies.Person _person, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedLocationlist = null;
			if (_toBeDeletedLDAPImportedLocationlist != null)
			{
				listparam_toBeDeletedLDAPImportedLocationlist = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedLocation obj : _toBeDeletedLDAPImportedLocationlist)
					listparam_toBeDeletedLDAPImportedLocationlist.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedLocationlist", listparam_toBeDeletedLDAPImportedLocationlist);
			java.util.ArrayList<IMendixObject> listparam_existingLocationList = null;
			if (_existingLocationList != null)
			{
				listparam_existingLocationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Location obj : _existingLocationList)
					listparam_existingLocationList.add(obj.getMendixObject());
			}
			params.put("ExistingLocationList", listparam_existingLocationList);
			java.util.ArrayList<IMendixObject> listparam_locationList = null;
			if (_locationList != null)
			{
				listparam_locationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Location obj : _locationList)
					listparam_locationList.add(obj.getMendixObject());
			}
			params.put("LocationList", listparam_locationList);
			params.put("Person", _person == null ? null : _person.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			Core.execute(context, "InterfaceLDAP.FillToBeDeletedImportPersonLocations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Contact_Info> get_ContactInfo(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox, nap.proxies.Person _person, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt, java.lang.String _logNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			params.put("Person", _person == null ? null : _person.getMendixObject());
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			params.put("LogNode", _logNode);
			java.util.List<IMendixObject> objs = Core.execute(context, "InterfaceLDAP.Get_ContactInfo", params);
			java.util.List<nap.proxies.Contact_Info> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Contact_Info>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Contact_Info.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Location> get_Location(IContext context, interfaceldap.proxies.LDAPInbox _lDAPInbox, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt, java.lang.String _logNode, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, interfaceconfiguration.proxies.DefaultTableItem _defaultTableItem)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPInbox", _lDAPInbox == null ? null : _lDAPInbox.getMendixObject());
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("DefaultTableItem", _defaultTableItem == null ? null : _defaultTableItem.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "InterfaceLDAP.Get_Location", params);
			java.util.List<nap.proxies.Location> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Location>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Location.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> get_Organisation(IContext context, interfaceldap.proxies.LDAPInbox _lDAPInbox, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt, java.lang.String _logNode, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, interfaceconfiguration.proxies.DefaultTableItem _defaultTableItem)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPInbox", _lDAPInbox == null ? null : _lDAPInbox.getMendixObject());
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("DefaultTableItem", _defaultTableItem == null ? null : _defaultTableItem.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "InterfaceLDAP.Get_Organisation", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importLDAPImportType(IContext context, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, interfaceshared.proxies.LDAPProcessingAttempt _lDAPProcessingAttempt, interfaceldap.proxies.LDAPImport _lDAPImport, interfaceconfiguration.proxies.LDAPInterfaceConfiguration _lDAPInterfaceConfiguration, boolean _valueCheckChanged, java.lang.String _valueCheckCode, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("LDAPProcessingAttempt", _lDAPProcessingAttempt == null ? null : _lDAPProcessingAttempt.getMendixObject());
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			params.put("LDAPInterfaceConfiguration", _lDAPInterfaceConfiguration == null ? null : _lDAPInterfaceConfiguration.getMendixObject());
			params.put("ValueCheckChanged", _valueCheckChanged);
			params.put("ValueCheckCode", _valueCheckCode);
			params.put("LogNode", _logNode);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ImportLDAPImportType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importOrganisationLocationLDAPImportType(IContext context, interfaceshared.proxies.LDAPProcessingAttempt _lDAPProcessingAttempt, interfaceldap.proxies.LDAPImport _lDAPImport, interfaceconfiguration.proxies.LDAPInterfaceConfiguration _lDAPInterfaceConfiguration, boolean _valueCheckChanged, java.lang.String _valueCheckCode, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPProcessingAttempt", _lDAPProcessingAttempt == null ? null : _lDAPProcessingAttempt.getMendixObject());
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			params.put("LDAPInterfaceConfiguration", _lDAPInterfaceConfiguration == null ? null : _lDAPInterfaceConfiguration.getMendixObject());
			params.put("ValueCheckChanged", _valueCheckChanged);
			params.put("ValueCheckCode", _valueCheckCode);
			params.put("LogNode", _logNode);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ImportOrganisationLocationLDAPImportType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importPersonGroupLDAPImportType(IContext context, interfaceshared.proxies.LDAPProcessingAttempt _lDAPProcessingAttempt, interfaceldap.proxies.LDAPImport _lDAPImport, interfaceconfiguration.proxies.LDAPInterfaceConfiguration _lDAPInterfaceConfiguration, boolean _valueCheckChanged, java.lang.String _valueCheckCode, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPProcessingAttempt", _lDAPProcessingAttempt == null ? null : _lDAPProcessingAttempt.getMendixObject());
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			params.put("LDAPInterfaceConfiguration", _lDAPInterfaceConfiguration == null ? null : _lDAPInterfaceConfiguration.getMendixObject());
			params.put("ValueCheckChanged", _valueCheckChanged);
			params.put("ValueCheckCode", _valueCheckCode);
			params.put("LogNode", _logNode);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ImportPersonGroupLDAPImportType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importPersonLocationLDAPImportType(IContext context, interfaceshared.proxies.LDAPProcessingAttempt _lDAPProcessingAttempt, interfaceldap.proxies.LDAPImport _lDAPImport, interfaceconfiguration.proxies.LDAPInterfaceConfiguration _lDAPInterfaceConfiguration, boolean _valueCheckChanged, java.lang.String _valueCheckCode, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPProcessingAttempt", _lDAPProcessingAttempt == null ? null : _lDAPProcessingAttempt.getMendixObject());
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			params.put("LDAPInterfaceConfiguration", _lDAPInterfaceConfiguration == null ? null : _lDAPInterfaceConfiguration.getMendixObject());
			params.put("ValueCheckChanged", _valueCheckChanged);
			params.put("ValueCheckCode", _valueCheckCode);
			params.put("LogNode", _logNode);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ImportPersonLocationLDAPImportType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importPersonOrganisationLDAPImportType(IContext context, interfaceshared.proxies.LDAPProcessingAttempt _lDAPProcessingAttempt, interfaceldap.proxies.LDAPImport _lDAPImport, interfaceconfiguration.proxies.LDAPInterfaceConfiguration _lDAPInterfaceConfiguration, boolean _valueCheckChanged, java.lang.String _valueCheckCode, java.lang.String _logNode, boolean _importLocationsWithOrganisations, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPProcessingAttempt", _lDAPProcessingAttempt == null ? null : _lDAPProcessingAttempt.getMendixObject());
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			params.put("LDAPInterfaceConfiguration", _lDAPInterfaceConfiguration == null ? null : _lDAPInterfaceConfiguration.getMendixObject());
			params.put("ValueCheckChanged", _valueCheckChanged);
			params.put("ValueCheckCode", _valueCheckCode);
			params.put("LogNode", _logNode);
			params.put("ImportLocationsWithOrganisations", _importLocationsWithOrganisations);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ImportPersonOrganisationLDAPImportType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GroupLDAPInboxCancel(IContext context, interfaceldap.proxies.GroupLDAPInbox _groupLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("GroupLDAPInbox", _groupLDAPInbox == null ? null : _groupLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_GroupLDAPInboxCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GroupLDAPInboxSave(IContext context, interfaceldap.proxies.GroupLDAPInbox _groupLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("GroupLDAPInbox", _groupLDAPInbox == null ? null : _groupLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_GroupLDAPInboxSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GroupLDAPInboxSaveAndClose(IContext context, interfaceldap.proxies.GroupLDAPInbox _groupLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("GroupLDAPInbox", _groupLDAPInbox == null ? null : _groupLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_GroupLDAPInboxSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_LDAPImportCancel(IContext context, interfaceldap.proxies.LDAPImport _lDAPImport)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_LDAPImportCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_LDAPImportSave(IContext context, interfaceldap.proxies.LDAPImport _lDAPImport)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_LDAPImportSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_LDAPImportSaveAndClose(IContext context, interfaceldap.proxies.LDAPImport _lDAPImport)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_LDAPImportSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_LocationLDAPInboxCancel(IContext context, interfaceldap.proxies.LocationLDAPInbox _locationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocationLDAPInbox", _locationLDAPInbox == null ? null : _locationLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_LocationLDAPInboxCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_LocationLDAPInboxSave(IContext context, interfaceldap.proxies.LocationLDAPInbox _locationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocationLDAPInbox", _locationLDAPInbox == null ? null : _locationLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_LocationLDAPInboxSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_LocationLDAPInboxSaveAndClose(IContext context, interfaceldap.proxies.LocationLDAPInbox _locationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocationLDAPInbox", _locationLDAPInbox == null ? null : _locationLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_LocationLDAPInboxSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OrganisationLDAPInboxCancel(IContext context, interfaceldap.proxies.OrganisationLDAPInbox _organisationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OrganisationLDAPInbox", _organisationLDAPInbox == null ? null : _organisationLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_OrganisationLDAPInboxCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OrganisationLDAPInboxSave(IContext context, interfaceldap.proxies.OrganisationLDAPInbox _organisationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OrganisationLDAPInbox", _organisationLDAPInbox == null ? null : _organisationLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_OrganisationLDAPInboxSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OrganisationLDAPInboxSaveAndClose(IContext context, interfaceldap.proxies.OrganisationLDAPInbox _organisationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OrganisationLDAPInbox", _organisationLDAPInbox == null ? null : _organisationLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_OrganisationLDAPInboxSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_PersonLDAPInboxCancel(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_PersonLDAPInboxCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_PersonLDAPInboxSave(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_PersonLDAPInboxSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_PersonLDAPInboxSaveAndClose(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_PersonLDAPInboxSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ReprocessGroupLDAPInbox(IContext context, interfaceldap.proxies.GroupLDAPInbox _groupLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("GroupLDAPInbox", _groupLDAPInbox == null ? null : _groupLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_ReprocessGroupLDAPInbox", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ReprocessLDAPImport(IContext context, interfaceldap.proxies.LDAPImport _lDAPImport)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPImport", _lDAPImport == null ? null : _lDAPImport.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_ReprocessLDAPImport", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ReprocessLocationLDAPInbox(IContext context, interfaceldap.proxies.LocationLDAPInbox _locationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocationLDAPInbox", _locationLDAPInbox == null ? null : _locationLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_ReprocessLocationLDAPInbox", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ReprocessOrganisationLDAPInbox(IContext context, interfaceldap.proxies.OrganisationLDAPInbox _organisationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OrganisationLDAPInbox", _organisationLDAPInbox == null ? null : _organisationLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_ReprocessOrganisationLDAPInbox", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ReprocessPersonLDAPInbox(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			Core.execute(context, "InterfaceLDAP.IVK_ReprocessPersonLDAPInbox", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processGroup(IContext context, interfaceldap.proxies.GroupLDAPInbox _groupLDAPInbox, boolean _manual, interfaceshared.proxies.RepeatingStructureProcessingAttempt _newRepeatingStructureProcessingAttempt, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("GroupLDAPInbox", _groupLDAPInbox == null ? null : _groupLDAPInbox.getMendixObject());
			params.put("Manual", _manual);
			params.put("NewRepeatingStructureProcessingAttempt", _newRepeatingStructureProcessingAttempt == null ? null : _newRepeatingStructureProcessingAttempt.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ProcessGroup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 3915
	 * Changed from database retrieve on InterfaceConfiguration.TranslationTableItem to microflow call InterfaceLDAP.RetrieveLocationCountry. We need to check the location enum by MatchCountry.
	 * 
	 */
	public static void processLocation(IContext context, interfaceldap.proxies.LocationLDAPInbox _locationLDAPInbox, boolean _manual, interfaceshared.proxies.RepeatingStructureProcessingAttempt _newRepeatingStructureProcessingAttempt, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocationLDAPInbox", _locationLDAPInbox == null ? null : _locationLDAPInbox.getMendixObject());
			params.put("Manual", _manual);
			params.put("NewRepeatingStructureProcessingAttempt", _newRepeatingStructureProcessingAttempt == null ? null : _newRepeatingStructureProcessingAttempt.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ProcessLocation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processOrganisation(IContext context, interfaceldap.proxies.OrganisationLDAPInbox _organisationLDAPInbox, boolean _manual, interfaceshared.proxies.RepeatingStructureProcessingAttempt _newRepeatingStructureProcessingAttempt, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OrganisationLDAPInbox", _organisationLDAPInbox == null ? null : _organisationLDAPInbox.getMendixObject());
			params.put("Manual", _manual);
			params.put("NewRepeatingStructureProcessingAttempt", _newRepeatingStructureProcessingAttempt == null ? null : _newRepeatingStructureProcessingAttempt.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ProcessOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processPerson(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox, boolean _manual, interfaceshared.proxies.RepeatingStructureProcessingAttempt _newRepeatingStructureProcessingAttempt, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			params.put("Manual", _manual);
			params.put("NewRepeatingStructureProcessingAttempt", _newRepeatingStructureProcessingAttempt == null ? null : _newRepeatingStructureProcessingAttempt.getMendixObject());
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ProcessPerson", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processPersonLocation(IContext context, java.util.List<interfaceldap.proxies.LDAPImportedLocation> _toBeCreatedLDAPImportedLocationList, java.util.List<nap.proxies.Location> _locationList, nap.proxies.Person _person, java.util.List<interfaceldap.proxies.LDAPImportedLocation> _toBeDeletedLDAPImportedLocationList, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedLocationList = null;
			if (_toBeCreatedLDAPImportedLocationList != null)
			{
				listparam_toBeCreatedLDAPImportedLocationList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedLocation obj : _toBeCreatedLDAPImportedLocationList)
					listparam_toBeCreatedLDAPImportedLocationList.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedLocationList", listparam_toBeCreatedLDAPImportedLocationList);
			java.util.ArrayList<IMendixObject> listparam_locationList = null;
			if (_locationList != null)
			{
				listparam_locationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Location obj : _locationList)
					listparam_locationList.add(obj.getMendixObject());
			}
			params.put("LocationList", listparam_locationList);
			params.put("Person", _person == null ? null : _person.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedLocationList = null;
			if (_toBeDeletedLDAPImportedLocationList != null)
			{
				listparam_toBeDeletedLDAPImportedLocationList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedLocation obj : _toBeDeletedLDAPImportedLocationList)
					listparam_toBeDeletedLDAPImportedLocationList.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedLocationList", listparam_toBeDeletedLDAPImportedLocationList);
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ProcessPersonLocation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processPersonOrganisations(IContext context, java.util.List<interfaceldap.proxies.LDAPImportedBusinessGroup> _toBeCreatedLDAPImportedBusinessGroupList, java.util.List<nap.proxies.Organisation> _organisationList, nap.proxies.Person _person, java.util.List<interfaceldap.proxies.LDAPImportedCustomer> _toBeCreatedLDAPImportedCustomerList, java.util.List<interfaceldap.proxies.LDAPImportedBusinessGroup> _toBeDeletedLDAPImportedBusinessGroupList, java.util.List<interfaceldap.proxies.LDAPImportedCustomer> _toBeDeletedLDAPImportedCustomerList, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedBusinessGroupList = null;
			if (_toBeCreatedLDAPImportedBusinessGroupList != null)
			{
				listparam_toBeCreatedLDAPImportedBusinessGroupList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedBusinessGroup obj : _toBeCreatedLDAPImportedBusinessGroupList)
					listparam_toBeCreatedLDAPImportedBusinessGroupList.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedBusinessGroupList", listparam_toBeCreatedLDAPImportedBusinessGroupList);
			java.util.ArrayList<IMendixObject> listparam_organisationList = null;
			if (_organisationList != null)
			{
				listparam_organisationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Organisation obj : _organisationList)
					listparam_organisationList.add(obj.getMendixObject());
			}
			params.put("OrganisationList", listparam_organisationList);
			params.put("Person", _person == null ? null : _person.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_toBeCreatedLDAPImportedCustomerList = null;
			if (_toBeCreatedLDAPImportedCustomerList != null)
			{
				listparam_toBeCreatedLDAPImportedCustomerList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedCustomer obj : _toBeCreatedLDAPImportedCustomerList)
					listparam_toBeCreatedLDAPImportedCustomerList.add(obj.getMendixObject());
			}
			params.put("ToBeCreatedLDAPImportedCustomerList", listparam_toBeCreatedLDAPImportedCustomerList);
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedBusinessGroupList = null;
			if (_toBeDeletedLDAPImportedBusinessGroupList != null)
			{
				listparam_toBeDeletedLDAPImportedBusinessGroupList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedBusinessGroup obj : _toBeDeletedLDAPImportedBusinessGroupList)
					listparam_toBeDeletedLDAPImportedBusinessGroupList.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedBusinessGroupList", listparam_toBeDeletedLDAPImportedBusinessGroupList);
			java.util.ArrayList<IMendixObject> listparam_toBeDeletedLDAPImportedCustomerList = null;
			if (_toBeDeletedLDAPImportedCustomerList != null)
			{
				listparam_toBeDeletedLDAPImportedCustomerList = new java.util.ArrayList<IMendixObject>();
				for (interfaceldap.proxies.LDAPImportedCustomer obj : _toBeDeletedLDAPImportedCustomerList)
					listparam_toBeDeletedLDAPImportedCustomerList.add(obj.getMendixObject());
			}
			params.put("ToBeDeletedLDAPImportedCustomerList", listparam_toBeDeletedLDAPImportedCustomerList);
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			Core.execute(context, "InterfaceLDAP.ProcessPersonOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Location retrieveExistingLocation(IContext context, java.lang.String _locationName, java.lang.String _interfaceGUID, java.lang.String _lDAPID, interfaceshared.proxies.ProcessingPart _parentProcessingPart, java.lang.String _logNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocationName", _locationName);
			params.put("InterfaceGUID", _interfaceGUID);
			params.put("LDAPID", _lDAPID);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LogNode", _logNode);
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceLDAP.RetrieveExistingLocation", params);
			return result == null ? null : nap.proxies.Location.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Organisation retrieveExistingOrganisation(IContext context, java.lang.String _organisationName, java.lang.String _interfaceGUID, java.lang.String _lDAPID, interfaceshared.proxies.ProcessingPart _parentProcessingPart, java.lang.String _logNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OrganisationName", _organisationName);
			params.put("InterfaceGUID", _interfaceGUID);
			params.put("LDAPID", _lDAPID);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LogNode", _logNode);
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceLDAP.RetrieveExistingOrganisation", params);
			return result == null ? null : nap.proxies.Organisation.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Person retrieveExistingPerson(IContext context, java.lang.String _firstName, java.lang.String _join, java.lang.String _lastName, java.lang.String _interfaceGUID, java.lang.String _lDAPID, java.lang.String _logNode, interfaceshared.proxies.ProcessingPart _parentProcessingPart)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("FirstName", _firstName);
			params.put("Join", _join);
			params.put("LastName", _lastName);
			params.put("InterfaceGUID", _interfaceGUID);
			params.put("LDAPID", _lDAPID);
			params.put("LogNode", _logNode);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceLDAP.RetrieveExistingPerson", params);
			return result == null ? null : nap.proxies.Person.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static system.proxies.Language retrieveLanguage(IContext context, java.lang.String _logNode, java.lang.String _languageString, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("LanguageString", _languageString);
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceLDAP.RetrieveLanguage", params);
			return result == null ? null : system.proxies.Language.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Countries retrieveLocationCountry(IContext context, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, java.lang.String _logNode, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt, interfaceldap.proxies.LocationLDAPInbox _locationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			params.put("LocationLDAPInbox", _locationLDAPInbox == null ? null : _locationLDAPInbox.getMendixObject());
			java.lang.String result = (java.lang.String)Core.execute(context, "InterfaceLDAP.RetrieveLocationCountry", params);
			if (result == null)
				return null;
			return nap.proxies.Countries.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Location retrieveOrganisationLocation(IContext context, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, java.lang.String _logNode, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt, interfaceldap.proxies.OrganisationLDAPInbox _organisationLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			params.put("OrganisationLDAPInbox", _organisationLDAPInbox == null ? null : _organisationLDAPInbox.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceLDAP.RetrieveOrganisationLocation", params);
			return result == null ? null : nap.proxies.Location.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Location retrievePersonLocation(IContext context, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, java.lang.String _logNode, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceLDAP.RetrievePersonLocation", params);
			return result == null ? null : nap.proxies.Location.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Organisation retrievePersonOrganisation(IContext context, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType, java.lang.String _logNode, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			params.put("LogNode", _logNode);
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceLDAP.RetrievePersonOrganisation", params);
			return result == null ? null : nap.proxies.Organisation.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static system.proxies.TimeZone retrieveTimeZone(IContext context, java.lang.String _logNode, java.lang.String _timeZoneString, boolean _blocking, interfaceshared.proxies.ProcessingPart _parentProcessingPart, interfaceconfiguration.proxies.LDAPImportType _lDAPImportType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LogNode", _logNode);
			params.put("TimeZoneString", _timeZoneString);
			params.put("Blocking", _blocking);
			params.put("ParentProcessingPart", _parentProcessingPart == null ? null : _parentProcessingPart.getMendixObject());
			params.put("LDAPImportType", _lDAPImportType == null ? null : _lDAPImportType.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceLDAP.RetrieveTimeZone", params);
			return result == null ? null : system.proxies.TimeZone.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void set_PersonName(IContext context, interfaceldap.proxies.PersonLDAPInbox _personLDAPInbox, nap.proxies.Person _person, interfaceshared.proxies.RepeatingStructureProcessingAttempt _repeatingStructureProcessingAttempt, java.lang.String _logNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PersonLDAPInbox", _personLDAPInbox == null ? null : _personLDAPInbox.getMendixObject());
			params.put("Person", _person == null ? null : _person.getMendixObject());
			params.put("RepeatingStructureProcessingAttempt", _repeatingStructureProcessingAttempt == null ? null : _repeatingStructureProcessingAttempt.getMendixObject());
			params.put("LogNode", _logNode);
			Core.execute(context, "InterfaceLDAP.Set_PersonName", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 *  4166
	 * Wrong decryption string
	 */
	public static void syncAll_LDAP(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceLDAP.SyncAll_LDAP", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}