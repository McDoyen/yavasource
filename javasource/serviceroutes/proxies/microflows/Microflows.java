// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package serviceroutes.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the ServiceRoutes module
	public static void calculateXPositions(IContext context, java.lang.Long _boxWidthPar, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("BoxWidthPar", _boxWidthPar);
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			Core.execute(context, "ServiceRoutes.CalculateXPositions", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void calculateYPositions(IContext context, serviceroutes.proxies.ServiceRouteGraph _processSelection)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessSelection", _processSelection == null ? null : _processSelection.getMendixObject());
			Core.execute(context, "ServiceRoutes.CalculateYPositions", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callServiceRoute_WithService_FromDeepLink(IContext context, slm.proxies.Service _service, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph_2)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			params.put("ServiceRouteGraph_2", _serviceRouteGraph_2 == null ? null : _serviceRouteGraph_2.getMendixObject());
			Core.execute(context, "ServiceRoutes.CallServiceRoute_WithService_FromDeepLink", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callServiceRoute_WithServiceList(IContext context, java.util.List<slm.proxies.Service> _serviceList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_serviceList = null;
			if (_serviceList != null)
			{
				listparam_serviceList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Service obj : _serviceList)
					listparam_serviceList.add(obj.getMendixObject());
			}
			params.put("ServiceList", listparam_serviceList);
			Core.execute(context, "ServiceRoutes.CallServiceRoute_WithServiceList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkLinkNodes(IContext context, slm.proxies.Contract _parentContract, slm.proxies.Contract _childContract, slm.proxies.Service _parentService, slm.proxies.Service _childService, cmdb.proxies.ConfigurationItem _parentTechnicalService, cmdb.proxies.ConfigurationItem _childTechnicalService, serviceroutes.proxies.NodeTypeEnum _childNodeType, serviceroutes.proxies.NodeTypeEnum _parentNodeType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ParentContract", _parentContract == null ? null : _parentContract.getMendixObject());
			params.put("ChildContract", _childContract == null ? null : _childContract.getMendixObject());
			params.put("ParentService", _parentService == null ? null : _parentService.getMendixObject());
			params.put("ChildService", _childService == null ? null : _childService.getMendixObject());
			params.put("ParentTechnicalService", _parentTechnicalService == null ? null : _parentTechnicalService.getMendixObject());
			params.put("ChildTechnicalService", _childTechnicalService == null ? null : _childTechnicalService.getMendixObject());
			params.put("ChildNodeType", _childNodeType == null ? null : _childNodeType.name());
			params.put("ParentNodeType", _parentNodeType == null ? null : _parentNodeType.name());
			return (java.lang.Boolean)Core.execute(context, "ServiceRoutes.CheckLinkNodes", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void closeAndDeleteUserGraphs(IContext context, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			Core.execute(context, "ServiceRoutes.CloseAndDeleteUserGraphs", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createChart(IContext context, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			Core.execute(context, "ServiceRoutes.CreateChart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<serviceroutes.proxies.Node> createInitialNodes(IContext context, java.util.List<slm.proxies.Service> _rootServiceList, java.util.List<cmdb.proxies.ConfigurationItem> _rootTechnicalServiceList, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph, serviceroutes.proxies.NodeTypeEnum _rootNodeType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_rootServiceList = null;
			if (_rootServiceList != null)
			{
				listparam_rootServiceList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Service obj : _rootServiceList)
					listparam_rootServiceList.add(obj.getMendixObject());
			}
			params.put("RootServiceList", listparam_rootServiceList);
			java.util.ArrayList<IMendixObject> listparam_rootTechnicalServiceList = null;
			if (_rootTechnicalServiceList != null)
			{
				listparam_rootTechnicalServiceList = new java.util.ArrayList<IMendixObject>();
				for (cmdb.proxies.ConfigurationItem obj : _rootTechnicalServiceList)
					listparam_rootTechnicalServiceList.add(obj.getMendixObject());
			}
			params.put("RootTechnicalServiceList", listparam_rootTechnicalServiceList);
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			params.put("RootNodeType", _rootNodeType == null ? null : _rootNodeType.name());
			java.util.List<IMendixObject> objs = Core.execute(context, "ServiceRoutes.CreateInitialNodes", params);
			java.util.List<serviceroutes.proxies.Node> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<serviceroutes.proxies.Node>();
				for (IMendixObject obj : objs)
					result.add(serviceroutes.proxies.Node.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<serviceroutes.proxies.Node> createNode(IContext context, slm.proxies.Service _childService, cmdb.proxies.ConfigurationItem _childTechnicalService, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph, serviceroutes.proxies.Node _parentNode, serviceroutes.proxies.NodeTypeEnum _childNodeType, serviceroutes.proxies.NodeTypeEnum _parentNodeType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChildService", _childService == null ? null : _childService.getMendixObject());
			params.put("ChildTechnicalService", _childTechnicalService == null ? null : _childTechnicalService.getMendixObject());
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			params.put("ParentNode", _parentNode == null ? null : _parentNode.getMendixObject());
			params.put("ChildNodeType", _childNodeType == null ? null : _childNodeType.name());
			params.put("ParentNodeType", _parentNodeType == null ? null : _parentNodeType.name());
			java.util.List<IMendixObject> objs = Core.execute(context, "ServiceRoutes.CreateNode", params);
			java.util.List<serviceroutes.proxies.Node> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<serviceroutes.proxies.Node>();
				for (IMendixObject obj : objs)
					result.add(serviceroutes.proxies.Node.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void drillDownServiceRoute_Deeplink(IContext context, java.lang.String _inputService, boolean _restrict, java.lang.String _process)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputService", _inputService);
			params.put("Restrict", _restrict);
			params.put("Process", _process);
			Core.execute(context, "ServiceRoutes.DrillDownServiceRoute_Deeplink", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<serviceroutes.proxies.Node> find_NodeListByContractServiceOrTechnicalService(IContext context, slm.proxies.Contract _nodeContract, slm.proxies.Service _nodeService, cmdb.proxies.ConfigurationItem _nodeTechnicalService, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("NodeContract", _nodeContract == null ? null : _nodeContract.getMendixObject());
			params.put("NodeService", _nodeService == null ? null : _nodeService.getMendixObject());
			params.put("NodeTechnicalService", _nodeTechnicalService == null ? null : _nodeTechnicalService.getMendixObject());
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "ServiceRoutes.Find_NodeListByContractServiceOrTechnicalService", params);
			java.util.List<serviceroutes.proxies.Node> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<serviceroutes.proxies.Node>();
				for (IMendixObject obj : objs)
					result.add(serviceroutes.proxies.Node.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> getContractList(IContext context, slm.proxies.Service _childService, cmdb.proxies.ConfigurationItem _childTechnicalService, slm.proxies.ProcessType _processType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChildService", _childService == null ? null : _childService.getMendixObject());
			params.put("ChildTechnicalService", _childTechnicalService == null ? null : _childTechnicalService.getMendixObject());
			params.put("ProcessType", _processType == null ? null : _processType.name());
			java.util.List<IMendixObject> objs = Core.execute(context, "ServiceRoutes.GetContractList", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> getInitialContractList(IContext context, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph, slm.proxies.Service _service, cmdb.proxies.ConfigurationItem _technicalService)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			params.put("Service", _service == null ? null : _service.getMendixObject());
			params.put("TechnicalService", _technicalService == null ? null : _technicalService.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "ServiceRoutes.GetInitialContractList", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void getServiceNode_Recursive(IContext context, serviceroutes.proxies.Node _parentNode, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph, java.lang.Long _recursionCheck)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ParentNode", _parentNode == null ? null : _parentNode.getMendixObject());
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			params.put("RecursionCheck", _recursionCheck);
			Core.execute(context, "ServiceRoutes.GetServiceNode_Recursive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void getTechnicalServiceNodes_FromServiceNodes(IContext context, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			Core.execute(context, "ServiceRoutes.GetTechnicalServiceNodes_FromServiceNodes", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void getTechnicalServiceNodes_Recursive(IContext context, java.util.List<serviceroutes.proxies.Node> _parentNodeList, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph, java.lang.Long _recursionCheck)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_parentNodeList = null;
			if (_parentNodeList != null)
			{
				listparam_parentNodeList = new java.util.ArrayList<IMendixObject>();
				for (serviceroutes.proxies.Node obj : _parentNodeList)
					listparam_parentNodeList.add(obj.getMendixObject());
			}
			params.put("ParentNodeList", listparam_parentNodeList);
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			params.put("RecursionCheck", _recursionCheck);
			Core.execute(context, "ServiceRoutes.GetTechnicalServiceNodes_Recursive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void open_LargerChart(IContext context, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			Core.execute(context, "ServiceRoutes.Open_LargerChart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void saveAndRefeshGraph(IContext context, serviceroutes.proxies.ServiceRouteGraph _processSelection)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessSelection", _processSelection == null ? null : _processSelection.getMendixObject());
			Core.execute(context, "ServiceRoutes.SaveAndRefeshGraph", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void startCalculation(IContext context, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			Core.execute(context, "ServiceRoutes.StartCalculation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void startServiceRoute(IContext context, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			Core.execute(context, "ServiceRoutes.StartServiceRoute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void swapOrder(IContext context, serviceroutes.proxies.ServiceRouteGraph _serviceRouteGraph)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceRouteGraph", _serviceRouteGraph == null ? null : _serviceRouteGraph.getMendixObject());
			Core.execute(context, "ServiceRoutes.SwapOrder", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void swapUseTechnicalServices(IContext context, serviceroutes.proxies.ServiceRouteGraph _processSelection)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ProcessSelection", _processSelection == null ? null : _processSelection.getMendixObject());
			Core.execute(context, "ServiceRoutes.SwapUseTechnicalServices", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateRelation(IContext context, serviceroutes.proxies.ServiceRelations _serviceRelations)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceRelations", _serviceRelations == null ? null : _serviceRelations.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "ServiceRoutes.ValidateRelation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}