// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package questionnaire.proxies;

public class Questionnaire extends requestanalysis.proxies.Analysis
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Questionnaire.Questionnaire";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		isDefault("isDefault"),
		Name("Name"),
		Questionnaire_Organisation("Questionnaire.Questionnaire_Organisation");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Questionnaire(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Questionnaire.Questionnaire"));
	}

	protected Questionnaire(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject questionnaireMendixObject)
	{
		super(context, questionnaireMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("Questionnaire.Questionnaire", questionnaireMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Questionnaire.Questionnaire");
	}

	/**
	 * @deprecated Use 'Questionnaire.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static questionnaire.proxies.Questionnaire initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return questionnaire.proxies.Questionnaire.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static questionnaire.proxies.Questionnaire initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new questionnaire.proxies.Questionnaire(context, mendixObject);
	}

	public static questionnaire.proxies.Questionnaire load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return questionnaire.proxies.Questionnaire.initialize(context, mendixObject);
	}

	public static java.util.List<questionnaire.proxies.Questionnaire> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<questionnaire.proxies.Questionnaire> result = new java.util.ArrayList<questionnaire.proxies.Questionnaire>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Questionnaire.Questionnaire" + xpathConstraint))
			result.add(questionnaire.proxies.Questionnaire.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of isDefault
	 */
	public final java.lang.Boolean getisDefault()
	{
		return getisDefault(getContext());
	}

	/**
	 * @param context
	 * @return value of isDefault
	 */
	public final java.lang.Boolean getisDefault(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.isDefault.toString());
	}

	/**
	 * Set value of isDefault
	 * @param isdefault
	 */
	public final void setisDefault(java.lang.Boolean isdefault)
	{
		setisDefault(getContext(), isdefault);
	}

	/**
	 * Set value of isDefault
	 * @param context
	 * @param isdefault
	 */
	public final void setisDefault(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean isdefault)
	{
		getMendixObject().setValue(context, MemberNames.isDefault.toString(), isdefault);
	}

	/**
	 * @return value of Questionnaire_Organisation
	 */
	public final java.util.List<nap.proxies.Organisation> getQuestionnaire_Organisation() throws com.mendix.core.CoreException
	{
		return getQuestionnaire_Organisation(getContext());
	}

	/**
	 * @param context
	 * @return value of Questionnaire_Organisation
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<nap.proxies.Organisation> getQuestionnaire_Organisation(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<nap.proxies.Organisation> result = new java.util.ArrayList<nap.proxies.Organisation>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.Questionnaire_Organisation.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(nap.proxies.Organisation.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of Questionnaire_Organisation
	 * @param questionnaire_organisation
	 */
	public final void setQuestionnaire_Organisation(java.util.List<nap.proxies.Organisation> questionnaire_organisation)
	{
		setQuestionnaire_Organisation(getContext(), questionnaire_organisation);
	}

	/**
	 * Set value of Questionnaire_Organisation
	 * @param context
	 * @param questionnaire_organisation
	 */
	public final void setQuestionnaire_Organisation(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<nap.proxies.Organisation> questionnaire_organisation)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (nap.proxies.Organisation proxyObject : questionnaire_organisation)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.Questionnaire_Organisation.toString(), identifiers);
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final questionnaire.proxies.Questionnaire that = (questionnaire.proxies.Questionnaire) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Questionnaire.Questionnaire";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
