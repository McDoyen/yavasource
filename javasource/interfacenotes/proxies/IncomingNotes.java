// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfacenotes.proxies;

public class IncomingNotes extends interfaceshared.proxies.IncomingMessage
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceNotes.IncomingNotes";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		InterfaceName("InterfaceName"),
		ExternalReferenceID("ExternalReferenceID"),
		InternalReferenceID("InternalReferenceID"),
		SuccessfullyProcessed("SuccessfullyProcessed"),
		MessageID("MessageID"),
		MessageType("MessageType"),
		MessageDirection("MessageDirection"),
		Status("Status"),
		RetrievedInterfaceName("RetrievedInterfaceName"),
		CreatedByCustomMessage("CreatedByCustomMessage"),
		IncomingNotes_Request("InterfaceNotes.IncomingNotes_Request"),
		IncomingMessage_SynchronousResponse("InterfaceShared.IncomingMessage_SynchronousResponse"),
		BooleanWrapper_Message("InterfaceShared.BooleanWrapper_Message"),
		Message_IndexData("InterfaceShared.Message_IndexData"),
		Message_InterfaceMessageConfiguration("InterfaceShared.Message_InterfaceMessageConfiguration"),
		Message_InterfaceConfiguration("InterfaceShared.Message_InterfaceConfiguration");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public IncomingNotes(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceNotes.IncomingNotes"));
	}

	protected IncomingNotes(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject incomingNotesMendixObject)
	{
		super(context, incomingNotesMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("InterfaceNotes.IncomingNotes", incomingNotesMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceNotes.IncomingNotes");
	}

	/**
	 * @deprecated Use 'IncomingNotes.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfacenotes.proxies.IncomingNotes initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfacenotes.proxies.IncomingNotes.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfacenotes.proxies.IncomingNotes initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new interfacenotes.proxies.IncomingNotes(context, mendixObject);
	}

	public static interfacenotes.proxies.IncomingNotes load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfacenotes.proxies.IncomingNotes.initialize(context, mendixObject);
	}

	public static java.util.List<interfacenotes.proxies.IncomingNotes> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfacenotes.proxies.IncomingNotes> result = new java.util.ArrayList<interfacenotes.proxies.IncomingNotes>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceNotes.IncomingNotes" + xpathConstraint))
			result.add(interfacenotes.proxies.IncomingNotes.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of IncomingNotes_Request
	 */
	public final process.proxies.Request getIncomingNotes_Request() throws com.mendix.core.CoreException
	{
		return getIncomingNotes_Request(getContext());
	}

	/**
	 * @param context
	 * @return value of IncomingNotes_Request
	 */
	public final process.proxies.Request getIncomingNotes_Request(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		process.proxies.Request result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.IncomingNotes_Request.toString());
		if (identifier != null)
			result = process.proxies.Request.load(context, identifier);
		return result;
	}

	/**
	 * Set value of IncomingNotes_Request
	 * @param incomingnotes_request
	 */
	public final void setIncomingNotes_Request(process.proxies.Request incomingnotes_request)
	{
		setIncomingNotes_Request(getContext(), incomingnotes_request);
	}

	/**
	 * Set value of IncomingNotes_Request
	 * @param context
	 * @param incomingnotes_request
	 */
	public final void setIncomingNotes_Request(com.mendix.systemwideinterfaces.core.IContext context, process.proxies.Request incomingnotes_request)
	{
		if (incomingnotes_request == null)
			getMendixObject().setValue(context, MemberNames.IncomingNotes_Request.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.IncomingNotes_Request.toString(), incomingnotes_request.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfacenotes.proxies.IncomingNotes that = (interfacenotes.proxies.IncomingNotes) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceNotes.IncomingNotes";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
