// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package importexport.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the ImportExport module
	public static void addAuditRecords(IContext context, importexport.proxies.DataPatchSet _dataPatchSet)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DataPatchSet", _dataPatchSet == null ? null : _dataPatchSet.getMendixObject());
			Core.execute(context, "ImportExport.AddAuditRecords", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addAuditRecords_NoDumpDate(IContext context, importexport.proxies.DataPatchSet _dataPatchSet)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DataPatchSet", _dataPatchSet == null ? null : _dataPatchSet.getMendixObject());
			Core.execute(context, "ImportExport.AddAuditRecords_NoDumpDate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void applyImportExportSetting(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.ApplyImportExportSetting", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditDeeplink_AfterCommit(IContext context, deeplink.proxies.DeepLink _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "ImportExport.AuditDeeplink_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditDeeplink_AfterDelete(IContext context, deeplink.proxies.DeepLink _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "ImportExport.AuditDeeplink_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditDeeplink_GetAuditRecord(IContext context, deeplink.proxies.DeepLink _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "ImportExport.AuditDeeplink_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditImportExportSetting_AfterCommit(IContext context, importexport.proxies.ImportExportSetting _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "ImportExport.AuditImportExportSetting_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditImportExportSetting_AfterDelete(IContext context, importexport.proxies.ImportExportSetting _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "ImportExport.AuditImportExportSetting_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditImportExportSetting_GetAuditRecord(IContext context, importexport.proxies.ImportExportSetting _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "ImportExport.AuditImportExportSetting_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bC_ImportLog(IContext context, importexport.proxies.ImportLog _importLog)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportLog", _importLog == null ? null : _importLog.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "ImportExport.BC_ImportLog", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void call_UpgradeMetaModel(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.Call_UpgradeMetaModel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callExportAllToExcel(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallExportAllToExcel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callExportDataPatchRecordList(IContext context, java.util.List<importexport.proxies.DataPatchRecord> _exportRecordList, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_exportRecordList = null;
			if (_exportRecordList != null)
			{
				listparam_exportRecordList = new java.util.ArrayList<IMendixObject>();
				for (importexport.proxies.DataPatchRecord obj : _exportRecordList)
					listparam_exportRecordList.add(obj.getMendixObject());
			}
			params.put("ExportRecordList", listparam_exportRecordList);
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallExportDataPatchRecordList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callExportSampleDataToExcel(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallExportSampleDataToExcel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callExportSampleDataToExcel_NoMendixID(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallExportSampleDataToExcel_NoMendixID", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callExportSampleDataToExcel_NoMendixID_EmptySheets(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallExportSampleDataToExcel_NoMendixID_EmptySheets", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callExportSampleDataToExcel_NoMendixID_EmptySheets_UserAttributes(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallExportSampleDataToExcel_NoMendixID_EmptySheets_UserAttributes", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callImportAllFromExcel(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallImportAllFromExcel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callImportAsync_Preprocess(IContext context, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.CallImportAsync_Preprocess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callImportAsync_Process(IContext context, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.CallImportAsync_Process", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callImportCoreDataFromExcel(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallImportCoreDataFromExcel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callImportDataPatchFromExcel(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallImportDataPatchFromExcel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callImportFilesInFolderFromExcel(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallImportFilesInFolderFromExcel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callImportFilesInFolderFromExcel_Async(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallImportFilesInFolderFromExcel_Async", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callImportSampleDataFromExcel(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CallImportSampleDataFromExcel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callToExportRecordsSelectedAuditList(IContext context, java.util.List<audit.proxies.AuditRecord> _auditRecordList, importexport.proxies.DataPatchSet _dataPatchSet)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_auditRecordList = null;
			if (_auditRecordList != null)
			{
				listparam_auditRecordList = new java.util.ArrayList<IMendixObject>();
				for (audit.proxies.AuditRecord obj : _auditRecordList)
					listparam_auditRecordList.add(obj.getMendixObject());
			}
			params.put("AuditRecordList", listparam_auditRecordList);
			params.put("DataPatchSet", _dataPatchSet == null ? null : _dataPatchSet.getMendixObject());
			Core.execute(context, "ImportExport.CallToExportRecordsSelectedAuditList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void callToExportRecordsSelectedAuditList_NoDumpDate(IContext context, java.util.List<audit.proxies.AuditRecord> _auditRecordList, importexport.proxies.DataPatchSet _dataPatchSet)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_auditRecordList = null;
			if (_auditRecordList != null)
			{
				listparam_auditRecordList = new java.util.ArrayList<IMendixObject>();
				for (audit.proxies.AuditRecord obj : _auditRecordList)
					listparam_auditRecordList.add(obj.getMendixObject());
			}
			params.put("AuditRecordList", listparam_auditRecordList);
			params.put("DataPatchSet", _dataPatchSet == null ? null : _dataPatchSet.getMendixObject());
			Core.execute(context, "ImportExport.CallToExportRecordsSelectedAuditList_NoDumpDate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cancelCurrentJob(IContext context, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.cancelCurrentJob", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createDataPatch_DeleteAllSelectedRecords(IContext context, importexport.proxies.DataPatchSet _dataPatchSet)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DataPatchSet", _dataPatchSet == null ? null : _dataPatchSet.getMendixObject());
			Core.execute(context, "ImportExport.CreateDataPatch_DeleteAllSelectedRecords", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createDataPatch_ExportAll(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.CreateDataPatch_ExportAll", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createNewExportJob(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.createNewExportJob", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void debugImportEntity(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.DebugImportEntity", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void defaultUnlimitedCharExcelSize(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.DefaultUnlimitedCharExcelSize", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deleteIDLinks(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.DeleteIDLinks", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void downloadSelectedExportFile(IContext context, importexport.proxies.JobFile _jobFile)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("JobFile", _jobFile == null ? null : _jobFile.getMendixObject());
			Core.execute(context, "ImportExport.downloadSelectedExportFile", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void export_Entities_OpenForm(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.Export_Entities_OpenForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void export_EntityList(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.Export_EntityList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void exportDataPatchRecords(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.ExportDataPatchRecords", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void exportDataPatchRecordsByJob_Async(IContext context, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.exportDataPatchRecordsByJob_Async", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void exportDataPatchRecordsByJob_Button(IContext context, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.exportDataPatchRecordsByJob_Button", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void exportDataPatchSet_Async(IContext context, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.exportDataPatchSet_Async", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void exportDataPatchSetRecords(IContext context, importexport.proxies.ImportExportSetting _importExportSetting, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.ExportDataPatchSetRecords", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean exportMendixEntityData(IContext context, importexport.proxies.ImportExportSetting _importExportSetting, importexport.proxies.Job _job, metamodel.proxies.MendixEntity _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			params.put("Job", _job == null ? null : _job.getMendixObject());
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "ImportExport.exportMendixEntityData", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String field_NewIdStr(IContext context, importexport.proxies.IDLink _iDLink)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IDLink", _iDLink == null ? null : _iDLink.getMendixObject());
			return (java.lang.String)Core.execute(context, "ImportExport.Field_NewIdStr", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String field_OldIdStr(IContext context, importexport.proxies.IDLink _iDLink)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IDLink", _iDLink == null ? null : _iDLink.getMendixObject());
			return (java.lang.String)Core.execute(context, "ImportExport.Field_OldIdStr", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String fileTypeToString(IContext context, importexport.proxies.FileTypeEnum _fileType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("FileType", _fileType == null ? null : _fileType.name());
			return (java.lang.String)Core.execute(context, "ImportExport.FileTypeToString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void generateExportRecordForDataPatch(IContext context, importexport.proxies.DataPatchSet _dataPatchSet, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DataPatchSet", _dataPatchSet == null ? null : _dataPatchSet.getMendixObject());
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.generateExportRecordForDataPatch", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static importexport.proxies.ImportExportSetting getDataAdminExportSettingsRecord(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "ImportExport.GetDataAdminExportSettingsRecord", params);
			return result == null ? null : importexport.proxies.ImportExportSetting.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static importexport.proxies.ImportExportSetting getDataAdminImportSettingsRecord(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "ImportExport.GetDataAdminImportSettingsRecord", params);
			return result == null ? null : importexport.proxies.ImportExportSetting.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static importexport.proxies.ImportExportSetting getDataAdminUnattendedExportSettingsRecord(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "ImportExport.GetDataAdminUnattendedExportSettingsRecord", params);
			return result == null ? null : importexport.proxies.ImportExportSetting.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static importexport.proxies.ImportExportSetting getExportSettingsRecordAndCreateDataPatchSet_Advanced(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "ImportExport.GetExportSettingsRecordAndCreateDataPatchSet_Advanced", params);
			return result == null ? null : importexport.proxies.ImportExportSetting.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static importexport.proxies.ImportExportSetting getExportSettingsRecordAndCreateDataPatchSet_Unattended(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "ImportExport.GetExportSettingsRecordAndCreateDataPatchSet_Unattended", params);
			return result == null ? null : importexport.proxies.ImportExportSetting.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static importexport.proxies.ImportExportSetting getImportExportSettingForUser(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "ImportExport.getImportExportSettingForUser", params);
			return result == null ? null : importexport.proxies.ImportExportSetting.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static importexport.proxies.ImportExportSetting getSystemAdminExportSettingsRecord(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "ImportExport.GetSystemAdminExportSettingsRecord", params);
			return result == null ? null : importexport.proxies.ImportExportSetting.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static importexport.proxies.ImportExportSetting getSystemAdminImportSettingsRecord(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "ImportExport.GetSystemAdminImportSettingsRecord", params);
			return result == null ? null : importexport.proxies.ImportExportSetting.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void import_OpenForm(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.Import_OpenForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 890686/213440: CMDB Import ook voor CMDB Admin
	 */
	public static void import_OpenForm_Popup(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.Import_OpenForm_Popup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean import2PassDataLoop(IContext context, java.util.List<metamodel.proxies.MendixEntity> _mendixEntityList, java.util.List<metamodel.proxies.MendixEntity> _mendixEntityList_DelayedRelations, java.lang.String _filePrefix, importexport.proxies.ImportExportSetting _importExportSetting, importexport.proxies.Job _importJob)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_mendixEntityList = null;
			if (_mendixEntityList != null)
			{
				listparam_mendixEntityList = new java.util.ArrayList<IMendixObject>();
				for (metamodel.proxies.MendixEntity obj : _mendixEntityList)
					listparam_mendixEntityList.add(obj.getMendixObject());
			}
			params.put("MendixEntityList", listparam_mendixEntityList);
			java.util.ArrayList<IMendixObject> listparam_mendixEntityList_DelayedRelations = null;
			if (_mendixEntityList_DelayedRelations != null)
			{
				listparam_mendixEntityList_DelayedRelations = new java.util.ArrayList<IMendixObject>();
				for (metamodel.proxies.MendixEntity obj : _mendixEntityList_DelayedRelations)
					listparam_mendixEntityList_DelayedRelations.add(obj.getMendixObject());
			}
			params.put("MendixEntityList_DelayedRelations", listparam_mendixEntityList_DelayedRelations);
			params.put("FilePrefix", _filePrefix);
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			params.put("ImportJob", _importJob == null ? null : _importJob.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "ImportExport.Import2PassDataLoop", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importFinished(IContext context, importexport.proxies.ImportExportSetting _importExportSetting, boolean _result)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			params.put("Result", _result);
			Core.execute(context, "ImportExport.ImportFinished", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean importInitialPart(IContext context, importexport.proxies.ImportExportSetting _importExportSetting, java.lang.String _filePrefix)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			params.put("FilePrefix", _filePrefix);
			return (java.lang.Boolean)Core.execute(context, "ImportExport.ImportInitialPart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean importMetaModel(IContext context, importexport.proxies.ImportExportSetting _importExportSetting, java.lang.String _filePrefix)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			params.put("FilePrefix", _filePrefix);
			return (java.lang.Boolean)Core.execute(context, "ImportExport.ImportMetaModel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importScanFiles(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.ImportScanFiles", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean isSystemAdmin(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "ImportExport.IsSystemAdmin", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenImportJobs(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.IVK_OpenImportJobs", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenImportLogForJob(IContext context, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.IVK_OpenImportLogForJob", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenImportLogs(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.IVK_OpenImportLogs", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void mCa_SetHasStack(IContext context, importexport.proxies.ImportLog _importLog)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportLog", _importLog == null ? null : _importLog.getMendixObject());
			Core.execute(context, "ImportExport.MCa_SetHasStack", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newApplyDataPatch(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.NewApplyDataPatch", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newCreateDataPatch(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.NewCreateDataPatch", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void open_DTAPApplyPatch(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.Open_DTAPApplyPatch", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void open_DTAPCreatePatch(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.Open_DTAPCreatePatch", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void open_DTAPServers(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.Open_DTAPServers", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void openImpExpJob_Overview(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ImportExport.openImpExpJob_Overview", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void queueNewExportJob(IContext context, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.queueNewExportJob", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void receiveImportSetMF(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.ReceiveImportSetMF", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void refreshSettings(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.RefreshSettings", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void runExportJob(IContext context, importexport.proxies.Job _job)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Job", _job == null ? null : _job.getMendixObject());
			Core.execute(context, "ImportExport.runExportJob", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sendExportSetMF(IContext context, importexport.proxies.ImportExportSetting _importExportSetting)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportExportSetting", _importExportSetting == null ? null : _importExportSetting.getMendixObject());
			Core.execute(context, "ImportExport.SendExportSetMF", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}