// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package importexport.actions;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import metamodel.proxies.MendixEntity;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IFeedback;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class ImportScanFiles_Java extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __ImportExportSettingParameter1;
	private importexport.proxies.ImportExportSetting ImportExportSettingParameter1;

	public ImportScanFiles_Java(IContext context, IMendixObject ImportExportSettingParameter1)
	{
		super(context);
		this.__ImportExportSettingParameter1 = ImportExportSettingParameter1;
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.ImportExportSettingParameter1 = __ImportExportSettingParameter1 == null ? null : importexport.proxies.ImportExportSetting.initialize(getContext(), __ImportExportSettingParameter1);

		// BEGIN USER CODE
		if (ImportExportSettingParameter1==null) {
			addTextMessageFeedback(IFeedback.MessageType.ERROR, "Please contact your administrator. Settings empty.", true);
			return null;
		}
		if (ImportExportSettingParameter1.getUseZip() && !ImportExportSettingParameter1.getHasContents()) {
			addTextMessageFeedback(IFeedback.MessageType.ERROR, "Please select and upload a file first. Use save to upload.", true);
			return null;
		}
		IContext context = this.getContext();
		List<IMendixObject> result = new ArrayList<IMendixObject>();
		try {
			if (ImportExportSettingParameter1.getUseZip()) {
				Core.getLogger("ImportScanFiles").trace("import using zip, scanning file names");
				ZipInputStream zis = new ZipInputStream(Core.getFileDocumentContent(context, ImportExportSettingParameter1.getMendixObject()));
			    ZipEntry entry = zis.getNextEntry();
			    while (entry != null) {
			    	if (entry.isDirectory()) {
				        entry = zis.getNextEntry();
			    		continue;
			    	}
			        String name = entry.getName();
			        IMendixObject iMendixObject = checkFileName(context, name);
			        if (iMendixObject!=null) result.add(iMendixObject);
			        entry = zis.getNextEntry();
			    }
			} else {
				Core.getLogger("ImportScanFiles").trace("import using server folder, scanning file names");
				String RootFolder = ImportExportSettingParameter1.getServerFolder();
				File rootDir = new File (RootFolder);
				if (!rootDir.isDirectory()) {
					String errorStr = "Cannot verify the root folder '"+RootFolder+"' for exporting ";
					Core.getLogger("ImportScanFiles").error(errorStr);
					addTextMessageFeedback(IFeedback.MessageType.ERROR, errorStr, true);
				} else {
					Core.getLogger("ImportScanFiles").trace("root folder '" + RootFolder+ "' verified.");
				}
				for (final File entry : rootDir.listFiles()) {
			        String name = entry.getName();
			        IMendixObject iMendixObject = checkFileName(context, name);
			        if (iMendixObject!=null) result.add(iMendixObject);					
				}
			}
		} catch (IOException e) {
			String errorStr = e.getMessage();
				Core.getLogger("ImportScanFiles").error(errorStr);
				addTextMessageFeedback(IFeedback.MessageType.ERROR, errorStr, true);
				return null;
		} catch (SecurityException e) {
			String errorStr = e.getMessage();
				Core.getLogger("ImportScanFiles").error(errorStr);
				addTextMessageFeedback(IFeedback.MessageType.ERROR, errorStr, true);
				return null;
		} catch (CoreException e) {
			String errorStr = e.getMessage();
				Core.getLogger("ImportScanFiles").error(errorStr);
				addTextMessageFeedback(IFeedback.MessageType.ERROR, errorStr, true);
				return null;
		}
		return result;

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "ImportScanFiles_Java";
	}

	// BEGIN EXTRA CODE
	private IMendixObject checkFileName(IContext context, String name) throws CoreException {
        String shortName = null;
		Core.getLogger("ImportScanFiles").trace("scanning file " +name);
		if (ImportExportSettingParameter1.getFileType().equals(importexport.proxies.FileTypeEnum.XLSX) && name.toUpperCase().endsWith(".XLSX")) {
			shortName = name.substring(0, name.toUpperCase().indexOf(".XLSX"));
		} else if (ImportExportSettingParameter1.getFileType().equals(importexport.proxies.FileTypeEnum.XLS) && name.toUpperCase().endsWith(".XLS")) {
			shortName = name.substring(0, name.toUpperCase().indexOf(".XLS"));
		} else {
	        return null;
		}
		if (shortName.contains(" ")) {
			shortName = shortName.substring(0, shortName.indexOf(" "));
			Core.getLogger("ImportScanFiles").trace("dynamic data, so take until space: " + shortName);
		}
		Core.getLogger("ImportScanFiles").trace("testing for entity " +shortName);
		List<IMendixObject> mendixEntityList = Core.retrieveXPathQuery(context, "//MetaModel.MendixEntity[Name='" + shortName + "']");
		if (mendixEntityList!=null && mendixEntityList.size()>0) {
			MendixEntity mendixEntity = MendixEntity.initialize(context, mendixEntityList.get(0));
			if (!ImportExportSettingParameter1.getUserAttributesAndReferencesOnly() || 
				(ImportExportSettingParameter1.getUserAttributesAndReferencesOnly() && mendixEntity.getAllowUserImport())) {
				return mendixEntity.getMendixObject();
			} else {
				return null;
			}
		} else {
			return null;
		}

	}
	
	// END EXTRA CODE
}
