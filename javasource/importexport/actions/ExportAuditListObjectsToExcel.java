// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package importexport.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.util.List;
import java.util.ArrayList;
import metamodel.proxies.MendixEntity;
import nl.mansystems.mendiximportexport.SharedFunctions;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class ExportAuditListObjectsToExcel extends CustomJavaAction<java.lang.Boolean>
{
	private java.util.List<IMendixObject> __AuditRecordList;
	private java.util.List<audit.proxies.AuditRecord> AuditRecordList;
	private java.lang.String FilePrefix;
	private IMendixObject __ImportExportSettingParameter1;
	private importexport.proxies.ImportExportSetting ImportExportSettingParameter1;

	public ExportAuditListObjectsToExcel(IContext context, java.util.List<IMendixObject> AuditRecordList, java.lang.String FilePrefix, IMendixObject ImportExportSettingParameter1)
	{
		super(context);
		this.__AuditRecordList = AuditRecordList;
		this.FilePrefix = FilePrefix;
		this.__ImportExportSettingParameter1 = ImportExportSettingParameter1;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.AuditRecordList = new java.util.ArrayList<audit.proxies.AuditRecord>();
		if (__AuditRecordList != null)
			for (IMendixObject __AuditRecordListElement : __AuditRecordList)
				this.AuditRecordList.add(audit.proxies.AuditRecord.initialize(getContext(), __AuditRecordListElement));

		this.ImportExportSettingParameter1 = __ImportExportSettingParameter1 == null ? null : importexport.proxies.ImportExportSetting.initialize(getContext(), __ImportExportSettingParameter1);

		// BEGIN USER CODE
		Core.getLogger("ExportAuditListObjectsToExcel").trace("ExportAuditListObjectsToExcel: Starting.");
		List<IMendixObject> remainingObjects = new ArrayList<IMendixObject>();
		remainingObjects.addAll(__AuditRecordList);
		
		while(remainingObjects.size()>0) {
			List<IMendixObject> currentAuditObjects = nl.mansystems.mendiximportexport.ExportToExcelWithContents.filterAuditListByEntity(this.getContext(), remainingObjects);
			List<IMendixObject> currentRealObjects = nl.mansystems.mendiximportexport.ExportToExcelWithContents.getRealObjectsFromAuditList(this.getContext(), currentAuditObjects, ImportExportSettingParameter1.getUseAction());
			List<IMendixObject> currentDeletedAuditObjects = nl.mansystems.mendiximportexport.ExportToExcelWithContents.getDeletedAuditObjectsFromAuditList(this.getContext(), currentAuditObjects, ImportExportSettingParameter1.getUseAction());
			remainingObjects.removeAll(currentAuditObjects);
			String entityName = currentRealObjects.get(0).getMetaObject().getName();
			Core.getLogger("ExportAuditListObjectsToExcel").info("ExportAuditListObjectsToExcel: Exporting " + currentRealObjects.size() + " records for "+ entityName + ". Remaining objects: " + remainingObjects.size());
			MendixEntity mendixEntity = SharedFunctions.getEntityInfo(this.getContext(), currentRealObjects.get(0).getType(),0).getMendixEntity();
			IMendixObject typeObject = null;
			if (mendixEntity.getHasDynamicData()) {
				String typeXPath = mendixEntity.getDDAllTypesXPath() + "[" + mendixEntity.getDDTypeOfRecordXPath().replaceAll("#ID#", ""+currentRealObjects.get(0).getId().toLong() + "]");
				List<IMendixObject> typeList = Core.retrieveXPathQuery(this.getContext(), typeXPath);
				if (typeList!=null && typeList.size()>0) {
					typeObject = typeList.get(0);
				}
			}
			nl.mansystems.mendiximportexport.ExportToExcelWithContents eewc = new nl.mansystems.mendiximportexport.ExportToExcelWithContents(this.getContext(), entityName, FilePrefix + entityName + "." + ImportExportSettingParameter1.getFileType().toString(), ImportExportSettingParameter1);
			eewc.executeAction(currentRealObjects, null, currentDeletedAuditObjects,typeObject);
		}
		Core.getLogger("ExportAuditListObjectsToExcel").trace("ExportAuditListObjectsToExcel: Finished.");
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "ExportAuditListObjectsToExcel";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
