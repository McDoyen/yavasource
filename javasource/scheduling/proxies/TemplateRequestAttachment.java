// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package scheduling.proxies;

public class TemplateRequestAttachment extends system.proxies.FileDocument
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Scheduling.TemplateRequestAttachment";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		AttachmentName("AttachmentName"),
		Description("Description"),
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Size("Size"),
		RequestAttachment_Request("Scheduling.RequestAttachment_Request");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public TemplateRequestAttachment(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Scheduling.TemplateRequestAttachment"));
	}

	protected TemplateRequestAttachment(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject templateRequestAttachmentMendixObject)
	{
		super(context, templateRequestAttachmentMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("Scheduling.TemplateRequestAttachment", templateRequestAttachmentMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Scheduling.TemplateRequestAttachment");
	}

	/**
	 * @deprecated Use 'TemplateRequestAttachment.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static scheduling.proxies.TemplateRequestAttachment initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return scheduling.proxies.TemplateRequestAttachment.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static scheduling.proxies.TemplateRequestAttachment initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new scheduling.proxies.TemplateRequestAttachment(context, mendixObject);
	}

	public static scheduling.proxies.TemplateRequestAttachment load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return scheduling.proxies.TemplateRequestAttachment.initialize(context, mendixObject);
	}

	public static java.util.List<scheduling.proxies.TemplateRequestAttachment> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<scheduling.proxies.TemplateRequestAttachment> result = new java.util.ArrayList<scheduling.proxies.TemplateRequestAttachment>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Scheduling.TemplateRequestAttachment" + xpathConstraint))
			result.add(scheduling.proxies.TemplateRequestAttachment.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of AttachmentName
	 */
	public final java.lang.String getAttachmentName()
	{
		return getAttachmentName(getContext());
	}

	/**
	 * @param context
	 * @return value of AttachmentName
	 */
	public final java.lang.String getAttachmentName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.AttachmentName.toString());
	}

	/**
	 * Set value of AttachmentName
	 * @param attachmentname
	 */
	public final void setAttachmentName(java.lang.String attachmentname)
	{
		setAttachmentName(getContext(), attachmentname);
	}

	/**
	 * Set value of AttachmentName
	 * @param context
	 * @param attachmentname
	 */
	public final void setAttachmentName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String attachmentname)
	{
		getMendixObject().setValue(context, MemberNames.AttachmentName.toString(), attachmentname);
	}

	/**
	 * @return value of Description
	 */
	public final java.lang.String getDescription()
	{
		return getDescription(getContext());
	}

	/**
	 * @param context
	 * @return value of Description
	 */
	public final java.lang.String getDescription(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Description.toString());
	}

	/**
	 * Set value of Description
	 * @param description
	 */
	public final void setDescription(java.lang.String description)
	{
		setDescription(getContext(), description);
	}

	/**
	 * Set value of Description
	 * @param context
	 * @param description
	 */
	public final void setDescription(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String description)
	{
		getMendixObject().setValue(context, MemberNames.Description.toString(), description);
	}

	/**
	 * @return value of RequestAttachment_Request
	 */
	public final scheduling.proxies.TemplateRequest getRequestAttachment_Request() throws com.mendix.core.CoreException
	{
		return getRequestAttachment_Request(getContext());
	}

	/**
	 * @param context
	 * @return value of RequestAttachment_Request
	 */
	public final scheduling.proxies.TemplateRequest getRequestAttachment_Request(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		scheduling.proxies.TemplateRequest result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.RequestAttachment_Request.toString());
		if (identifier != null)
			result = scheduling.proxies.TemplateRequest.load(context, identifier);
		return result;
	}

	/**
	 * Set value of RequestAttachment_Request
	 * @param requestattachment_request
	 */
	public final void setRequestAttachment_Request(scheduling.proxies.TemplateRequest requestattachment_request)
	{
		setRequestAttachment_Request(getContext(), requestattachment_request);
	}

	/**
	 * Set value of RequestAttachment_Request
	 * @param context
	 * @param requestattachment_request
	 */
	public final void setRequestAttachment_Request(com.mendix.systemwideinterfaces.core.IContext context, scheduling.proxies.TemplateRequest requestattachment_request)
	{
		if (requestattachment_request == null)
			getMendixObject().setValue(context, MemberNames.RequestAttachment_Request.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.RequestAttachment_Request.toString(), requestattachment_request.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final scheduling.proxies.TemplateRequestAttachment that = (scheduling.proxies.TemplateRequestAttachment) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Scheduling.TemplateRequestAttachment";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
