// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package scheduling.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the Scheduling module
	public static void auditSchedule_AfterCommit(IContext context, scheduling.proxies.Schedule _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "Scheduling.AuditSchedule_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditSchedule_AfterDelete(IContext context, scheduling.proxies.Schedule _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.AuditSchedule_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditSchedule_GetAuditRecord(IContext context, scheduling.proxies.Schedule _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "Scheduling.AuditSchedule_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditScheduledDay_AfterCommit(IContext context, scheduling.proxies.ScheduledDay _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "Scheduling.AuditScheduledDay_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditScheduledDay_AfterDelete(IContext context, scheduling.proxies.ScheduledDay _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.AuditScheduledDay_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditTemplateRequest_AfterCommit(IContext context, scheduling.proxies.TemplateRequest _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "Scheduling.AuditTemplateRequest_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditTemplateRequest_AfterDelete(IContext context, scheduling.proxies.TemplateRequest _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.AuditTemplateRequest_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditTemplateRequest_GetAuditRecord(IContext context, scheduling.proxies.TemplateRequest _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "Scheduling.AuditTemplateRequest_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditTemplateRequestAttachment_AfterCommit(IContext context, scheduling.proxies.TemplateRequestAttachment _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "Scheduling.AuditTemplateRequestAttachment_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditTemplateRequestAttachment_AfterDelete(IContext context, scheduling.proxies.TemplateRequestAttachment _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.AuditTemplateRequestAttachment_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void automaticSchedulingCreate(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "Scheduling.AutomaticSchedulingCreate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void automaticSchedulingDaysBefore(IContext context, scheduling.proxies.ScheduledTemplateRequest _scheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledTemplateRequest", _scheduledTemplateRequest == null ? null : _scheduledTemplateRequest.getMendixObject());
			Core.execute(context, "Scheduling.AutomaticSchedulingDaysBefore", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean automaticSchedulingSettings(IContext context, scheduling.proxies.ScheduledTemplateRequest _scheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledTemplateRequest", _scheduledTemplateRequest == null ? null : _scheduledTemplateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.AutomaticSchedulingSettings", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bC_ScheduledDay(IContext context, scheduling.proxies.ScheduledDay _scheduledDay)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledDay", _scheduledDay == null ? null : _scheduledDay.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.BC_ScheduledDay", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bC_ValidateTemplateRequest(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.BC_ValidateTemplateRequest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cancelPlannedRequest(IContext context, process.proxies.Request _request)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Request", _request == null ? null : _request.getMendixObject());
			Core.execute(context, "Scheduling.CancelPlannedRequest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * You may only cancel a planned request.
	 */
	public static void cancelPlannedRequestList_NEW(IContext context, scheduling.proxies.ScheduledDay _scheduledDay)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledDay", _scheduledDay == null ? null : _scheduledDay.getMendixObject());
			Core.execute(context, "Scheduling.CancelPlannedRequestList_NEW", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkRequestBeforeCreateRequestFromTemplateTicket(IContext context, process.proxies.Request _parentRequest, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ParentRequest", _parentRequest == null ? null : _parentRequest.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.CheckRequestBeforeCreateRequestFromTemplateTicket", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkRequestBeforeCreateTaskFromTemplateTask(IContext context, process.proxies.Request _parentRequest, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ParentRequest", _parentRequest == null ? null : _parentRequest.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.CheckRequestBeforeCreateTaskFromTemplateTask", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cI_SetAspect(IContext context, scheduling.proxies.TemplateRequest _templateRequest, java.lang.Long _contractCount, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest, java.lang.Long _maxDropDownResultSize)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractCount", _contractCount);
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			params.put("MaxDropDownResultSize", _maxDropDownResultSize);
			Core.execute(context, "Scheduling.CI_SetAspect", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<cmdb.proxies.ConfigurationItem> cIList_All_EntityAccess(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.CIList_All_EntityAccess", params);
			java.util.List<cmdb.proxies.ConfigurationItem> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<cmdb.proxies.ConfigurationItem>();
				for (IMendixObject obj : objs)
					result.add(cmdb.proxies.ConfigurationItem.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long cIList_Count(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Long)Core.execute(context, "Scheduling.CIList_Count", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static cmdb.proxies.ConfigurationItem cIList_First(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.CIList_First", params);
			return result == null ? null : cmdb.proxies.ConfigurationItem.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<cmdb.proxies.ConfigurationItem> cIList_OLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.CIList_OLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<cmdb.proxies.ConfigurationItem> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<cmdb.proxies.ConfigurationItem>();
				for (IMendixObject obj : objs)
					result.add(cmdb.proxies.ConfigurationItem.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<cmdb.proxies.ConfigurationItem> cIList_OLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.CIList_OLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<cmdb.proxies.ConfigurationItem> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<cmdb.proxies.ConfigurationItem>();
				for (IMendixObject obj : objs)
					result.add(cmdb.proxies.ConfigurationItem.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<cmdb.proxies.ConfigurationItem> cIList_SLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.CIList_SLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<cmdb.proxies.ConfigurationItem> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<cmdb.proxies.ConfigurationItem>();
				for (IMendixObject obj : objs)
					result.add(cmdb.proxies.ConfigurationItem.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<cmdb.proxies.ConfigurationItem> cIList_SLA_All_EntityAccess_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.CIList_SLA_All_EntityAccess_WithReceivingOrganisation", params);
			java.util.List<cmdb.proxies.ConfigurationItem> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<cmdb.proxies.ConfigurationItem>();
				for (IMendixObject obj : objs)
					result.add(cmdb.proxies.ConfigurationItem.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<cmdb.proxies.ConfigurationItem> cIList_SLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.CIList_SLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<cmdb.proxies.ConfigurationItem> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<cmdb.proxies.ConfigurationItem>();
				for (IMendixObject obj : objs)
					result.add(cmdb.proxies.ConfigurationItem.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contract_SetAspect(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest, java.lang.Long _maxDropDownResultSize)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			params.put("MaxDropDownResultSize", _maxDropDownResultSize);
			Core.execute(context, "Scheduling.Contract_SetAspect", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> contractList_All_EntityAccess(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ContractList_All_EntityAccess", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long contractList_Count(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Long)Core.execute(context, "Scheduling.ContractList_Count", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm.proxies.Contract contractList_First(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.ContractList_First", params);
			return result == null ? null : slm.proxies.Contract.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> contractList_OLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ContractList_OLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> contractList_OLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ContractList_OLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> contractList_SLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ContractList_SLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> contractList_SLA_All_EntityAccess_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ContractList_SLA_All_EntityAccess_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> contractList_SLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ContractList_SLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> contractList_SLA_PopUp_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ContractList_SLA_PopUp_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copySchedule(IContext context, scheduling.proxies.Schedule _schedule, scheduling.proxies.ScheduledTemplateRequest _newScheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Schedule", _schedule == null ? null : _schedule.getMendixObject());
			params.put("NewScheduledTemplateRequest", _newScheduledTemplateRequest == null ? null : _newScheduledTemplateRequest.getMendixObject());
			Core.execute(context, "Scheduling.CopySchedule", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyTemplateRequest(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.CopyTemplateRequest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyTemplateRequestGeneric(IContext context, scheduling.proxies.TemplateRequest _oldTemplateRequest, scheduling.proxies.TemplateRequest _newTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OldTemplateRequest", _oldTemplateRequest == null ? null : _oldTemplateRequest.getMendixObject());
			params.put("NewTemplateRequest", _newTemplateRequest == null ? null : _newTemplateRequest.getMendixObject());
			Core.execute(context, "Scheduling.CopyTemplateRequestGeneric", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyTemplateRequestList(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.CopyTemplateRequestList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static process.proxies.Request createRequestFromTemplate(IContext context, process.proxies.Request _fromRequest, scheduling.proxies.TemplateRequest _templateRequest, servicecatalogue.proxies.DeliveryDurationType _durationType, java.lang.Long _duration, workflowinstance.proxies.Node _node, boolean _fromServiceCatalogue)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("FromRequest", _fromRequest == null ? null : _fromRequest.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("DurationType", _durationType == null ? null : _durationType.name());
			params.put("Duration", _duration);
			params.put("Node", _node == null ? null : _node.getMendixObject());
			params.put("FromServiceCatalogue", _fromServiceCatalogue);
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.CreateRequestFromTemplate", params);
			return result == null ? null : process.proxies.Request.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 3872
	 * Create queued request for free end time.
	 */
	public static void createScheduledRequest(IContext context, scheduling.proxies.TemplateRequest _templateRequest, scheduling.proxies.ScheduledDay _scheduledDay, servicecatalogue.proxies.DeliveryDurationType _durationType, java.lang.Long _duration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ScheduledDay", _scheduledDay == null ? null : _scheduledDay.getMendixObject());
			params.put("DurationType", _durationType == null ? null : _durationType.name());
			params.put("Duration", _duration);
			Core.execute(context, "Scheduling.CreateScheduledRequest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createScheduledRequestList(IContext context, scheduling.proxies.ScheduledDay _scheduledDay, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledDay", _scheduledDay == null ? null : _scheduledDay.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.CreateScheduledRequestList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static process.proxies.Task createTaskFromTemplate(IContext context, process.proxies.Request _parentRequest, scheduling.proxies.TemplateRequest _templateRequest, servicecatalogue.proxies.DeliveryDurationType _durationType, java.lang.Long _duration, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ParentRequest", _parentRequest == null ? null : _parentRequest.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("DurationType", _durationType == null ? null : _durationType.name());
			params.put("Duration", _duration);
			params.put("Node", _node == null ? null : _node.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.CreateTaskFromTemplate", params);
			return result == null ? null : process.proxies.Task.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * You can only delete a schedule if there is no request created yet.
	 */
	public static void deleteScheduledDay(IContext context, scheduling.proxies.ScheduledDay _scheduledDay, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledDay", _scheduledDay == null ? null : _scheduledDay.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.DeleteScheduledDay", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deliveringOrganisation_SetAspect(IContext context, scheduling.proxies.TemplateRequest _templateRequest, java.lang.Long _contractCount, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest, java.lang.Long _maxDropDownResultSize)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractCount", _contractCount);
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			params.put("MaxDropDownResultSize", _maxDropDownResultSize);
			Core.execute(context, "Scheduling.DeliveringOrganisation_SetAspect", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> deliveringOrganisationList_All_EntityAccess(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DeliveringOrganisationList_All_EntityAccess", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long deliveringOrganisationList_Count(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Long)Core.execute(context, "Scheduling.DeliveringOrganisationList_Count", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static nap.proxies.Organisation deliveringOrganisationList_First(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.DeliveringOrganisationList_First", params);
			return result == null ? null : nap.proxies.Organisation.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> deliveringOrganisationList_OLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DeliveringOrganisationList_OLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> deliveringOrganisationList_OLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DeliveringOrganisationList_OLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> deliveringOrganisationList_SLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DeliveringOrganisationList_SLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> deliveringOrganisationList_SLA_All_EntityAccess_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DeliveringOrganisationList_SLA_All_EntityAccess_WithReceivingOrganisation", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> deliveringOrganisationList_SLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DeliveringOrganisationList_SLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> deliveringOrganisationList_SLA_PopUp_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DeliveringOrganisationList_SLA_PopUp_WithReceivingOrganisation", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> dS_CallerOrganisation(IContext context, scheduling.proxies.ScheduledTemplateRequest _scheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledTemplateRequest", _scheduledTemplateRequest == null ? null : _scheduledTemplateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DS_CallerOrganisation", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<categories.proxies.Category> dS_GetCategoryListOpening_Childs(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DS_GetCategoryListOpening_Childs", params);
			java.util.List<categories.proxies.Category> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<categories.proxies.Category>();
				for (IMendixObject obj : objs)
					result.add(categories.proxies.Category.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<categories.proxies.Category> dS_GetCategoryListOpening_Root(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DS_GetCategoryListOpening_Root", params);
			java.util.List<categories.proxies.Category> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<categories.proxies.Category>();
				for (IMendixObject obj : objs)
					result.add(categories.proxies.Category.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Location> dS_GetLocationsByPerson(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DS_GetLocationsByPerson", params);
			java.util.List<nap.proxies.Location> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Location>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Location.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Room> dS_GetRoomsByRequestLocation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DS_GetRoomsByRequestLocation", params);
			java.util.List<nap.proxies.Room> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Room>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Room.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String dS_NumberOfAffectedCIs_Button(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.String)Core.execute(context, "Scheduling.DS_NumberOfAffectedCIs_Button", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String dS_NumberOfAttachments_Button(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.String)Core.execute(context, "Scheduling.DS_NumberOfAttachments_Button", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> dS_ReceivingOrganisation(IContext context, scheduling.proxies.ScheduledTemplateRequest _scheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledTemplateRequest", _scheduledTemplateRequest == null ? null : _scheduledTemplateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.DS_ReceivingOrganisation", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static scheduling.proxies.ScheduleType dS_ScheduleType(IContext context, scheduling.proxies.ScheduledTemplateRequest _scheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledTemplateRequest", _scheduledTemplateRequest == null ? null : _scheduledTemplateRequest.getMendixObject());
			java.lang.String result = (java.lang.String)Core.execute(context, "Scheduling.DS_ScheduleType", params);
			if (result == null)
				return null;
			return scheduling.proxies.ScheduleType.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean emptyImpactPossible(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Boolean)Core.execute(context, "Scheduling.EmptyImpactPossible", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean emptyPriorityPossible(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Boolean)Core.execute(context, "Scheduling.EmptyPriorityPossible", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean emptyUrgencyPossible(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Boolean)Core.execute(context, "Scheduling.EmptyUrgencyPossible", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void fill_IUP_combination_by_Impact_Urgency_Priority(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.Fill_IUP_combination_by_Impact_Urgency_Priority", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void find_Contract_Organisation_Change_SLA_New(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.Find_Contract_Organisation_Change_SLA_New", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * [4179] Fixed a bug where this microflow created unneccesary tickets because of a wrongful date-comparison.
	 */
	public static void generateSchedule(IContext context, scheduling.proxies.ScheduledTemplateRequest _scheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledTemplateRequest", _scheduledTemplateRequest == null ? null : _scheduledTemplateRequest.getMendixObject());
			Core.execute(context, "Scheduling.GenerateSchedule", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void get_Commitment_WithContract(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "Scheduling.Get_Commitment_WithContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm_notifications.proxies.ResolveTimeBy getCommitmentResolveTimeBy(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.lang.String result = (java.lang.String)Core.execute(context, "Scheduling.GetCommitmentResolveTimeBy", params);
			if (result == null)
				return null;
			return slm_notifications.proxies.ResolveTimeBy.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void handleCategories(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.HandleCategories", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void impact_SetAspect(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest, java.lang.Long _maxDropDownResultSize, java.lang.Long _contractCount)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			params.put("MaxDropDownResultSize", _maxDropDownResultSize);
			params.put("ContractCount", _contractCount);
			Core.execute(context, "Scheduling.Impact_SetAspect", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Impact> impactList_All_EntityAccess(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ImpactList_All_EntityAccess", params);
			java.util.List<slm.proxies.Impact> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Impact>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Impact.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long impactList_Count(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Long)Core.execute(context, "Scheduling.ImpactList_Count", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm.proxies.Impact impactList_First(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.ImpactList_First", params);
			return result == null ? null : slm.proxies.Impact.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Impact> impactList_OLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ImpactList_OLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Impact> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Impact>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Impact.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Impact> impactList_OLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ImpactList_OLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Impact> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Impact>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Impact.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Impact> impactList_SLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ImpactList_SLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Impact> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Impact>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Impact.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Impact> impactList_SLA_All_EntityAccess_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ImpactList_SLA_All_EntityAccess_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Impact> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Impact>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Impact.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Impact> impactList_SLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ImpactList_SLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Impact> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Impact>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Impact.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Impact> impactList_SLA_PopUp_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ImpactList_SLA_PopUp_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Impact> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Impact>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Impact.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long iUPCombinationList_Count(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Long)Core.execute(context, "Scheduling.IUPCombinationList_Count", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm.proxies.IUP_Combination iUPCombinationList_First(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.IUPCombinationList_First", params);
			return result == null ? null : slm.proxies.IUP_Combination.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Add_AffectedCI(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_Add_AffectedCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Add_Attachment(IContext context, scheduling.proxies.TemplateRequest _templateReques)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateReques", _templateReques == null ? null : _templateReques.getMendixObject());
			Core.execute(context, "Scheduling.IVK_Add_Attachment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddLocation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_AddLocation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AffectedCIsClose(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_AffectedCIsClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AttachmentsClose(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_AttachmentsClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CallingOnBehalfOfCallingOnBehalfOfActive(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_CallingOnBehalfOfCallingOnBehalfOfActive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CallingOnBehalfOfCallingOnBehalfOfInActive(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_CallingOnBehalfOfCallingOnBehalfOfInActive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CallingOnBehalfOfRequesterActive(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_CallingOnBehalfOfRequesterActive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CallingOnBehalfOfRequesterInActive(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_CallingOnBehalfOfRequesterInActive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearAspectFields_OLA_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearAspectFields_OLA_WithoutReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearAspectFields_SLA_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearAspectFields_SLA_WithoutReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearAspectFields_SLA_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearAspectFields_SLA_WithReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearIUP_OLA_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearIUP_OLA_WithoutReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearIUP_SLA_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearIUP_SLA_WithoutReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearIUP_SLA_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearIUP_SLA_WithReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearRequestCaller(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearRequestCaller", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearRequestPerson(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearRequestPerson", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearServiceProcess_OLAWithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearServiceProcess_OLAWithoutReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearServiceProcess_SLAWithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearServiceProcess_SLAWithoutReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ClearServiceProcess_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ClearServiceProcess_WithReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ConfigurationItem_SelectClose(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_ConfigurationItem_SelectClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CreateNewTemplateTask(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "Scheduling.IVK_CreateNewTemplateTask", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CreateNewTemplateTicket(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "Scheduling.IVK_CreateNewTemplateTicket", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DeleteAttachment(IContext context, scheduling.proxies.TemplateRequest _templateRequest, scheduling.proxies.TemplateRequestAttachment _templateRequestAttachment)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("TemplateRequestAttachment", _templateRequestAttachment == null ? null : _templateRequestAttachment.getMendixObject());
			Core.execute(context, "Scheduling.IVK_DeleteAttachment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DownloadAttachment(IContext context, scheduling.proxies.TemplateRequestAttachment _templateRequestAttachment)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequestAttachment", _templateRequestAttachment == null ? null : _templateRequestAttachment.getMendixObject());
			Core.execute(context, "Scheduling.IVK_DownloadAttachment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenAffectedCIs_Dialog(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_OpenAffectedCIs_Dialog", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenAttachments_Dialog(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_OpenAttachments_Dialog", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenSchedule_Dialog(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_OpenSchedule_Dialog", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenTicket(IContext context, scheduling.proxies.ScheduledDay _scheduledDay)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledDay", _scheduledDay == null ? null : _scheduledDay.getMendixObject());
			Core.execute(context, "Scheduling.IVK_OpenTicket", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectAffectedItems(IContext context, java.util.List<cmdb.proxies.ConfigurationItem> _configurationItemList, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_configurationItemList = null;
			if (_configurationItemList != null)
			{
				listparam_configurationItemList = new java.util.ArrayList<IMendixObject>();
				for (cmdb.proxies.ConfigurationItem obj : _configurationItemList)
					listparam_configurationItemList.add(obj.getMendixObject());
			}
			params.put("ConfigurationItemList", listparam_configurationItemList);
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectAffectedItems", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestOLAWithoutReceivingOrganisationCI(IContext context, cmdb.proxies.ConfigurationItem _configurationItem, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ConfigurationItem", _configurationItem == null ? null : _configurationItem.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestOLAWithoutReceivingOrganisationCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestOLAWithoutReceivingOrganisationContract(IContext context, slm.proxies.Contract _contract, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestOLAWithoutReceivingOrganisationContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestOLAWithoutReceivingOrganisationDeliveringOrganisation(IContext context, nap.proxies.Organisation _deliveringOrganisation, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DeliveringOrganisation", _deliveringOrganisation == null ? null : _deliveringOrganisation.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestOLAWithoutReceivingOrganisationDeliveringOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestOLAWithoutReceivingOrganisationImpact(IContext context, slm.proxies.Impact _impact, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Impact", _impact == null ? null : _impact.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestOLAWithoutReceivingOrganisationImpact", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestOLAWithoutReceivingOrganisationPriority(IContext context, slm.proxies.Priority _priority, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Priority", _priority == null ? null : _priority.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestOLAWithoutReceivingOrganisationPriority", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestOLAWithoutReceivingOrganisationService(IContext context, slm.proxies.Service _service, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestOLAWithoutReceivingOrganisationService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestOLAWithoutReceivingOrganisationServiceProcess(IContext context, slm.proxies.Service_Process _service_Process, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service_Process", _service_Process == null ? null : _service_Process.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestOLAWithoutReceivingOrganisationServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestOLAWithoutReceivingOrganisationUrgency(IContext context, slm.proxies.Urgency _urgency, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Urgency", _urgency == null ? null : _urgency.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestOLAWithoutReceivingOrganisationUrgency", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithoutReceivingOrganisationCI(IContext context, cmdb.proxies.ConfigurationItem _configurationItem, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ConfigurationItem", _configurationItem == null ? null : _configurationItem.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithoutReceivingOrganisationCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithoutReceivingOrganisationContract(IContext context, slm.proxies.Contract _contract, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithoutReceivingOrganisationContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithoutReceivingOrganisationDeliveringOrganisation(IContext context, nap.proxies.Organisation _deliveringOrganisation, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DeliveringOrganisation", _deliveringOrganisation == null ? null : _deliveringOrganisation.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithoutReceivingOrganisationDeliveringOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithoutReceivingOrganisationImpact(IContext context, slm.proxies.Impact _impact, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Impact", _impact == null ? null : _impact.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithoutReceivingOrganisationImpact", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithoutReceivingOrganisationPriority(IContext context, slm.proxies.Priority _priority, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Priority", _priority == null ? null : _priority.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithoutReceivingOrganisationPriority", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithoutReceivingOrganisationService(IContext context, slm.proxies.Service _service, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithoutReceivingOrganisationService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithoutReceivingOrganisationServiceProcess(IContext context, slm.proxies.Service_Process _service_Process, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service_Process", _service_Process == null ? null : _service_Process.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithoutReceivingOrganisationServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithoutReceivingOrganisationUrgency(IContext context, slm.proxies.Urgency _urgency, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Urgency", _urgency == null ? null : _urgency.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithoutReceivingOrganisationUrgency", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithReceivingOrganisationCI(IContext context, cmdb.proxies.ConfigurationItem _configurationItem, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ConfigurationItem", _configurationItem == null ? null : _configurationItem.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithReceivingOrganisationCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithReceivingOrganisationContract(IContext context, slm.proxies.Contract _contract, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithReceivingOrganisationContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithReceivingOrganisationDeliveringOrganisation(IContext context, nap.proxies.Organisation _deliveringOrganisation, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DeliveringOrganisation", _deliveringOrganisation == null ? null : _deliveringOrganisation.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithReceivingOrganisationDeliveringOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithReceivingOrganisationImpact(IContext context, slm.proxies.Impact _impact, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Impact", _impact == null ? null : _impact.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithReceivingOrganisationImpact", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithReceivingOrganisationPriority(IContext context, slm.proxies.Priority _priority, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Priority", _priority == null ? null : _priority.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithReceivingOrganisationPriority", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithReceivingOrganisationService(IContext context, slm.proxies.Service _service, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithReceivingOrganisationService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SelectTemplateRequestSLAWithReceivingOrganisationServiceProcess(IContext context, slm.proxies.Service_Process _service_Process, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service_Process", _service_Process == null ? null : _service_Process.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_SelectTemplateRequestSLAWithReceivingOrganisationServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationCI(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationContract(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationDeliveringOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationDeliveringOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationImpact(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationImpact", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationPriority(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationPriority", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationService(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationServiceProcess(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationUrgency(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectOLAWithoutReceivingOrganisationUrgency", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationCI(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationContract(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationDeliveringOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationDeliveringOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationImpact(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationImpact", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationPriority(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationPriority", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationService(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationServiceProcess(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationUrgency(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithoutReceivingOrganisationUrgency", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithReceivingOrganisationCI(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithReceivingOrganisationCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithReceivingOrganisationContract(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithReceivingOrganisationContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithReceivingOrganisationDeliveringOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithReceivingOrganisationDeliveringOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithReceivingOrganisationImpact(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithReceivingOrganisationImpact", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithReceivingOrganisationPriority(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithReceivingOrganisationPriority", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithReceivingOrganisationService(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithReceivingOrganisationService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequest_SelectSLAWithReceivingOrganisationServiceProcess(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequest_SelectSLAWithReceivingOrganisationServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequestAttachmentCancel(IContext context, scheduling.proxies.TemplateRequestAttachment _templateRequestAttachment)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequestAttachment", _templateRequestAttachment == null ? null : _templateRequestAttachment.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequestAttachmentCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequestAttachmentSave(IContext context, scheduling.proxies.TemplateRequestAttachment _templateRequestAttachment)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequestAttachment", _templateRequestAttachment == null ? null : _templateRequestAttachment.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequestAttachmentSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequestCancel(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequestCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean iVK_TemplateRequestSave(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.IVK_TemplateRequestSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateRequestSaveAndClose(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateRequestSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateTaskCancel(IContext context, scheduling.proxies.TemplateTask _templateTask)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateTask", _templateTask == null ? null : _templateTask.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateTaskCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateTaskSave(IContext context, scheduling.proxies.TemplateTask _templateTask)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateTask", _templateTask == null ? null : _templateTask.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateTaskSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateTaskSaveAndClose(IContext context, scheduling.proxies.TemplateTask _templateTask)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateTask", _templateTask == null ? null : _templateTask.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateTaskSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateTicketCancel(IContext context, scheduling.proxies.TemplateTicket _templateTicket)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateTicket", _templateTicket == null ? null : _templateTicket.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateTicketCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateTicketSave(IContext context, scheduling.proxies.TemplateTicket _templateTicket)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateTicket", _templateTicket == null ? null : _templateTicket.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateTicketSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TemplateTicketSaveAndClose(IContext context, scheduling.proxies.TemplateTicket _templateTicket)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateTicket", _templateTicket == null ? null : _templateTicket.getMendixObject());
			Core.execute(context, "Scheduling.IVK_TemplateTicketSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_HandleLocationChange(IContext context, scheduling.proxies.ScheduledTemplateRequest _inputRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputRequest", _inputRequest == null ? null : _inputRequest.getMendixObject());
			Core.execute(context, "Scheduling.OCh_HandleLocationChange", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_HandleRoomChange(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.OCh_HandleRoomChange", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_HandleScheduleTypeDate(IContext context, scheduling.proxies.Schedule _inputSchedule, scheduling.proxies.ScheduledTemplateRequest _inputScheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputSchedule", _inputSchedule == null ? null : _inputSchedule.getMendixObject());
			params.put("InputScheduledTemplateRequest", _inputScheduledTemplateRequest == null ? null : _inputScheduledTemplateRequest.getMendixObject());
			Core.execute(context, "Scheduling.OCh_HandleScheduleTypeDate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_RequestCaller(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.OCh_RequestCaller", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_RequestCallerOrganisation(IContext context, scheduling.proxies.ScheduledTemplateRequest _inputRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputRequest", _inputRequest == null ? null : _inputRequest.getMendixObject());
			Core.execute(context, "Scheduling.OCh_RequestCallerOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_RequestPerson(IContext context, scheduling.proxies.ScheduledTemplateRequest _request)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Request", _request == null ? null : _request.getMendixObject());
			Core.execute(context, "Scheduling.OCh_RequestPerson", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_SetPersonIsCaller(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.OCh_SetPersonIsCaller", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_SetReceivingOrganisationIsCallerOrganisation(IContext context, scheduling.proxies.ScheduledTemplateRequest _inputRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputRequest", _inputRequest == null ? null : _inputRequest.getMendixObject());
			Core.execute(context, "Scheduling.OCh_SetReceivingOrganisationIsCallerOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onEnterAboluteYear(IContext context, scheduling.proxies.Schedule _schedule)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Schedule", _schedule == null ? null : _schedule.getMendixObject());
			Core.execute(context, "Scheduling.OnEnterAboluteYear", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onEnterAbsoluteMonth(IContext context, scheduling.proxies.Schedule _schedule)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Schedule", _schedule == null ? null : _schedule.getMendixObject());
			Core.execute(context, "Scheduling.OnEnterAbsoluteMonth", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onEnterEveryNthDay(IContext context, scheduling.proxies.Schedule _schedule)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Schedule", _schedule == null ? null : _schedule.getMendixObject());
			Core.execute(context, "Scheduling.OnEnterEveryNthDay", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onEnterEveryWeekday(IContext context, scheduling.proxies.Schedule _schedule)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Schedule", _schedule == null ? null : _schedule.getMendixObject());
			Core.execute(context, "Scheduling.OnEnterEveryWeekday", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onEnterRelativeMonth(IContext context, scheduling.proxies.Schedule _schedule)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Schedule", _schedule == null ? null : _schedule.getMendixObject());
			Core.execute(context, "Scheduling.OnEnterRelativeMonth", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onEnterRelativeYear(IContext context, scheduling.proxies.Schedule _schedule)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Schedule", _schedule == null ? null : _schedule.getMendixObject());
			Core.execute(context, "Scheduling.OnEnterRelativeYear", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void open_ScheduledTemplatedRequest_Edit(IContext context, scheduling.proxies.ScheduledTemplateRequest _scheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledTemplateRequest", _scheduledTemplateRequest == null ? null : _scheduledTemplateRequest.getMendixObject());
			Core.execute(context, "Scheduling.Open_ScheduledTemplatedRequest_Edit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void open_ScheduledTemplatedRequest_New(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "Scheduling.Open_ScheduledTemplatedRequest_New", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void priority_SetAspect(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest, java.lang.Long _maxDropDownResultSize, java.lang.Long _contractCount)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			params.put("MaxDropDownResultSize", _maxDropDownResultSize);
			params.put("ContractCount", _contractCount);
			Core.execute(context, "Scheduling.Priority_SetAspect", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Priority> priorityList_All_EntityAccess(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.PriorityList_All_EntityAccess", params);
			java.util.List<slm.proxies.Priority> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Priority>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Priority.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long priorityList_Count(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Long)Core.execute(context, "Scheduling.PriorityList_Count", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm.proxies.Priority priorityList_First(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.PriorityList_First", params);
			return result == null ? null : slm.proxies.Priority.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Priority> priorityList_OLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.PriorityList_OLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Priority> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Priority>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Priority.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Priority> priorityList_OLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.PriorityList_OLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Priority> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Priority>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Priority.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Priority> priorityList_SLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.PriorityList_SLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Priority> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Priority>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Priority.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Priority> priorityList_SLA_All_EntityAccess_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.PriorityList_SLA_All_EntityAccess_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Priority> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Priority>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Priority.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Priority> priorityList_SLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.PriorityList_SLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Priority> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Priority>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Priority.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Priority> priorityList_SLA_PopUp_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.PriorityList_SLA_PopUp_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Priority> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Priority>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Priority.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean scheduledTemplateRequest_Check_Person_Location_Fields(IContext context, scheduling.proxies.ScheduledTemplateRequest _scheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledTemplateRequest", _scheduledTemplateRequest == null ? null : _scheduledTemplateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.ScheduledTemplateRequest_Check_Person_Location_Fields", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean scheduleValidations(IContext context, scheduling.proxies.Schedule _schedule)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Schedule", _schedule == null ? null : _schedule.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.ScheduleValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void selectTemplateRequestCaller(IContext context, nap.proxies.Person _person, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Person", _person == null ? null : _person.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.SelectTemplateRequestCaller", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void service_SetAspect(IContext context, scheduling.proxies.TemplateRequest _templateRequest, java.lang.Long _contractCount, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest, java.lang.Long _maxDropDownResultSize)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractCount", _contractCount);
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			params.put("MaxDropDownResultSize", _maxDropDownResultSize);
			Core.execute(context, "Scheduling.Service_SetAspect", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service> serviceList_All_EntityAccess(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceList_All_EntityAccess", params);
			java.util.List<slm.proxies.Service> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long serviceList_Count(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Long)Core.execute(context, "Scheduling.ServiceList_Count", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm.proxies.Service serviceList_First(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.ServiceList_First", params);
			return result == null ? null : slm.proxies.Service.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service> serviceList_OLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceList_OLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Service> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service> serviceList_OLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceList_OLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Service> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service> serviceList_SLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceList_SLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Service> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service> serviceList_SLA_All_EntityAccess_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceList_SLA_All_EntityAccess_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Service> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service> serviceList_SLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceList_SLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Service> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service> serviceList_SLA_PopUp_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceList_SLA_PopUp_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Service> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void serviceProcess_SetAspect(IContext context, scheduling.proxies.TemplateRequest _templateRequest, java.lang.Long _contractCount, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest, java.lang.Long _maxDropDownResultSize)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractCount", _contractCount);
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			params.put("MaxDropDownResultSize", _maxDropDownResultSize);
			Core.execute(context, "Scheduling.ServiceProcess_SetAspect", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service_Process> serviceProcessList_All_EntityAccess(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceProcessList_All_EntityAccess", params);
			java.util.List<slm.proxies.Service_Process> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service_Process>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service_Process.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long serviceProcessList_Count(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Long)Core.execute(context, "Scheduling.ServiceProcessList_Count", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm.proxies.Service_Process serviceProcessList_First(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.ServiceProcessList_First", params);
			return result == null ? null : slm.proxies.Service_Process.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service_Process> serviceProcessList_OLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceProcessList_OLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Service_Process> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service_Process>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service_Process.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service_Process> serviceProcessList_OLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceProcessList_OLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Service_Process> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service_Process>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service_Process.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service_Process> serviceProcessList_SLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceProcessList_SLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Service_Process> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service_Process>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service_Process.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service_Process> serviceProcessList_SLA_All_EntityAccess_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceProcessList_SLA_All_EntityAccess_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Service_Process> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service_Process>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service_Process.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service_Process> serviceProcessList_SLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceProcessList_SLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Service_Process> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service_Process>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service_Process.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service_Process> serviceProcessList_SLA_PopUp_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.ServiceProcessList_SLA_PopUp_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Service_Process> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service_Process>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service_Process.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setAspects(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _ignoreContract, boolean _ignoreServiceProcess, boolean _ignoreService, boolean _ignoreDeliveringOrganisation, boolean _ignoreImpact, boolean _ignoreCI, boolean _ignoreUrgency, boolean _ignorePriority, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("IgnoreContract", _ignoreContract);
			params.put("IgnoreServiceProcess", _ignoreServiceProcess);
			params.put("IgnoreService", _ignoreService);
			params.put("IgnoreDeliveringOrganisation", _ignoreDeliveringOrganisation);
			params.put("IgnoreImpact", _ignoreImpact);
			params.put("IgnoreCI", _ignoreCI);
			params.put("IgnoreUrgency", _ignoreUrgency);
			params.put("IgnorePriority", _ignorePriority);
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			Core.execute(context, "Scheduling.SetAspects", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setAspects_OLA_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.SetAspects_OLA_WithoutReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setAspects_SLA_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.SetAspects_SLA_WithoutReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setAspects_SLA_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.SetAspects_SLA_WithReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setCallerLocationByDefault(IContext context, scheduling.proxies.ScheduledTemplateRequest _request)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Request", _request == null ? null : _request.getMendixObject());
			Core.execute(context, "Scheduling.SetCallerLocationByDefault", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean setDetailDescriptionNoHTML(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.SetDetailDescriptionNoHTML", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setOrResetProcessType(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "Scheduling.SetOrResetProcessType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setSamePersonByDefault(IContext context, scheduling.proxies.ScheduledTemplateRequest _request)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Request", _request == null ? null : _request.getMendixObject());
			Core.execute(context, "Scheduling.SetSamePersonByDefault", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean setTemplateRequestType(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.SetTemplateRequestType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean setTimeMinutes(IContext context, scheduling.proxies.ScheduledTemplateRequest _scheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledTemplateRequest", _scheduledTemplateRequest == null ? null : _scheduledTemplateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.SetTimeMinutes", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * You can only edit a schedule if there is no request created yet.
	 */
	public static void showEditScheduledDayPopup(IContext context, scheduling.proxies.ScheduledDay _scheduledDay, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledDay", _scheduledDay == null ? null : _scheduledDay.getMendixObject());
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			Core.execute(context, "Scheduling.ShowEditScheduledDayPopup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean templateRequest_CheckDefaultMatrix(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.TemplateRequest_CheckDefaultMatrix", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean templateRequest_Validate_NAPFields_Request(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.TemplateRequest_Validate_NAPFields_Request", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean templateRequest_Validate_SLM_Aspects(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.TemplateRequest_Validate_SLM_Aspects", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean templateRequestIsDirty(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.TemplateRequestIsDirty", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void urgency_SetAspect(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest, java.lang.Long _maxDropDownResultSize, java.lang.Long _contractCount)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			params.put("MaxDropDownResultSize", _maxDropDownResultSize);
			params.put("ContractCount", _contractCount);
			Core.execute(context, "Scheduling.Urgency_SetAspect", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Urgency> urgencyList_All_EntityAccess(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.UrgencyList_All_EntityAccess", params);
			java.util.List<slm.proxies.Urgency> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Urgency>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Urgency.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long urgencyList_Count(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation, boolean _usedForScheduledRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			params.put("UsedForScheduledRequest", _usedForScheduledRequest);
			return (java.lang.Long)Core.execute(context, "Scheduling.UrgencyList_Count", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm.proxies.Urgency urgencyList_First(IContext context, scheduling.proxies.TemplateRequest _templateRequest, slm.proxies.Contract_Type _contractType, boolean _withReceivingOrganisation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			params.put("ContractType", _contractType == null ? null : _contractType.name());
			params.put("WithReceivingOrganisation", _withReceivingOrganisation);
			IMendixObject result = (IMendixObject)Core.execute(context, "Scheduling.UrgencyList_First", params);
			return result == null ? null : slm.proxies.Urgency.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Urgency> urgencyList_OLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.UrgencyList_OLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Urgency> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Urgency>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Urgency.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Urgency> urgencyList_OLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.UrgencyList_OLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Urgency> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Urgency>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Urgency.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Urgency> urgencyList_SLA_All_EntityAccess_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.UrgencyList_SLA_All_EntityAccess_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Urgency> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Urgency>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Urgency.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Urgency> urgencyList_SLA_All_EntityAccess_WithReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.UrgencyList_SLA_All_EntityAccess_WithReceivingOrganisation", params);
			java.util.List<slm.proxies.Urgency> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Urgency>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Urgency.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Urgency> urgencyList_SLA_PopUp_WithoutReceivingOrganisation(IContext context, scheduling.proxies.TemplateRequest _templateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateRequest", _templateRequest == null ? null : _templateRequest.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Scheduling.UrgencyList_SLA_PopUp_WithoutReceivingOrganisation", params);
			java.util.List<slm.proxies.Urgency> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Urgency>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Urgency.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validate_Schedule_Fields(IContext context, scheduling.proxies.ScheduledTemplateRequest _scheduledTemplateRequest)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledTemplateRequest", _scheduledTemplateRequest == null ? null : _scheduledTemplateRequest.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Scheduling.Validate_Schedule_Fields", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}