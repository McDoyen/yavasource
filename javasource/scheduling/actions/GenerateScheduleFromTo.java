// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package scheduling.actions;

import businesshours.proxies.Business_Time;
import businesshours.proxies.Business_Time_Group;
import businesshours.proxies.Holiday;
import businesshours.proxies.Holidays_Group;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import scheduling.proxies.ScheduledDay;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import nl.mansystems.businesshours.CalendarHours;
import nl.mansystems.businesshours.CalendarHoursException;
import nl.mansystems.recurringcommitments.RecurringCommitment;
import nl.mansystems.recurringcommitments.RecurringCommitmentException;
import java.util.ArrayList;
import com.mendix.webui.CustomJavaAction;

public class GenerateScheduleFromTo extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __ScheduleToGenerate;
	private scheduling.proxies.Schedule ScheduleToGenerate;
	private java.util.Date StartDate;
	private java.util.Date EndDate;

	public GenerateScheduleFromTo(IContext context, IMendixObject ScheduleToGenerate, java.util.Date StartDate, java.util.Date EndDate)
	{
		super(context);
		this.__ScheduleToGenerate = ScheduleToGenerate;
		this.StartDate = StartDate;
		this.EndDate = EndDate;
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.ScheduleToGenerate = __ScheduleToGenerate == null ? null : scheduling.proxies.Schedule.initialize(getContext(), __ScheduleToGenerate);

		// BEGIN USER CODE
		IContext context = this.getContext();
		List<IMendixObject> result = new ArrayList<IMendixObject>();
		
		Integer endtype=1;
		Integer amount=0;
		
        GregorianCalendar date = new GregorianCalendar();
        date.setTime(StartDate);

        GregorianCalendar date2 = new GregorianCalendar();
        if (endtype==1)
        	date2.setTime(EndDate);

        RecurringCommitment rc = new RecurringCommitment();
        
        Iterator<Calendar> rcDates;
    	try {
	        System.out.println("Generating date records...");
        	rc.reset();
	        if (ScheduleToGenerate.getScheduleType().equals(scheduling.proxies.ScheduleType.Daily) && ScheduleToGenerate.getOnEveryWeekDay()==true) {
	        	rc.setEndDate(date2);
	        	rc.setWeekdays(date);
	        } else {
	        	if (ScheduleToGenerate.getScheduleType().equals(scheduling.proxies.ScheduleType.Daily) && ScheduleToGenerate.getOnEveryNDays()==true) {
	        		if (endtype==1)
	        			rc.setEndDate(date2);
	        		else
	        			rc.setAmount(amount);
	            	Integer frequency=ScheduleToGenerate.getFrequency();
	        		rc.setDaily(date, frequency);
	        	} else if (ScheduleToGenerate.getScheduleType().equals(scheduling.proxies.ScheduleType.Weekly)) {
	        		if (endtype==1)
	        			rc.setEndDate(date2);
	        		else
	        			rc.setAmount(amount);
	            	Integer frequency=ScheduleToGenerate.getFrequency();
	            	Boolean monday=ScheduleToGenerate.getOnMonday();
	            	Boolean tuesday=ScheduleToGenerate.getOnTuesday();
	            	Boolean wednesday=ScheduleToGenerate.getOnWednesday();
	            	Boolean thursday=ScheduleToGenerate.getOnThursday();
	            	Boolean friday=ScheduleToGenerate.getOnFriday();
	            	Boolean saturday=ScheduleToGenerate.getOnSaturday();
	            	Boolean sunday=ScheduleToGenerate.getOnSunday();
	            	rc.setWeekly(date, frequency, monday, tuesday, wednesday, thursday, friday, saturday, sunday);
	        	} else if (ScheduleToGenerate.getScheduleType().equals(scheduling.proxies.ScheduleType.Monthly) && ScheduleToGenerate.getOnAbsoluteDayOfEveryNthMonth()==true) {
	        		if (endtype==1)
	        			rc.setEndDate(date2);
	        		else
	        			rc.setAmount(amount);
	            	Integer frequency=ScheduleToGenerate.getFrequency();
	            	Integer day=ScheduleToGenerate.getDayOfMonth();
	            	rc.setMonthlyOnDay(date, frequency, day);
	        	} else if (ScheduleToGenerate.getScheduleType().equals(scheduling.proxies.ScheduleType.Yearly) && ScheduleToGenerate.getOnAbsoluteDayOfYear()==true) {
	        		if (endtype==1)
	        			rc.setEndDate(date2);
	        		else
	        			rc.setAmount(amount);
	            	Integer frequency=ScheduleToGenerate.getFrequency();
	            	Integer day=ScheduleToGenerate.getDayOfMonth();
	        		Integer month = getMonthInt();

	            	rc.setYearlyOnDay(date, frequency, month, day);
	        	} else {
	        		if (endtype==1)
	        			rc.setEndDate(date2);
	        		else
	        			rc.setAmount(amount);

	            	Integer frequency=ScheduleToGenerate.getFrequency();
	            	Integer option1=-1;
	            	Integer option2=-1;
	            	switch(ScheduleToGenerate.getRelativeSequence()) {
	        		case First:
	        			option1=1;
	        			break;
	        		case Second:
	        			option1=2;
	        			break;
	        		case Third:
	        			option1=3;
	        			break;
	        		case Fourth:
	        			option1=4;
	        			break;
	        		case Last:
	        			option1=0;
	        			break;
	        		default:
	        			break;
	            	}
	            	
	            	switch(ScheduleToGenerate.getRelativeOnDays()) {
	        		case Day:
	        			option2=0;
	        			break;
	        		case Weekday:
	        			option2=1;
	        			break;
	        		case WeekendDay:
	        			option2=2;
	        			break;
	        		case Monday:
	        			option2=3;
	        			break;
	        		case Tuesday:
	        			option2=4;
	        			break;
	        		case Wednesday:
	        			option2=5;
	        			break;
	        		case Thursday:
	        			option2=6;
	        			break;
	        		case Friday:
	        			option2=7;
	        			break;
	        		case Saturday:
	        			option2=8;
	        			break;
	        		case Sunday:
	        			option2=9;
	        			break;
	        		default:
	        			break;
	            	}

	        		if (ScheduleToGenerate.getScheduleType().equals(scheduling.proxies.ScheduleType.Monthly) && ScheduleToGenerate.getOnRelativeDayOfEveryNthMonth()==true) {
	                	rc.setMonthlyCalc(date, frequency, option1, option2);
	        	    } else if (ScheduleToGenerate.getScheduleType().equals(scheduling.proxies.ScheduleType.Yearly) && ScheduleToGenerate.getOnRelativeDayOfYear()==true) {
		        		Integer month = getMonthInt();
	                	rc.setYearlyCalc(date, frequency, option1, option2, month);
	        	    }        		
	        	}
	        }
	
	        rcDates = rc.iterator();
	        for (int j=1;rcDates.hasNext();j++) {
	        	ScheduledDay sd = new ScheduledDay(context);
	        	//sd.setScheduledDay_Schedule(context, this.ScheduleToGenerate);
	        	Calendar rcday = (Calendar) rcDates.next().clone();
				Core.getLogger("Scheduling").debug("GenerateScheduleFromTo: next " + rcday.getTime());
	        	sd.setDay(rcday.getTime());
	        	boolean onBusinessDay=true;
	        	if (ScheduleToGenerate.getScheduleOnBusinessDays()==scheduling.proxies.ScheduleOnBusinessDays.NextBusinessDay ||
	        		ScheduleToGenerate.getScheduleOnBusinessDays()==scheduling.proxies.ScheduleOnBusinessDays.Skip ) {
	        		Business_Time_Group btg = ScheduleToGenerate.getSchedule_Business_Time_Group(context);
	        		Holidays_Group hdg = ScheduleToGenerate.getSchedule_Holidays_Group(context);
	        		Calendar nbd = nextBusinessDay(context, rcday, btg, hdg);
	        		if (rcday.get(Calendar.DATE)!= nbd.get(Calendar.DATE) ||
	        			rcday.get(Calendar.MONTH)!= nbd.get(Calendar.MONTH) ||
	        			rcday.get(Calendar.YEAR)!= nbd.get(Calendar.YEAR)) {
						Core.getLogger("Scheduling").debug("GenerateScheduleFromTo: next business day" + nbd.getTime());
	        			onBusinessDay=false;
	    	        	if (!onBusinessDay && ScheduleToGenerate.getScheduleOnBusinessDays()==scheduling.proxies.ScheduleOnBusinessDays.NextBusinessDay) {
	    	        		rcday.set(nbd.get(Calendar.YEAR),nbd.get(Calendar.MONTH),nbd.get(Calendar.DATE));
	    	        		sd.setDay(rcday.getTime());	        		
	    	        	}
	        		}
	        	}
		        	
	        	if (ScheduleToGenerate.getScheduleOnBusinessDays()==scheduling.proxies.ScheduleOnBusinessDays.Allow ||
	        		ScheduleToGenerate.getScheduleOnBusinessDays()==scheduling.proxies.ScheduleOnBusinessDays.NextBusinessDay ||
		        	(onBusinessDay && ScheduleToGenerate.getScheduleOnBusinessDays()==scheduling.proxies.ScheduleOnBusinessDays.Skip) ) {
	        		Core.commit(context, sd.getMendixObject());
	        		result.add(sd.getMendixObject());
	        	}
	        }
	    } catch (RecurringCommitmentException e) {
	    	System.out.println("Catch commitment exception: "+e.getMessage());
	    } catch (NoSuchElementException e) {
	    	System.out.println("Catch iterator exception 1: "+e.getMessage());
	    } catch (UnsupportedOperationException e) {
	    	System.out.println("Catch iterator exception 2: "+e.getMessage());
	    } catch (CalendarHoursException e) {
	    	System.out.println("Catch CalendarHours exception: "+e.getMessage());
	    } catch(CoreException e) {
	    	System.out.println("Catch Mendix.Core exception: "+e.getMessage());
	    }
		return result;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "GenerateScheduleFromTo";
	}

	// BEGIN EXTRA CODE
	private Integer getMonthInt() {
    	Integer month=-1;
    	switch(ScheduleToGenerate.getAbsoluteMonthOfEveryNthYear()) {
    		case January:
    			month=1;
    			break;
    		case February:
    			month=2;
    			break;
    		case March:
    			month=3;
    			break;
    		case April:
    			month=4;
    			break;
    		case May:
    			month=5;
    			break;
    		case June:
    			month=6;
    			break;
    		case July:
    			month=7;
    			break;
    		case August:
    			month=8;
    			break;
    		case September:
    			month=9;
    			break;
    		case October:
    			month=10;
    			break;
    		case November:
    			month=11;
    			break;
    		case December:
    			month=12;
    			break;
			default:
    			break;
    	}
    	return month;
	}
	
	private Calendar nextBusinessDay(IContext context, Calendar start, Business_Time_Group btg, Holidays_Group hdg) throws CalendarHoursException, CoreException {
		if (btg==null) {
			Core.getLogger("Scheduling").error("GenerateScheduleFromTo: missing Business Times Group");
			return null;
		}

		CalendarHours calendarHours = new CalendarHours();
		for (Business_Time businessHoursSlot:btg.getBusiness_Time_Group_Business_Times(context)) {
			calendarHours.addBusinessHourSlot(businessHoursSlot.getStart(context), businessHoursSlot.getEnd(context),
					businessHoursSlot.getMonday(context),
					businessHoursSlot.getTuesday(context),
					businessHoursSlot.getWednesday(context),
					businessHoursSlot.getThursday(context),
					businessHoursSlot.getFriday(context),
					businessHoursSlot.getSaturday(context),
					businessHoursSlot.getSunday(context));
			Core.getLogger("Scheduling").trace("GenerateScheduleFromTo: Slot from " + 
					businessHoursSlot.getStart(context)/60 + ":" + businessHoursSlot.getStart(context)%60 + " to " +
					businessHoursSlot.getEnd(context)/60 + ":" + businessHoursSlot.getEnd(context)%60 + " mask Mon-Sun " + 
					(businessHoursSlot.getMonday(context)?"V":"-") +
					(businessHoursSlot.getTuesday(context)?"V":"-") +
					(businessHoursSlot.getWednesday(context)?"V":"-") +
					(businessHoursSlot.getThursday(context)?"V":"-") +
					(businessHoursSlot.getFriday(context)?"V":"-") +
					(businessHoursSlot.getSaturday(context)?"V":"-") +
					(businessHoursSlot.getSunday(context)?"V":"-")
					);
		}
		if (hdg!=null) {
			List<Holiday> listHolidays = hdg.getHoliday_Group_Holidays();
			if (listHolidays!=null && listHolidays.size()>0) {
				for (Holiday holiday:listHolidays) {
					Calendar cal = new GregorianCalendar();
					cal.setTime(holiday.getHolidayDate(context));
					calendarHours.addHoliday(cal);
					Core.getLogger("Scheduling").trace("GenerateScheduleFromTo: Adding holiday " + holiday.getHolidayDate());
				}
			}
		}
		if (calendarHours.isWorkingDay(start) && !calendarHours.isHoliday(start)) {
			return start;
		} else {
			return calendarHours.nextBusinessDayStart(start);
		}
	}
	// END EXTRA CODE
}
