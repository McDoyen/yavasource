// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package workflowtemplate.proxies;

public class CancelNode extends workflowtemplate.proxies.Node
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "WorkflowTemplate.CancelNode";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		CancelType("CancelType"),
		InstanceID("InstanceID"),
		Order("Order"),
		Name("Name"),
		NodeType("NodeType"),
		TempInsertType("TempInsertType"),
		HasFromNodes("HasFromNodes"),
		HasToNodes("HasToNodes"),
		ValidationText("ValidationText"),
		Valid("Valid"),
		ResetChart("ResetChart"),
		CancelNode_Nodes("WorkflowTemplate.CancelNode_Nodes"),
		Node_Workflow("WorkflowTemplate.Node_Workflow"),
		TempInsertAfterNodeTemplate("WorkflowTemplate.TempInsertAfterNodeTemplate"),
		EndNode_WorkflowResult("WorkflowTemplate.EndNode_WorkflowResult");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public CancelNode(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "WorkflowTemplate.CancelNode"));
	}

	protected CancelNode(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject cancelNodeMendixObject)
	{
		super(context, cancelNodeMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("WorkflowTemplate.CancelNode", cancelNodeMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a WorkflowTemplate.CancelNode");
	}

	/**
	 * @deprecated Use 'CancelNode.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static workflowtemplate.proxies.CancelNode initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return workflowtemplate.proxies.CancelNode.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static workflowtemplate.proxies.CancelNode initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new workflowtemplate.proxies.CancelNode(context, mendixObject);
	}

	public static workflowtemplate.proxies.CancelNode load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return workflowtemplate.proxies.CancelNode.initialize(context, mendixObject);
	}

	public static java.util.List<workflowtemplate.proxies.CancelNode> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<workflowtemplate.proxies.CancelNode> result = new java.util.ArrayList<workflowtemplate.proxies.CancelNode>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//WorkflowTemplate.CancelNode" + xpathConstraint))
			result.add(workflowtemplate.proxies.CancelNode.initialize(context, obj));
		return result;
	}

	/**
	 * Set value of CancelType
	 * @param canceltype
	 */
	public final workflowshared.proxies.CancelTypeEnum getCancelType()
	{
		return getCancelType(getContext());
	}

	/**
	 * @param context
	 * @return value of CancelType
	 */
	public final workflowshared.proxies.CancelTypeEnum getCancelType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.CancelType.toString());
		if (obj == null)
			return null;

		return workflowshared.proxies.CancelTypeEnum.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of CancelType
	 * @param canceltype
	 */
	public final void setCancelType(workflowshared.proxies.CancelTypeEnum canceltype)
	{
		setCancelType(getContext(), canceltype);
	}

	/**
	 * Set value of CancelType
	 * @param context
	 * @param canceltype
	 */
	public final void setCancelType(com.mendix.systemwideinterfaces.core.IContext context, workflowshared.proxies.CancelTypeEnum canceltype)
	{
		if (canceltype != null)
			getMendixObject().setValue(context, MemberNames.CancelType.toString(), canceltype.toString());
		else
			getMendixObject().setValue(context, MemberNames.CancelType.toString(), null);
	}

	/**
	 * @return value of CancelNode_Nodes
	 */
	public final java.util.List<workflowtemplate.proxies.Node> getCancelNode_Nodes() throws com.mendix.core.CoreException
	{
		return getCancelNode_Nodes(getContext());
	}

	/**
	 * @param context
	 * @return value of CancelNode_Nodes
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<workflowtemplate.proxies.Node> getCancelNode_Nodes(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<workflowtemplate.proxies.Node> result = new java.util.ArrayList<workflowtemplate.proxies.Node>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.CancelNode_Nodes.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(workflowtemplate.proxies.Node.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of CancelNode_Nodes
	 * @param cancelnode_nodes
	 */
	public final void setCancelNode_Nodes(java.util.List<workflowtemplate.proxies.Node> cancelnode_nodes)
	{
		setCancelNode_Nodes(getContext(), cancelnode_nodes);
	}

	/**
	 * Set value of CancelNode_Nodes
	 * @param context
	 * @param cancelnode_nodes
	 */
	public final void setCancelNode_Nodes(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<workflowtemplate.proxies.Node> cancelnode_nodes)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (workflowtemplate.proxies.Node proxyObject : cancelnode_nodes)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.CancelNode_Nodes.toString(), identifiers);
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final workflowtemplate.proxies.CancelNode that = (workflowtemplate.proxies.CancelNode) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "WorkflowTemplate.CancelNode";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
