// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mendix.actions;

import java.io.InputStream;
import java.util.List;
import system.proxies.FileDocument;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class CheckFileDocuments extends CustomJavaAction<java.lang.Boolean>
{
	public CheckFileDocuments(IContext context)
	{
		super(context);
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		Core.getLogger("CheckFileDocuments").info("Entering CheckFileDocuments");
		IContext context = this.getContext();

		List<IMendixObject> fileDocuments = Core.retrieveXPathQuery(context, "//System.FileDocument");
		
		for(IMendixObject iMendixObject:fileDocuments) {
			FileDocument fileDocument = FileDocument.initialize(context, iMendixObject);
			
			try {
				InputStream inputStream = Core.getFileDocumentContent(context, iMendixObject);
				inputStream.read();
				if (inputStream.available() > 0) {
					Core.getLogger("CheckFileDocuments").debug("CheckFileDocuments: "+iMendixObject.getMetaObject().getName()+" Found " + /*file.getCanonicalPath()  +*/ " with FileID "+ fileDocument.getFileID() + " with internal ID " + iMendixObject.getId().toLong());
				} else {
					Core.getLogger("CheckFileDocuments").error("CheckFileDocuments: "+iMendixObject.getMetaObject().getName()+" Not Exists " + /*file.getCanonicalPath()  +*/ " with FileID "+ fileDocument.getFileID() + " with internal ID " + iMendixObject.getId().toLong());

					IMendixIdentifier iMendixIdentifier = Core.createMendixIdentifier(""+ iMendixObject.getId().toLong());
					IMendixObject wrongObject = Core.retrieveId(context, iMendixIdentifier);
					FileDocument wrongFileDocument = FileDocument.initialize(context, wrongObject); // Core throw an exception if it is not a FileDocument!!!
					if (!fileDocument.getFileID().equals(wrongFileDocument.getFileID())) {
						Core.getLogger("CheckFileDocuments").error("  CheckFileDocuments: wrong Object " + wrongObject.getMetaObject().getName() +  " with FileID "+ wrongFileDocument.getFileID() + " with GUID " + wrongFileDocument.getMendixObject().getId().toLong()+ " with internal ID " + wrongObject.getId().toLong());
					}

					IMendixIdentifier iMendixIdentifier2 = Core.createMendixIdentifier(iMendixObject.getId().toLong());
					IMendixObject wrongObject2 = Core.retrieveId(context, iMendixIdentifier2);
					FileDocument wrongFileDocument2 = FileDocument.initialize(context, wrongObject2); // Core throw an exception if it is not a FileDocument!!!
					if (!fileDocument.getFileID().equals(wrongFileDocument2.getFileID())) {
						Core.getLogger("CheckFileDocuments").error("  CheckFileDocuments: wrong Object2 " + wrongObject2.getMetaObject().getName() +  " with FileID "+ wrongFileDocument2.getFileID() + " with GUID " + wrongFileDocument2.getMendixObject().getId().toLong()+ " with internal ID " + wrongObject2.getId().toLong());
					}
					
					IMendixIdentifier iMendixIdentifier3 = Core.createMendixIdentifier(iMendixObject.getId().toLong());
					IMendixObject wrongObject3 = Core.retrieveId(context, iMendixIdentifier3);
					FileDocument wrongFileDocument3 = FileDocument.initialize(context, wrongObject3); // Core throw an exception if it is not a FileDocument!!!
					if (!fileDocument.getFileID().equals(wrongFileDocument3.getFileID())) {
						Core.getLogger("CheckFileDocuments").error("  CheckFileDocuments: wrong Object3 " + wrongObject2.getMetaObject().getName() +  " with FileID "+ wrongFileDocument3.getFileID() + " with GUID " + wrongFileDocument3.getMendixObject().getId().toLong()+ " with internal ID " + wrongObject3.getId().toLong());
					}

				}
			} catch (Exception e) {
				Core.getLogger("CheckFileDocuments").error("*** CheckFileDocuments: "+iMendixObject.getMetaObject().getName()+" Exception on "+fileDocument.getName() + " with FileID "+ fileDocument.getFileID() + " with internal ID " + iMendixObject.getId().toLong() + " Exception " + e.getMessage());
			}
			
			
		}
		Core.getLogger("CheckFileDocuments").info("CheckFileDocuments Finished");
		
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "CheckFileDocuments";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
