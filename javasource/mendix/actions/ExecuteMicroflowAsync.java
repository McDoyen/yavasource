// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mendix.actions;

import java.util.Date;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class ExecuteMicroflowAsync extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String MicroflowName;
	private IMendixObject AnyObject;

	public ExecuteMicroflowAsync(IContext context, java.lang.String MicroflowName, IMendixObject AnyObject)
	{
		super(context);
		this.MicroflowName = MicroflowName;
		this.AnyObject = AnyObject;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		Thread thread = new Thread(new PrivateMicroflowThread(MicroflowName, AnyObject, this.getContext()));
		thread.setName(MicroflowName+AnyObject.getId());
    	thread.setUncaughtExceptionHandler(
                new Thread.UncaughtExceptionHandler() {
                    @Override 
                    public void uncaughtException(Thread t, Throwable e) {
                    	Core.getLogger("ExpertDesk").error("Uncaught thread-exception: " + MicroflowName+": "+e);
                    }
                });
		thread.start();
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "ExecuteMicroflowAsync";
	}

	// BEGIN EXTRA CODE
	private class PrivateMicroflowThread implements Runnable {
		private String MicroflowName1;
		private IMendixObject AnyObject;
		private IContext context;

		PrivateMicroflowThread(String MicroflowName, IMendixObject anyObject, IContext context) {
			this.MicroflowName1 = MicroflowName;
			this.AnyObject = anyObject;
			this.context = context;
		}
		
		public void run() {
			Core.getLogger("ExpertDesk").debug("Start ExecuteMicroflowAsync " + MicroflowName1);
	    	Date start = new Date();
	    	while(context.isInTransaction()) {
				try {
					Thread.sleep(50); // check every 10 ms if the other transaction has finished
				} catch(InterruptedException e) {
					Core.getLogger("ExpertDesk").trace("Interrupted ExecuteMicroflowAsync " + MicroflowName1);
					break;
				}
	    	}
			try {
				Core.getLogger("ExpertDesk").trace("Running ExecuteMicroflowAsync " + MicroflowName1);
				Core.execute(Core.createSystemContext(), MicroflowName, AnyObject.getId());				
				Core.getLogger("ExpertDesk").trace("Finished ExecuteMicroflowAsync " + MicroflowName1);
			} catch (Exception e) {
				Core.getLogger("ExpertDesk").error("Failed ExecuteMicroflowAsync " + MicroflowName1 + ".", e);
			}
			Date end = new Date();
			Long millis = end.getTime() - start.getTime();
			Core.getLogger("ExpertDesk").debug("Executed ExecuteMicroflowAsync " + MicroflowName1 + " in " + millis + " ms.");
			Thread.currentThread().interrupt();
			return;
	    }
	}

	// END EXTRA CODE
}
