// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package mendix.proxies;

public class LicensePool
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject licensePoolMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Mendix.LicensePool";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Name("Name"),
		CurrentNamedUsers("CurrentNamedUsers"),
		NamedUserLimit("NamedUserLimit"),
		MaxNamedUsersSpecified("MaxNamedUsersSpecified"),
		ConcurrentUserLimit("ConcurrentUserLimit"),
		MaxConcurrentUsersSpecified("MaxConcurrentUsersSpecified"),
		IsDefault("IsDefault"),
		UU95_IsPortal("UU95_IsPortal"),
		PoolType("PoolType");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public LicensePool(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Mendix.LicensePool"));
	}

	protected LicensePool(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject licensePoolMendixObject)
	{
		if (licensePoolMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("Mendix.LicensePool", licensePoolMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Mendix.LicensePool");

		this.licensePoolMendixObject = licensePoolMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'LicensePool.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static mendix.proxies.LicensePool initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return mendix.proxies.LicensePool.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static mendix.proxies.LicensePool initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new mendix.proxies.LicensePool(context, mendixObject);
	}

	public static mendix.proxies.LicensePool load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return mendix.proxies.LicensePool.initialize(context, mendixObject);
	}

	public static java.util.List<mendix.proxies.LicensePool> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<mendix.proxies.LicensePool> result = new java.util.ArrayList<mendix.proxies.LicensePool>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Mendix.LicensePool" + xpathConstraint))
			result.add(mendix.proxies.LicensePool.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Name
	 */
	public final java.lang.String getName()
	{
		return getName(getContext());
	}

	/**
	 * @param context
	 * @return value of Name
	 */
	public final java.lang.String getName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Name.toString());
	}

	/**
	 * Set value of Name
	 * @param name
	 */
	public final void setName(java.lang.String name)
	{
		setName(getContext(), name);
	}

	/**
	 * Set value of Name
	 * @param context
	 * @param name
	 */
	public final void setName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String name)
	{
		getMendixObject().setValue(context, MemberNames.Name.toString(), name);
	}

	/**
	 * @return value of CurrentNamedUsers
	 */
	public final java.lang.Integer getCurrentNamedUsers()
	{
		return getCurrentNamedUsers(getContext());
	}

	/**
	 * @param context
	 * @return value of CurrentNamedUsers
	 */
	public final java.lang.Integer getCurrentNamedUsers(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.CurrentNamedUsers.toString());
	}

	/**
	 * Set value of CurrentNamedUsers
	 * @param currentnamedusers
	 */
	public final void setCurrentNamedUsers(java.lang.Integer currentnamedusers)
	{
		setCurrentNamedUsers(getContext(), currentnamedusers);
	}

	/**
	 * Set value of CurrentNamedUsers
	 * @param context
	 * @param currentnamedusers
	 */
	public final void setCurrentNamedUsers(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer currentnamedusers)
	{
		getMendixObject().setValue(context, MemberNames.CurrentNamedUsers.toString(), currentnamedusers);
	}

	/**
	 * Set value of NamedUserLimit
	 * @param nameduserlimit
	 */
	public final mendix.proxies.UserLimit getNamedUserLimit()
	{
		return getNamedUserLimit(getContext());
	}

	/**
	 * @param context
	 * @return value of NamedUserLimit
	 */
	public final mendix.proxies.UserLimit getNamedUserLimit(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.NamedUserLimit.toString());
		if (obj == null)
			return null;

		return mendix.proxies.UserLimit.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of NamedUserLimit
	 * @param nameduserlimit
	 */
	public final void setNamedUserLimit(mendix.proxies.UserLimit nameduserlimit)
	{
		setNamedUserLimit(getContext(), nameduserlimit);
	}

	/**
	 * Set value of NamedUserLimit
	 * @param context
	 * @param nameduserlimit
	 */
	public final void setNamedUserLimit(com.mendix.systemwideinterfaces.core.IContext context, mendix.proxies.UserLimit nameduserlimit)
	{
		if (nameduserlimit != null)
			getMendixObject().setValue(context, MemberNames.NamedUserLimit.toString(), nameduserlimit.toString());
		else
			getMendixObject().setValue(context, MemberNames.NamedUserLimit.toString(), null);
	}

	/**
	 * @return value of MaxNamedUsersSpecified
	 */
	public final java.lang.Integer getMaxNamedUsersSpecified()
	{
		return getMaxNamedUsersSpecified(getContext());
	}

	/**
	 * @param context
	 * @return value of MaxNamedUsersSpecified
	 */
	public final java.lang.Integer getMaxNamedUsersSpecified(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.MaxNamedUsersSpecified.toString());
	}

	/**
	 * Set value of MaxNamedUsersSpecified
	 * @param maxnamedusersspecified
	 */
	public final void setMaxNamedUsersSpecified(java.lang.Integer maxnamedusersspecified)
	{
		setMaxNamedUsersSpecified(getContext(), maxnamedusersspecified);
	}

	/**
	 * Set value of MaxNamedUsersSpecified
	 * @param context
	 * @param maxnamedusersspecified
	 */
	public final void setMaxNamedUsersSpecified(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer maxnamedusersspecified)
	{
		getMendixObject().setValue(context, MemberNames.MaxNamedUsersSpecified.toString(), maxnamedusersspecified);
	}

	/**
	 * Set value of ConcurrentUserLimit
	 * @param concurrentuserlimit
	 */
	public final mendix.proxies.UserLimit getConcurrentUserLimit()
	{
		return getConcurrentUserLimit(getContext());
	}

	/**
	 * @param context
	 * @return value of ConcurrentUserLimit
	 */
	public final mendix.proxies.UserLimit getConcurrentUserLimit(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.ConcurrentUserLimit.toString());
		if (obj == null)
			return null;

		return mendix.proxies.UserLimit.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of ConcurrentUserLimit
	 * @param concurrentuserlimit
	 */
	public final void setConcurrentUserLimit(mendix.proxies.UserLimit concurrentuserlimit)
	{
		setConcurrentUserLimit(getContext(), concurrentuserlimit);
	}

	/**
	 * Set value of ConcurrentUserLimit
	 * @param context
	 * @param concurrentuserlimit
	 */
	public final void setConcurrentUserLimit(com.mendix.systemwideinterfaces.core.IContext context, mendix.proxies.UserLimit concurrentuserlimit)
	{
		if (concurrentuserlimit != null)
			getMendixObject().setValue(context, MemberNames.ConcurrentUserLimit.toString(), concurrentuserlimit.toString());
		else
			getMendixObject().setValue(context, MemberNames.ConcurrentUserLimit.toString(), null);
	}

	/**
	 * @return value of MaxConcurrentUsersSpecified
	 */
	public final java.lang.Integer getMaxConcurrentUsersSpecified()
	{
		return getMaxConcurrentUsersSpecified(getContext());
	}

	/**
	 * @param context
	 * @return value of MaxConcurrentUsersSpecified
	 */
	public final java.lang.Integer getMaxConcurrentUsersSpecified(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.MaxConcurrentUsersSpecified.toString());
	}

	/**
	 * Set value of MaxConcurrentUsersSpecified
	 * @param maxconcurrentusersspecified
	 */
	public final void setMaxConcurrentUsersSpecified(java.lang.Integer maxconcurrentusersspecified)
	{
		setMaxConcurrentUsersSpecified(getContext(), maxconcurrentusersspecified);
	}

	/**
	 * Set value of MaxConcurrentUsersSpecified
	 * @param context
	 * @param maxconcurrentusersspecified
	 */
	public final void setMaxConcurrentUsersSpecified(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer maxconcurrentusersspecified)
	{
		getMendixObject().setValue(context, MemberNames.MaxConcurrentUsersSpecified.toString(), maxconcurrentusersspecified);
	}

	/**
	 * @return value of IsDefault
	 */
	public final java.lang.Boolean getIsDefault()
	{
		return getIsDefault(getContext());
	}

	/**
	 * @param context
	 * @return value of IsDefault
	 */
	public final java.lang.Boolean getIsDefault(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.IsDefault.toString());
	}

	/**
	 * Set value of IsDefault
	 * @param isdefault
	 */
	public final void setIsDefault(java.lang.Boolean isdefault)
	{
		setIsDefault(getContext(), isdefault);
	}

	/**
	 * Set value of IsDefault
	 * @param context
	 * @param isdefault
	 */
	public final void setIsDefault(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean isdefault)
	{
		getMendixObject().setValue(context, MemberNames.IsDefault.toString(), isdefault);
	}

	/**
	 * @return value of UU95_IsPortal
	 */
	public final java.lang.Boolean getUU95_IsPortal()
	{
		return getUU95_IsPortal(getContext());
	}

	/**
	 * @param context
	 * @return value of UU95_IsPortal
	 */
	public final java.lang.Boolean getUU95_IsPortal(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.UU95_IsPortal.toString());
	}

	/**
	 * Set value of UU95_IsPortal
	 * @param uu95_isportal
	 */
	public final void setUU95_IsPortal(java.lang.Boolean uu95_isportal)
	{
		setUU95_IsPortal(getContext(), uu95_isportal);
	}

	/**
	 * Set value of UU95_IsPortal
	 * @param context
	 * @param uu95_isportal
	 */
	public final void setUU95_IsPortal(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean uu95_isportal)
	{
		getMendixObject().setValue(context, MemberNames.UU95_IsPortal.toString(), uu95_isportal);
	}

	/**
	 * Set value of PoolType
	 * @param pooltype
	 */
	public final mendix.proxies.PoolType getPoolType()
	{
		return getPoolType(getContext());
	}

	/**
	 * @param context
	 * @return value of PoolType
	 */
	public final mendix.proxies.PoolType getPoolType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.PoolType.toString());
		if (obj == null)
			return null;

		return mendix.proxies.PoolType.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of PoolType
	 * @param pooltype
	 */
	public final void setPoolType(mendix.proxies.PoolType pooltype)
	{
		setPoolType(getContext(), pooltype);
	}

	/**
	 * Set value of PoolType
	 * @param context
	 * @param pooltype
	 */
	public final void setPoolType(com.mendix.systemwideinterfaces.core.IContext context, mendix.proxies.PoolType pooltype)
	{
		if (pooltype != null)
			getMendixObject().setValue(context, MemberNames.PoolType.toString(), pooltype.toString());
		else
			getMendixObject().setValue(context, MemberNames.PoolType.toString(), null);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return licensePoolMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final mendix.proxies.LicensePool that = (mendix.proxies.LicensePool) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Mendix.LicensePool";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
