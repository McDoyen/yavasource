// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package workflowinstance.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the WorkflowInstance module
	public static void actionNodeValidations(IContext context, java.lang.Long _order, boolean _reachedEnd, java.lang.Long _countToList, java.lang.Long _countFromList, workflowinstance.proxies.ActionNode _actionNode, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Order", _order);
			params.put("ReachedEnd", _reachedEnd);
			params.put("countToList", _countToList);
			params.put("countFromList", _countFromList);
			params.put("ActionNode", _actionNode == null ? null : _actionNode.getMendixObject());
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.ActionNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void add_Node(IContext context, fusionchartsplus.proxies.ChartXML _chartXML)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChartXML", _chartXML == null ? null : _chartXML.getMendixObject());
			Core.execute(context, "WorkflowInstance.Add_Node", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void applyWorkflow(IContext context, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.ApplyWorkflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void approvalNodeValidations(IContext context, java.lang.Long _order, boolean _reachedEnd, java.lang.Long _countToList, java.lang.Long _countFromList, workflowinstance.proxies.ApprovalNode _approvalNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Order", _order);
			params.put("ReachedEnd", _reachedEnd);
			params.put("countToList", _countToList);
			params.put("countFromList", _countFromList);
			params.put("ApprovalNode", _approvalNode == null ? null : _approvalNode.getMendixObject());
			Core.execute(context, "WorkflowInstance.ApprovalNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditCondition_AfterDelete(IContext context, workflowinstance.proxies.Condition _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.AuditCondition_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditLink_AfterDelete(IContext context, workflowinstance.proxies.Link _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.AuditLink_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditNode_AfterDelete(IContext context, workflowinstance.proxies.Node _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.AuditNode_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditWorkflow_AfterDelete(IContext context, workflowinstance.proxies.Workflow _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.AuditWorkflow_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditWorkflow_AfterValidate(IContext context, workflowinstance.proxies.Workflow _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.AuditWorkflow_AfterValidate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bC_ValidateInterfaceCondition(IContext context, workflowinstance.proxies.InterfaceCondition _interfaceCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InterfaceCondition", _interfaceCondition == null ? null : _interfaceCondition.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.BC_ValidateInterfaceCondition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long calculateNodeOrderRecursive(IContext context, workflowinstance.proxies.Node _node, java.util.List<workflowinstance.proxies.Node> _visitedNodeList, java.lang.Long _order, workflowinstance.proxies.Node _startNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_visitedNodeList = null;
			if (_visitedNodeList != null)
			{
				listparam_visitedNodeList = new java.util.ArrayList<IMendixObject>();
				for (workflowinstance.proxies.Node obj : _visitedNodeList)
					listparam_visitedNodeList.add(obj.getMendixObject());
			}
			params.put("VisitedNodeList", listparam_visitedNodeList);
			params.put("Order", _order);
			params.put("StartNode", _startNode == null ? null : _startNode.getMendixObject());
			return (java.lang.Long)Core.execute(context, "WorkflowInstance.CalculateNodeOrderRecursive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean calculatePathToEndRecursive(IContext context, workflowinstance.proxies.Node _node, java.util.List<workflowinstance.proxies.Node> _visitedNodeList, java.lang.Long _order, java.util.List<workflowinstance.proxies.Node> _endNodes)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_visitedNodeList = null;
			if (_visitedNodeList != null)
			{
				listparam_visitedNodeList = new java.util.ArrayList<IMendixObject>();
				for (workflowinstance.proxies.Node obj : _visitedNodeList)
					listparam_visitedNodeList.add(obj.getMendixObject());
			}
			params.put("VisitedNodeList", listparam_visitedNodeList);
			params.put("Order", _order);
			java.util.ArrayList<IMendixObject> listparam_endNodes = null;
			if (_endNodes != null)
			{
				listparam_endNodes = new java.util.ArrayList<IMendixObject>();
				for (workflowinstance.proxies.Node obj : _endNodes)
					listparam_endNodes.add(obj.getMendixObject());
			}
			params.put("EndNodes", listparam_endNodes);
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.CalculatePathToEndRecursive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cancelNodeValidations(IContext context, java.lang.Long _order, boolean _reachedEnd, java.lang.Long _countToList, java.lang.Long _countFromList, workflowinstance.proxies.CancelNode _cancelNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Order", _order);
			params.put("ReachedEnd", _reachedEnd);
			params.put("countToList", _countToList);
			params.put("countFromList", _countFromList);
			params.put("CancelNode", _cancelNode == null ? null : _cancelNode.getMendixObject());
			Core.execute(context, "WorkflowInstance.CancelNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cancelSelectFromOrToNode(IContext context, workflowinstance.proxies.Link _link)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Link", _link == null ? null : _link.getMendixObject());
			Core.execute(context, "WorkflowInstance.CancelSelectFromOrToNode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void check_DeleteLink(IContext context, fusionchartsplus.proxies.ChartXML _chartXML)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChartXML", _chartXML == null ? null : _chartXML.getMendixObject());
			Core.execute(context, "WorkflowInstance.Check_DeleteLink", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void check_DeleteNode(IContext context, fusionchartsplus.proxies.ChartXML _chartXML)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChartXML", _chartXML == null ? null : _chartXML.getMendixObject());
			Core.execute(context, "WorkflowInstance.Check_DeleteNode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkLink_Reset_WorkflowChart(IContext context, workflowinstance.proxies.Link _link)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Link", _link == null ? null : _link.getMendixObject());
			Core.execute(context, "WorkflowInstance.CheckLink_Reset_WorkflowChart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkList(IContext context, java.util.List<workflowinstance.proxies.Workflow> _workflowList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_workflowList = null;
			if (_workflowList != null)
			{
				listparam_workflowList = new java.util.ArrayList<IMendixObject>();
				for (workflowinstance.proxies.Workflow obj : _workflowList)
					listparam_workflowList.add(obj.getMendixObject());
			}
			params.put("WorkflowList", listparam_workflowList);
			Core.execute(context, "WorkflowInstance.CheckList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkNode_Reset_WorkflowChart(IContext context, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			Core.execute(context, "WorkflowInstance.CheckNode_Reset_WorkflowChart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkParentWorkflows(IContext context, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.CheckParentWorkflows", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkParentWorkflows_BeforeDelete(IContext context, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.CheckParentWorkflows_BeforeDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void clearTemplateRequest_OnChange(IContext context, workflowinstance.proxies.RequestNode _requestNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestNode", _requestNode == null ? null : _requestNode.getMendixObject());
			Core.execute(context, "WorkflowInstance.ClearTemplateRequest_OnChange", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void conditionalNodeValidations(IContext context, workflowinstance.proxies.ConditionalNode _conditionalNode, java.lang.Long _order, boolean _reachedEnd, java.lang.Long _countToList, java.lang.Long _countFromList, java.util.List<workflowinstance.proxies.Link> _toLinkList, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ConditionalNode", _conditionalNode == null ? null : _conditionalNode.getMendixObject());
			params.put("Order", _order);
			params.put("ReachedEnd", _reachedEnd);
			params.put("countToList", _countToList);
			params.put("countFromList", _countFromList);
			java.util.ArrayList<IMendixObject> listparam_toLinkList = null;
			if (_toLinkList != null)
			{
				listparam_toLinkList = new java.util.ArrayList<IMendixObject>();
				for (workflowinstance.proxies.Link obj : _toLinkList)
					listparam_toLinkList.add(obj.getMendixObject());
			}
			params.put("ToLinkList", listparam_toLinkList);
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.ConditionalNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean conditionalNodeValidationsRecursive(IContext context, workflowinstance.proxies.Condition _condition, java.lang.Long _conditionLevel)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Condition", _condition == null ? null : _condition.getMendixObject());
			params.put("ConditionLevel", _conditionLevel);
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.ConditionalNodeValidationsRecursive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static workflowinstance.proxies.Condition copyConditionForTriggerSetup(IContext context, workflowinstance.proxies.Condition _oldCondition, trigger.proxies.TriggerSetup _newTriggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OldCondition", _oldCondition == null ? null : _oldCondition.getMendixObject());
			params.put("NewTriggerSetup", _newTriggerSetup == null ? null : _newTriggerSetup.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "WorkflowInstance.CopyConditionForTriggerSetup", params);
			return result == null ? null : workflowinstance.proxies.Condition.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static workflowinstance.proxies.Condition copyConditionForWorkflow(IContext context, workflowinstance.proxies.Condition _oldCondition, workflowinstance.proxies.Workflow _newWorkflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OldCondition", _oldCondition == null ? null : _oldCondition.getMendixObject());
			params.put("NewWorkflow", _newWorkflow == null ? null : _newWorkflow.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "WorkflowInstance.CopyConditionForWorkflow", params);
			return result == null ? null : workflowinstance.proxies.Condition.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyFixNodes(IContext context, workflowinstance.proxies.Workflow _oldWorkflow, workflowinstance.proxies.Workflow _newWorkflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OldWorkflow", _oldWorkflow == null ? null : _oldWorkflow.getMendixObject());
			params.put("NewWorkflow", _newWorkflow == null ? null : _newWorkflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.CopyFixNodes", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyLink(IContext context, workflowinstance.proxies.Workflow _newWorkflow, workflowinstance.proxies.Link _oldLink)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("NewWorkflow", _newWorkflow == null ? null : _newWorkflow.getMendixObject());
			params.put("OldLink", _oldLink == null ? null : _oldLink.getMendixObject());
			Core.execute(context, "WorkflowInstance.CopyLink", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyNode(IContext context, workflowinstance.proxies.Workflow _newWorkflow, workflowinstance.proxies.Node _oldNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("NewWorkflow", _newWorkflow == null ? null : _newWorkflow.getMendixObject());
			params.put("OldNode", _oldNode == null ? null : _oldNode.getMendixObject());
			Core.execute(context, "WorkflowInstance.CopyNode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyWorkflow(IContext context, workflowinstance.proxies.Workflow _oldWorkflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("OldWorkflow", _oldWorkflow == null ? null : _oldWorkflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.CopyWorkflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createInitialLinkAndValidate(IContext context, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			Core.execute(context, "WorkflowInstance.CreateInitialLinkAndValidate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean createLinkValidateAndCheckChartReset(IContext context, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.CreateLinkValidateAndCheckChartReset", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deleteLink(IContext context, workflowinstance.proxies.Link _link)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Link", _link == null ? null : _link.getMendixObject());
			Core.execute(context, "WorkflowInstance.DeleteLink", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean deleteNode(IContext context, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.DeleteNode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void edit_Condition(IContext context, workflowinstance.proxies.Link _link)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Link", _link == null ? null : _link.getMendixObject());
			Core.execute(context, "WorkflowInstance.Edit_Condition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void edit_Link(IContext context, fusionchartsplus.proxies.ChartXML _chartXML)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChartXML", _chartXML == null ? null : _chartXML.getMendixObject());
			Core.execute(context, "WorkflowInstance.Edit_Link", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void edit_Node(IContext context, fusionchartsplus.proxies.ChartXML _chartXML)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChartXML", _chartXML == null ? null : _chartXML.getMendixObject());
			Core.execute(context, "WorkflowInstance.Edit_Node", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void editCondition_OpenForm(IContext context, workflowinstance.proxies.Link _link, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Link", _link == null ? null : _link.getMendixObject());
			params.put("Node", _node == null ? null : _node.getMendixObject());
			Core.execute(context, "WorkflowInstance.EditCondition_OpenForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void endNodeValidations(IContext context, workflowinstance.proxies.EndNode _endNode, java.lang.Long _order, java.lang.Long _countFromList, java.lang.Long _countToList, boolean _reachedEnd)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("EndNode", _endNode == null ? null : _endNode.getMendixObject());
			params.put("Order", _order);
			params.put("countFromList", _countFromList);
			params.put("countToList", _countToList);
			params.put("ReachedEnd", _reachedEnd);
			Core.execute(context, "WorkflowInstance.EndNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean field_ShowConditionOrder(IContext context, workflowinstance.proxies.Condition _condition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Condition", _condition == null ? null : _condition.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.Field_ShowConditionOrder", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean field_ShowRequestConditionTask(IContext context, workflowinstance.proxies.RequestCondition _requestCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestCondition", _requestCondition == null ? null : _requestCondition.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.Field_ShowRequestConditionTask", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<categories.proxies.Category> getCategoryListClosure_Childs_WFConditionInstance(IContext context, workflowinstance.proxies.RequestCondition _wFInstanceRequestCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("WFInstanceRequestCondition", _wFInstanceRequestCondition == null ? null : _wFInstanceRequestCondition.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.GetCategoryListClosure_Childs_WFConditionInstance", params);
			java.util.List<categories.proxies.Category> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<categories.proxies.Category>();
				for (IMendixObject obj : objs)
					result.add(categories.proxies.Category.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<categories.proxies.Category> getCategoryListClosure_Root_WFConditionInstance(IContext context, workflowinstance.proxies.RequestCondition _wFInstanceRequestCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("WFInstanceRequestCondition", _wFInstanceRequestCondition == null ? null : _wFInstanceRequestCondition.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.GetCategoryListClosure_Root_WFConditionInstance", params);
			java.util.List<categories.proxies.Category> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<categories.proxies.Category>();
				for (IMendixObject obj : objs)
					result.add(categories.proxies.Category.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<categories.proxies.Category> getCategoryListOpening_Childs_WFConditionInstance(IContext context, workflowinstance.proxies.RequestCondition _wFInstanceRequestCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("WFInstanceRequestCondition", _wFInstanceRequestCondition == null ? null : _wFInstanceRequestCondition.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.GetCategoryListOpening_Childs_WFConditionInstance", params);
			java.util.List<categories.proxies.Category> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<categories.proxies.Category>();
				for (IMendixObject obj : objs)
					result.add(categories.proxies.Category.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<categories.proxies.Category> getCategoryListOpening_Root_WFConditionInstance(IContext context, workflowinstance.proxies.RequestCondition _wFInstanceRequestCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("WFInstanceRequestCondition", _wFInstanceRequestCondition == null ? null : _wFInstanceRequestCondition.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.GetCategoryListOpening_Root_WFConditionInstance", params);
			java.util.List<categories.proxies.Category> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<categories.proxies.Category>();
				for (IMendixObject obj : objs)
					result.add(categories.proxies.Category.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<statetransition.proxies.Phase> getPhaseByMatrix(IContext context, statetransition.proxies.Matrix _matrix)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.GetPhaseByMatrix", params);
			java.util.List<statetransition.proxies.Phase> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<statetransition.proxies.Phase>();
				for (IMendixObject obj : objs)
					result.add(statetransition.proxies.Phase.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<workflowinstance.proxies.Node> getResultConditionNodes(IContext context, workflowinstance.proxies.Condition _condition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Condition", _condition == null ? null : _condition.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.GetResultConditionNodes", params);
			java.util.List<workflowinstance.proxies.Node> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<workflowinstance.proxies.Node>();
				for (IMendixObject obj : objs)
					result.add(workflowinstance.proxies.Node.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> getSharedOLAContractsOfBusinessGroups(IContext context, java.util.List<nap.proxies.BusinessGroup> _businessGroups, slm.proxies.ProcessType _processType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_businessGroups = null;
			if (_businessGroups != null)
			{
				listparam_businessGroups = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.BusinessGroup obj : _businessGroups)
					listparam_businessGroups.add(obj.getMendixObject());
			}
			params.put("BusinessGroups", listparam_businessGroups);
			params.put("ProcessType", _processType == null ? null : _processType.name());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.GetSharedOLAContractsOfBusinessGroups", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Contract> getSharedSLAContractsOfBusinessGroups(IContext context, java.util.List<nap.proxies.BusinessGroup> _businessGroups)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_businessGroups = null;
			if (_businessGroups != null)
			{
				listparam_businessGroups = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.BusinessGroup obj : _businessGroups)
					listparam_businessGroups.add(obj.getMendixObject());
			}
			params.put("BusinessGroups", listparam_businessGroups);
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.GetSharedSLAContractsOfBusinessGroups", params);
			java.util.List<slm.proxies.Contract> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Contract>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Contract.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<statetransition.proxies.State> getStateByMatrix(IContext context, statetransition.proxies.Matrix _matrix)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.GetStateByMatrix", params);
			java.util.List<statetransition.proxies.State> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<statetransition.proxies.State>();
				for (IMendixObject obj : objs)
					result.add(statetransition.proxies.State.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<workflowinstance.proxies.RequestNode> getTaskNodes(IContext context, workflowinstance.proxies.Condition _condition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Condition", _condition == null ? null : _condition.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.GetTaskNodes", params);
			java.util.List<workflowinstance.proxies.RequestNode> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<workflowinstance.proxies.RequestNode>();
				for (IMendixObject obj : objs)
					result.add(workflowinstance.proxies.RequestNode.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void insertNode_OpenForm(IContext context, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			Core.execute(context, "WorkflowInstance.InsertNode_OpenForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void insertNodeAfter_Create(IContext context, workflowshared.proxies.NodeType _nodeType, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("NodeType", _nodeType == null ? null : _nodeType.getMendixObject());
			params.put("Node", _node == null ? null : _node.getMendixObject());
			Core.execute(context, "WorkflowInstance.InsertNodeAfter_Create", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void insertNodeAfter_OpenForm(IContext context, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			Core.execute(context, "WorkflowInstance.InsertNodeAfter_OpenForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void insertNodeBeside_Create(IContext context, workflowinstance.proxies.Node _node, workflowshared.proxies.NodeType _nodeType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			params.put("NodeType", _nodeType == null ? null : _nodeType.getMendixObject());
			Core.execute(context, "WorkflowInstance.InsertNodeBeside_Create", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void insertNodeBeside_OpenForm(IContext context, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			Core.execute(context, "WorkflowInstance.InsertNodeBeside_OpenForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void mergeNodeValidations(IContext context, java.lang.Long _countFromList, java.lang.Long _countToList, boolean _reachedEnd, java.lang.Long _order, workflowinstance.proxies.MergeNode _mergeNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("countFromList", _countFromList);
			params.put("countToList", _countToList);
			params.put("ReachedEnd", _reachedEnd);
			params.put("Order", _order);
			params.put("MergeNode", _mergeNode == null ? null : _mergeNode.getMendixObject());
			Core.execute(context, "WorkflowInstance.MergeNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void messageNodeValidations(IContext context, java.lang.Long _order, boolean _reachedEnd, java.lang.Long _countToList, java.lang.Long _countFromList, workflowinstance.proxies.MessageNode _messageNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Order", _order);
			params.put("ReachedEnd", _reachedEnd);
			params.put("countToList", _countToList);
			params.put("countFromList", _countFromList);
			params.put("MessageNode", _messageNode == null ? null : _messageNode.getMendixObject());
			Core.execute(context, "WorkflowInstance.MessageNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newBooleanCondition_OpenForm(IContext context, workflowinstance.proxies.BooleanCondition _booleanCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("BooleanCondition", _booleanCondition == null ? null : _booleanCondition.getMendixObject());
			Core.execute(context, "WorkflowInstance.NewBooleanCondition_OpenForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newBooleanConditionOfSelectedType(IContext context, workflowinstance.proxies.BooleanCondition _booleanCondition, workflowshared.proxies.ConditionType _conditionType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("BooleanCondition", _booleanCondition == null ? null : _booleanCondition.getMendixObject());
			params.put("ConditionType", _conditionType == null ? null : _conditionType.getMendixObject());
			Core.execute(context, "WorkflowInstance.NewBooleanConditionOfSelectedType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newCondition_OpenForm(IContext context, workflowinstance.proxies.Link _link, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Link", _link == null ? null : _link.getMendixObject());
			params.put("Node", _node == null ? null : _node.getMendixObject());
			Core.execute(context, "WorkflowInstance.NewCondition_OpenForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newConditionOfSelectedType(IContext context, workflowinstance.proxies.Link _link, workflowshared.proxies.ConditionType _conditionType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Link", _link == null ? null : _link.getMendixObject());
			params.put("ConditionType", _conditionType == null ? null : _conditionType.getMendixObject());
			Core.execute(context, "WorkflowInstance.NewConditionOfSelectedType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newFromNode(IContext context, workflowinstance.proxies.Node _toNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ToNode", _toNode == null ? null : _toNode.getMendixObject());
			Core.execute(context, "WorkflowInstance.NewFromNode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newNode_Create(IContext context, workflowshared.proxies.NodeType _nodeType, workflowinstance.proxies.Node _node, workflowshared.proxies.InsertTypeEnum _insertType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("NodeType", _nodeType == null ? null : _nodeType.getMendixObject());
			params.put("Node", _node == null ? null : _node.getMendixObject());
			params.put("InsertType", _insertType == null ? null : _insertType.name());
			Core.execute(context, "WorkflowInstance.NewNode_Create", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newToNode(IContext context, workflowinstance.proxies.Node _fromNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("FromNode", _fromNode == null ? null : _fromNode.getMendixObject());
			Core.execute(context, "WorkflowInstance.NewToNode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean nodeValidateUniqueName_BC(IContext context, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.NodeValidateUniqueName_BC", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void nodeValidations(IContext context, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			Core.execute(context, "WorkflowInstance.NodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean onSaveCondition_RefreshLink_ValidateWorkflow(IContext context, workflowinstance.proxies.Condition _condition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Condition", _condition == null ? null : _condition.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.OnSaveCondition_RefreshLink_ValidateWorkflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void parallelNodeValidations(IContext context, java.lang.Long _order, boolean _reachedEnd, java.lang.Long _countToList, java.lang.Long _countFromList, java.util.List<workflowinstance.proxies.Node> _endNodeList, workflowinstance.proxies.ParallelNode _parallelNode, java.util.List<workflowinstance.proxies.Link> _toLinkList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Order", _order);
			params.put("ReachedEnd", _reachedEnd);
			params.put("countToList", _countToList);
			params.put("countFromList", _countFromList);
			java.util.ArrayList<IMendixObject> listparam_endNodeList = null;
			if (_endNodeList != null)
			{
				listparam_endNodeList = new java.util.ArrayList<IMendixObject>();
				for (workflowinstance.proxies.Node obj : _endNodeList)
					listparam_endNodeList.add(obj.getMendixObject());
			}
			params.put("EndNodeList", listparam_endNodeList);
			params.put("ParallelNode", _parallelNode == null ? null : _parallelNode.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_toLinkList = null;
			if (_toLinkList != null)
			{
				listparam_toLinkList = new java.util.ArrayList<IMendixObject>();
				for (workflowinstance.proxies.Link obj : _toLinkList)
					listparam_toLinkList.add(obj.getMendixObject());
			}
			params.put("ToLinkList", listparam_toLinkList);
			Core.execute(context, "WorkflowInstance.ParallelNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean preValidateNewLink(IContext context, boolean _isFromNode, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IsFromNode", _isFromNode);
			params.put("Node", _node == null ? null : _node.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.PreValidateNewLink", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void requestNodeValidations(IContext context, java.lang.Long _order, boolean _reachedEnd, java.lang.Long _countToList, java.lang.Long _countFromList, workflowinstance.proxies.RequestNode _requestNode, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Order", _order);
			params.put("ReachedEnd", _reachedEnd);
			params.put("countToList", _countToList);
			params.put("countFromList", _countFromList);
			params.put("RequestNode", _requestNode == null ? null : _requestNode.getMendixObject());
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.RequestNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void reset_Chart_FromWidget(IContext context, fusionchartsplus.proxies.ChartXML _chartXML)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ChartXML", _chartXML == null ? null : _chartXML.getMendixObject());
			Core.execute(context, "WorkflowInstance.Reset_Chart_FromWidget", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void reset_WorkflowChart(IContext context, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.Reset_WorkflowChart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean sanitizeRequestNodeDescriptionHTML(IContext context, workflowinstance.proxies.RequestNode _requestNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestNode", _requestNode == null ? null : _requestNode.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.SanitizeRequestNodeDescriptionHTML", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void saveWorkflow(IContext context, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.SaveWorkflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<statetransition.proxies.Transition> selectAction(IContext context, workflowinstance.proxies.ActionNode _actionNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ActionNode", _actionNode == null ? null : _actionNode.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.SelectAction", params);
			java.util.List<statetransition.proxies.Transition> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<statetransition.proxies.Transition>();
				for (IMendixObject obj : objs)
					result.add(statetransition.proxies.Transition.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void selectedFromNode(IContext context, workflowinstance.proxies.Node _fromNode, workflowinstance.proxies.Link _link)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("FromNode", _fromNode == null ? null : _fromNode.getMendixObject());
			params.put("Link", _link == null ? null : _link.getMendixObject());
			Core.execute(context, "WorkflowInstance.SelectedFromNode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void selectedToNode(IContext context, workflowinstance.proxies.Node _toNode, workflowinstance.proxies.Link _link)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ToNode", _toNode == null ? null : _toNode.getMendixObject());
			params.put("Link", _link == null ? null : _link.getMendixObject());
			Core.execute(context, "WorkflowInstance.SelectedToNode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<workflowinstance.proxies.Node> selectNodeForEndNodeResult(IContext context, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Node", _node == null ? null : _node.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.SelectNodeForEndNodeResult", params);
			java.util.List<workflowinstance.proxies.Node> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<workflowinstance.proxies.Node>();
				for (IMendixObject obj : objs)
					result.add(workflowinstance.proxies.Node.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<statetransition.proxies.Phase> selectPhase(IContext context, workflowinstance.proxies.RequestCondition _requestCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestCondition", _requestCondition == null ? null : _requestCondition.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.SelectPhase", params);
			java.util.List<statetransition.proxies.Phase> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<statetransition.proxies.Phase>();
				for (IMendixObject obj : objs)
					result.add(statetransition.proxies.Phase.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<statetransition.proxies.State> selectState(IContext context, workflowinstance.proxies.RequestCondition _requestCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestCondition", _requestCondition == null ? null : _requestCondition.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.SelectState", params);
			java.util.List<statetransition.proxies.State> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<statetransition.proxies.State>();
				for (IMendixObject obj : objs)
					result.add(statetransition.proxies.State.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<workflowinstance.proxies.Workflow> selectSubWorkflow(IContext context, workflowinstance.proxies.SubWorkflowNode _subWorkflowNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SubWorkflowNode", _subWorkflowNode == null ? null : _subWorkflowNode.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.SelectSubWorkflow", params);
			java.util.List<workflowinstance.proxies.Workflow> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<workflowinstance.proxies.Workflow>();
				for (IMendixObject obj : objs)
					result.add(workflowinstance.proxies.Workflow.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<scheduling.proxies.TemplateRequest> selectTemplateRequest(IContext context, workflowinstance.proxies.RequestNode _requestNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestNode", _requestNode == null ? null : _requestNode.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "WorkflowInstance.SelectTemplateRequest", params);
			java.util.List<scheduling.proxies.TemplateRequest> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<scheduling.proxies.TemplateRequest>();
				for (IMendixObject obj : objs)
					result.add(scheduling.proxies.TemplateRequest.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void set_Condition(IContext context, workflowinstance.proxies.Link _link)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Link", _link == null ? null : _link.getMendixObject());
			Core.execute(context, "WorkflowInstance.Set_Condition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void show_WorkflowChart(IContext context, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.Show_WorkflowChart", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void show_WorkflowChart_ReadOnly(IContext context, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.Show_WorkflowChart_ReadOnly", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void showWorkflowChartList(IContext context, java.util.List<workflowinstance.proxies.Workflow> _workflowList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_workflowList = null;
			if (_workflowList != null)
			{
				listparam_workflowList = new java.util.ArrayList<IMendixObject>();
				for (workflowinstance.proxies.Workflow obj : _workflowList)
					listparam_workflowList.add(obj.getMendixObject());
			}
			params.put("WorkflowList", listparam_workflowList);
			Core.execute(context, "WorkflowInstance.ShowWorkflowChartList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void signalNodeValidations(IContext context, java.lang.Long _order, boolean _reachedEnd, java.lang.Long _countToList, java.lang.Long _countFromList, workflowinstance.proxies.SignalNode _signalNode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Order", _order);
			params.put("ReachedEnd", _reachedEnd);
			params.put("countToList", _countToList);
			params.put("countFromList", _countFromList);
			params.put("SignalNode", _signalNode == null ? null : _signalNode.getMendixObject());
			Core.execute(context, "WorkflowInstance.SignalNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void subWorkflowNodeValidations(IContext context, java.lang.Long _order, boolean _reachedEnd, java.lang.Long _countToList, java.lang.Long _countFromList, workflowinstance.proxies.SubWorkflowNode _subWorkflowNode, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Order", _order);
			params.put("ReachedEnd", _reachedEnd);
			params.put("countToList", _countToList);
			params.put("countFromList", _countFromList);
			params.put("SubWorkflowNode", _subWorkflowNode == null ? null : _subWorkflowNode.getMendixObject());
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			Core.execute(context, "WorkflowInstance.SubWorkflowNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void timerNodeValidations(IContext context, workflowinstance.proxies.TimerNode _timerNode, java.lang.Long _order, java.lang.Long _countFromList, java.lang.Long _countToList, boolean _reachedEnd)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TimerNode", _timerNode == null ? null : _timerNode.getMendixObject());
			params.put("Order", _order);
			params.put("countFromList", _countFromList);
			params.put("countToList", _countToList);
			params.put("ReachedEnd", _reachedEnd);
			Core.execute(context, "WorkflowInstance.TimerNodeValidations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateBooleanCondition(IContext context, workflowinstance.proxies.BooleanCondition _booleanCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("BooleanCondition", _booleanCondition == null ? null : _booleanCondition.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.ValidateBooleanCondition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateCondition(IContext context, workflowinstance.proxies.Condition _condition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Condition", _condition == null ? null : _condition.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.ValidateCondition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateRequestCondition(IContext context, workflowinstance.proxies.RequestCondition _requestCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestCondition", _requestCondition == null ? null : _requestCondition.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.ValidateRequestCondition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateResultCondition(IContext context, workflowinstance.proxies.ResultCondition _resultCondition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ResultCondition", _resultCondition == null ? null : _resultCondition.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.ValidateResultCondition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validWorkflows(IContext context, workflowinstance.proxies.Workflow _workflow, java.lang.Long _level)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			params.put("Level", _level);
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.ValidWorkflows", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void viewCondition_OpenForm(IContext context, workflowinstance.proxies.Link _link, workflowinstance.proxies.Node _node)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Link", _link == null ? null : _link.getMendixObject());
			params.put("Node", _node == null ? null : _node.getMendixObject());
			Core.execute(context, "WorkflowInstance.ViewCondition_OpenForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean workflowValidationOfNodeAndLinks(IContext context, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.WorkflowValidationOfNodeAndLinks", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean workflowValidations_BC(IContext context, workflowinstance.proxies.Workflow _workflow)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "WorkflowInstance.WorkflowValidations_BC", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}