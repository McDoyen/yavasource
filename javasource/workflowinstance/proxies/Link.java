// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package workflowinstance.proxies;

public class Link
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject linkMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "WorkflowInstance.Link";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		ResetChart("ResetChart"),
		Link_FromNode("WorkflowInstance.Link_FromNode"),
		Link_ToNode("WorkflowInstance.Link_ToNode"),
		ConditionalLink_Condition("WorkflowInstance.ConditionalLink_Condition"),
		Link_Workflow("WorkflowInstance.Link_Workflow");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Link(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "WorkflowInstance.Link"));
	}

	protected Link(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject linkMendixObject)
	{
		if (linkMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("WorkflowInstance.Link", linkMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a WorkflowInstance.Link");

		this.linkMendixObject = linkMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Link.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static workflowinstance.proxies.Link initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return workflowinstance.proxies.Link.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static workflowinstance.proxies.Link initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new workflowinstance.proxies.Link(context, mendixObject);
	}

	public static workflowinstance.proxies.Link load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return workflowinstance.proxies.Link.initialize(context, mendixObject);
	}

	public static java.util.List<workflowinstance.proxies.Link> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<workflowinstance.proxies.Link> result = new java.util.ArrayList<workflowinstance.proxies.Link>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//WorkflowInstance.Link" + xpathConstraint))
			result.add(workflowinstance.proxies.Link.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of ResetChart
	 */
	public final java.lang.Boolean getResetChart()
	{
		return getResetChart(getContext());
	}

	/**
	 * @param context
	 * @return value of ResetChart
	 */
	public final java.lang.Boolean getResetChart(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.ResetChart.toString());
	}

	/**
	 * Set value of ResetChart
	 * @param resetchart
	 */
	public final void setResetChart(java.lang.Boolean resetchart)
	{
		setResetChart(getContext(), resetchart);
	}

	/**
	 * Set value of ResetChart
	 * @param context
	 * @param resetchart
	 */
	public final void setResetChart(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean resetchart)
	{
		getMendixObject().setValue(context, MemberNames.ResetChart.toString(), resetchart);
	}

	/**
	 * @return value of Link_FromNode
	 */
	public final workflowinstance.proxies.Node getLink_FromNode() throws com.mendix.core.CoreException
	{
		return getLink_FromNode(getContext());
	}

	/**
	 * @param context
	 * @return value of Link_FromNode
	 */
	public final workflowinstance.proxies.Node getLink_FromNode(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		workflowinstance.proxies.Node result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Link_FromNode.toString());
		if (identifier != null)
			result = workflowinstance.proxies.Node.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Link_FromNode
	 * @param link_fromnode
	 */
	public final void setLink_FromNode(workflowinstance.proxies.Node link_fromnode)
	{
		setLink_FromNode(getContext(), link_fromnode);
	}

	/**
	 * Set value of Link_FromNode
	 * @param context
	 * @param link_fromnode
	 */
	public final void setLink_FromNode(com.mendix.systemwideinterfaces.core.IContext context, workflowinstance.proxies.Node link_fromnode)
	{
		if (link_fromnode == null)
			getMendixObject().setValue(context, MemberNames.Link_FromNode.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Link_FromNode.toString(), link_fromnode.getMendixObject().getId());
	}

	/**
	 * @return value of Link_ToNode
	 */
	public final workflowinstance.proxies.Node getLink_ToNode() throws com.mendix.core.CoreException
	{
		return getLink_ToNode(getContext());
	}

	/**
	 * @param context
	 * @return value of Link_ToNode
	 */
	public final workflowinstance.proxies.Node getLink_ToNode(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		workflowinstance.proxies.Node result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Link_ToNode.toString());
		if (identifier != null)
			result = workflowinstance.proxies.Node.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Link_ToNode
	 * @param link_tonode
	 */
	public final void setLink_ToNode(workflowinstance.proxies.Node link_tonode)
	{
		setLink_ToNode(getContext(), link_tonode);
	}

	/**
	 * Set value of Link_ToNode
	 * @param context
	 * @param link_tonode
	 */
	public final void setLink_ToNode(com.mendix.systemwideinterfaces.core.IContext context, workflowinstance.proxies.Node link_tonode)
	{
		if (link_tonode == null)
			getMendixObject().setValue(context, MemberNames.Link_ToNode.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Link_ToNode.toString(), link_tonode.getMendixObject().getId());
	}

	/**
	 * @return value of ConditionalLink_Condition
	 */
	public final workflowinstance.proxies.Condition getConditionalLink_Condition() throws com.mendix.core.CoreException
	{
		return getConditionalLink_Condition(getContext());
	}

	/**
	 * @param context
	 * @return value of ConditionalLink_Condition
	 */
	public final workflowinstance.proxies.Condition getConditionalLink_Condition(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		workflowinstance.proxies.Condition result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ConditionalLink_Condition.toString());
		if (identifier != null)
			result = workflowinstance.proxies.Condition.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ConditionalLink_Condition
	 * @param conditionallink_condition
	 */
	public final void setConditionalLink_Condition(workflowinstance.proxies.Condition conditionallink_condition)
	{
		setConditionalLink_Condition(getContext(), conditionallink_condition);
	}

	/**
	 * Set value of ConditionalLink_Condition
	 * @param context
	 * @param conditionallink_condition
	 */
	public final void setConditionalLink_Condition(com.mendix.systemwideinterfaces.core.IContext context, workflowinstance.proxies.Condition conditionallink_condition)
	{
		if (conditionallink_condition == null)
			getMendixObject().setValue(context, MemberNames.ConditionalLink_Condition.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ConditionalLink_Condition.toString(), conditionallink_condition.getMendixObject().getId());
	}

	/**
	 * @return value of Link_Workflow
	 */
	public final workflowinstance.proxies.Workflow getLink_Workflow() throws com.mendix.core.CoreException
	{
		return getLink_Workflow(getContext());
	}

	/**
	 * @param context
	 * @return value of Link_Workflow
	 */
	public final workflowinstance.proxies.Workflow getLink_Workflow(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		workflowinstance.proxies.Workflow result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Link_Workflow.toString());
		if (identifier != null)
			result = workflowinstance.proxies.Workflow.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Link_Workflow
	 * @param link_workflow
	 */
	public final void setLink_Workflow(workflowinstance.proxies.Workflow link_workflow)
	{
		setLink_Workflow(getContext(), link_workflow);
	}

	/**
	 * Set value of Link_Workflow
	 * @param context
	 * @param link_workflow
	 */
	public final void setLink_Workflow(com.mendix.systemwideinterfaces.core.IContext context, workflowinstance.proxies.Workflow link_workflow)
	{
		if (link_workflow == null)
			getMendixObject().setValue(context, MemberNames.Link_Workflow.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Link_Workflow.toString(), link_workflow.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return linkMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final workflowinstance.proxies.Link that = (workflowinstance.proxies.Link) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "WorkflowInstance.Link";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
