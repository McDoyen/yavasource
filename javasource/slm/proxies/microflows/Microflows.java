// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package slm.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the SLM module
	public static void addSelectedContractsToExport(IContext context, java.util.List<slm.proxies.Contract> _objectList, importexport.proxies.DataPatchSet _dataPatchSet)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_objectList = null;
			if (_objectList != null)
			{
				listparam_objectList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Contract obj : _objectList)
					listparam_objectList.add(obj.getMendixObject());
			}
			params.put("ObjectList", listparam_objectList);
			params.put("DataPatchSet", _dataPatchSet == null ? null : _dataPatchSet.getMendixObject());
			Core.execute(context, "SLM.addSelectedContractsToExport", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void apply_Contract(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.Apply_Contract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditAttributeValue_AfterCommit(IContext context, slm.proxies.AttributeValue _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditAttributeValue_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditAttributeValue_AfterDelete(IContext context, slm.proxies.AttributeValue _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditAttributeValue_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditContract_AfterCommit(IContext context, slm.proxies.Contract _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditContract_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditContract_AfterDelete(IContext context, slm.proxies.Contract _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditContract_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditContractAttachment_AfterCommit(IContext context, slm.proxies.ContractAttachment _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditContractAttachment_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditContractAttachment_AfterDelete(IContext context, slm.proxies.ContractAttachment _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditContractAttachment_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditImpact_AfterCommit(IContext context, slm.proxies.Impact _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditImpact_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditImpact_AfterDelete(IContext context, slm.proxies.Impact _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditImpact_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditImpact_GetAuditRecord(IContext context, slm.proxies.Impact _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditImpact_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditIUP_AfterCommit(IContext context, slm.proxies.IUP_Combination _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditIUP_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditIUP_AfterDelete(IContext context, slm.proxies.IUP_Combination _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditIUP_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditIUP_GetAuditRecord(IContext context, slm.proxies.IUP_Combination _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditIUP_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditPriority_AfterCommit(IContext context, slm.proxies.Priority _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditPriority_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditPriority_AfterDelete(IContext context, slm.proxies.Priority _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditPriority_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditPriority_GetAuditRecord(IContext context, slm.proxies.Priority _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditPriority_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditScreenblock_AfterCommit(IContext context, slm.proxies.ScreenBlock _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditScreenblock_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditScreenblock_AfterDelete(IContext context, slm.proxies.ScreenBlock _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditScreenblock_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditScreenBlockAttribute_AfterCommit(IContext context, slm.proxies.ScreenBlockAttribute _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditScreenBlockAttribute_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditScreenBlockAttribute_AfterDelete(IContext context, slm.proxies.ScreenBlockAttribute _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditScreenBlockAttribute_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditService_AfterCommit(IContext context, slm.proxies.Service _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditService_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditService_AfterDelete(IContext context, slm.proxies.Service _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditService_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditService_GetAuditRecord(IContext context, slm.proxies.Service _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditService_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditServiceMatrix_AfterCommit(IContext context, slm.proxies.ServiceMatrix _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditServiceMatrix_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditServiceMatrix_AfterDelete(IContext context, slm.proxies.ServiceMatrix _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditServiceMatrix_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditServiceProcess_AfterCommit(IContext context, slm.proxies.Service_Process _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditServiceProcess_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditServiceProcess_AfterDelete(IContext context, slm.proxies.Service_Process _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditServiceProcess_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditServiceProcess_GetAuditRecord(IContext context, slm.proxies.Service_Process _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditServiceProcess_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditServiceProcessMatrix_AfterCommit(IContext context, slm.proxies.ServiceProcessMatrix _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditServiceProcessMatrix_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditServiceProcessMatrix_AfterDelete(IContext context, slm.proxies.ServiceProcessMatrix _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditServiceProcessMatrix_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * [1125476] Add Release Date to startpanel grid.
	 */
	public static void auditSPAttribute_AfterCommit(IContext context, slm.proxies.SPAttribute _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditSPAttribute_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditSPAttribute_AfterDelete(IContext context, slm.proxies.SPAttribute _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditSPAttribute_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditSPAttributeValue_AfterCommit(IContext context, slm.proxies.SPAttributeValue _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditSPAttributeValue_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditSPAttributeValue_AfterDelete(IContext context, slm.proxies.SPAttributeValue _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditSPAttributeValue_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditSPDefinitionAttribute_AfterCommit(IContext context, slm.proxies.SPDefinitionAttribute _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditSPDefinitionAttribute_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditSPDefinitionAttribute_AfterDelete(IContext context, slm.proxies.SPDefinitionAttribute _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditSPDefinitionAttribute_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditSPScreenblock_AfterCommit(IContext context, slm.proxies.SPScreenBlock _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditSPScreenblock_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditSPScreenblock_AfterDelete(IContext context, slm.proxies.SPScreenBlock _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditSPScreenblock_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditUrgency_AfterCommit(IContext context, slm.proxies.Urgency _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditUrgency_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditUrgency_AfterDelete(IContext context, slm.proxies.Urgency _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.AuditUrgency_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditUrgency_GetAuditRecord(IContext context, slm.proxies.Urgency _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "SLM.AuditUrgency_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bC_Contract(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.BC_Contract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean cAc_AttributeIsSelectable(IContext context, slm.proxies.ScreenBlockAttribute _inputScreenBlockAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputScreenBlockAttribute", _inputScreenBlockAttribute == null ? null : _inputScreenBlockAttribute.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.CAc_AttributeIsSelectable", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean calcIUPCombinationHasCommitment(IContext context, slm.proxies.IUP_Combination _iUP_Combination)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IUP_Combination", _iUP_Combination == null ? null : _iUP_Combination.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.calcIUPCombinationHasCommitment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean calcServiceHasCommitment(IContext context, slm.proxies.Service _service)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.calcServiceHasCommitment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean calcServiceProcessHasCommitment(IContext context, slm.proxies.Service_Process _service_Process)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service_Process", _service_Process == null ? null : _service_Process.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.calcServiceProcessHasCommitment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cancelNewContractWizard(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.CancelNewContractWizard", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String check_Commitment_Filled_CI(IContext context, java.util.List<cmdb.proxies.ConfigurationItem> _configurationItemList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_configurationItemList = null;
			if (_configurationItemList != null)
			{
				listparam_configurationItemList = new java.util.ArrayList<IMendixObject>();
				for (cmdb.proxies.ConfigurationItem obj : _configurationItemList)
					listparam_configurationItemList.add(obj.getMendixObject());
			}
			params.put("ConfigurationItemList", listparam_configurationItemList);
			return (java.lang.String)Core.execute(context, "SLM.Check_Commitment_Filled_CI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String check_Commitments_Filled_IUP(IContext context, java.util.List<slm.proxies.IUP_Combination> _uIPList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_uIPList = null;
			if (_uIPList != null)
			{
				listparam_uIPList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.IUP_Combination obj : _uIPList)
					listparam_uIPList.add(obj.getMendixObject());
			}
			params.put("UIPList", listparam_uIPList);
			return (java.lang.String)Core.execute(context, "SLM.Check_Commitments_Filled_IUP", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String check_Commitments_Filled_Service(IContext context, java.util.List<slm.proxies.Service> _serviceList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_serviceList = null;
			if (_serviceList != null)
			{
				listparam_serviceList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Service obj : _serviceList)
					listparam_serviceList.add(obj.getMendixObject());
			}
			params.put("ServiceList", listparam_serviceList);
			return (java.lang.String)Core.execute(context, "SLM.Check_Commitments_Filled_Service", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String check_Commitments_Filled_Service_Process(IContext context, java.util.List<slm.proxies.Service_Process> _service_ProcessList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_service_ProcessList = null;
			if (_service_ProcessList != null)
			{
				listparam_service_ProcessList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Service_Process obj : _service_ProcessList)
					listparam_service_ProcessList.add(obj.getMendixObject());
			}
			params.put("Service_ProcessList", listparam_service_ProcessList);
			return (java.lang.String)Core.execute(context, "SLM.Check_Commitments_Filled_Service_Process", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean check_Contract_Form_Dirty(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.Check_Contract_Form_Dirty", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean check_PortalQuickCall(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.Check_PortalQuickCall", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkSRMDefaultContracForOrganisation(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.CheckSRMDefaultContracForOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkSRMDefaultContract(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.CheckSRMDefaultContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * Ticket #2957:
	 * Swapped the 'Default SRM?' and the 'Commitment by' checks.
	 * This way SRM contracts not for the webshop can use all types of commitments.
	 */
	public static boolean contract_Validation(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.Contract_Validation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_FinishFromIUP(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_FinishFromIUP", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_NextFromCI(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_NextFromCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_NextFromDeliveringOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_NextFromDeliveringOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_NextFromGeneral(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_NextFromGeneral", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_NextFromReceivingOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_NextFromReceivingOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_NextFromServiceProcesses(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_NextFromServiceProcesses", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_NextFromServices(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_NextFromServices", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_PreviousFromCI(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_PreviousFromCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_PreviousFromDeliveringOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_PreviousFromDeliveringOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_PreviousFromIUP(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_PreviousFromIUP", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_PreviousFromReceivingOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_PreviousFromReceivingOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_PreviousFromServiceProcess(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_PreviousFromServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void contractWizard_PreviousFromServices(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.ContractWizard_PreviousFromServices", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copy_SPRelationType(IContext context, slm.proxies.SPRelationType _sPRelationType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPRelationType", _sPRelationType == null ? null : _sPRelationType.getMendixObject());
			Core.execute(context, "SLM.Copy_SPRelationType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copy_SPRelationType_List(IContext context, java.util.List<slm.proxies.SPRelationType> _sPRelationTypeList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_sPRelationTypeList = null;
			if (_sPRelationTypeList != null)
			{
				listparam_sPRelationTypeList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.SPRelationType obj : _sPRelationTypeList)
					listparam_sPRelationTypeList.add(obj.getMendixObject());
			}
			params.put("SPRelationTypeList", listparam_sPRelationTypeList);
			Core.execute(context, "SLM.Copy_SPRelationType_List", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyContract(IContext context, slm.proxies.Contract _contracts)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contracts", _contracts == null ? null : _contracts.getMendixObject());
			Core.execute(context, "SLM.CopyContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyContractList(IContext context, java.util.List<slm.proxies.Contract> _contractList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_contractList = null;
			if (_contractList != null)
			{
				listparam_contractList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Contract obj : _contractList)
					listparam_contractList.add(obj.getMendixObject());
			}
			params.put("ContractList", listparam_contractList);
			Core.execute(context, "SLM.CopyContractList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyIUP(IContext context, slm.proxies.IUP_Combination _iUP)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IUP", _iUP == null ? null : _iUP.getMendixObject());
			Core.execute(context, "SLM.CopyIUP", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyIUPList(IContext context, java.util.List<slm.proxies.IUP_Combination> _iUPList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_iUPList = null;
			if (_iUPList != null)
			{
				listparam_iUPList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.IUP_Combination obj : _iUPList)
					listparam_iUPList.add(obj.getMendixObject());
			}
			params.put("IUPList", listparam_iUPList);
			Core.execute(context, "SLM.CopyIUPList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyServiceList(IContext context, java.util.List<slm.proxies.Service> _serviceList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_serviceList = null;
			if (_serviceList != null)
			{
				listparam_serviceList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Service obj : _serviceList)
					listparam_serviceList.add(obj.getMendixObject());
			}
			params.put("ServiceList", listparam_serviceList);
			Core.execute(context, "SLM.CopyServiceList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyServiceProcess(IContext context, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.CopyServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyServiceProcessList(IContext context, java.util.List<slm.proxies.Service_Process> _serviceProcessList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_serviceProcessList = null;
			if (_serviceProcessList != null)
			{
				listparam_serviceProcessList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Service_Process obj : _serviceProcessList)
					listparam_serviceProcessList.add(obj.getMendixObject());
			}
			params.put("ServiceProcessList", listparam_serviceProcessList);
			Core.execute(context, "SLM.CopyServiceProcessList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createAndOpenNewContract(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.CreateAndOpenNewContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void determineMoreCIs(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.determineMoreCIs", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void determineMoreDeliveringOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.determineMoreDeliveringOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void determineMoreIUPs(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.determineMoreIUPs", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void determineMoreReceivingOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.determineMoreReceivingOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void determineMoreServices(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.determineMoreServices", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void determineMoreServicesProcesses(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.determineMoreServicesProcesses", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void downloadAttachment(IContext context, slm.proxies.ServiceProcessDoc _serviceProcessDoc)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcessDoc", _serviceProcessDoc == null ? null : _serviceProcessDoc.getMendixObject());
			Core.execute(context, "SLM.DownloadAttachment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> dS_ContractAddedBusinessOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DS_ContractAddedBusinessOrganisations", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<cmdb.proxies.ConfigurationItem> dS_ContractAddedCIs(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DS_ContractAddedCIs", params);
			java.util.List<cmdb.proxies.ConfigurationItem> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<cmdb.proxies.ConfigurationItem>();
				for (IMendixObject obj : objs)
					result.add(cmdb.proxies.ConfigurationItem.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> dS_ContractAddedReceivingOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DS_ContractAddedReceivingOrganisations", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service> dS_ContractAddedServices(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DS_ContractAddedServices", params);
			java.util.List<slm.proxies.Service> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> dS_ContractAvailableBusinessOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DS_ContractAvailableBusinessOrganisations", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<cmdb.proxies.ConfigurationItem> dS_ContractAvailableCIs(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DS_ContractAvailableCIs", params);
			java.util.List<cmdb.proxies.ConfigurationItem> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<cmdb.proxies.ConfigurationItem>();
				for (IMendixObject obj : objs)
					result.add(cmdb.proxies.ConfigurationItem.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<nap.proxies.Organisation> dS_ContractAvailableReceivingOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DS_ContractAvailableReceivingOrganisations", params);
			java.util.List<nap.proxies.Organisation> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<nap.proxies.Organisation>();
				for (IMendixObject obj : objs)
					result.add(nap.proxies.Organisation.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service> dS_ContractAvailableServices(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DS_ContractAvailableServices", params);
			java.util.List<slm.proxies.Service> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service_Process> dS_ContractAvailableServicesProcesses(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DS_ContractAvailableServicesProcesses", params);
			java.util.List<slm.proxies.Service_Process> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service_Process>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service_Process.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.IUP_Combination> dS_ContractAvailableUIPs(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DS_ContractAvailableUIPs", params);
			java.util.List<slm.proxies.IUP_Combination> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.IUP_Combination>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.IUP_Combination.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.SPDefinitionAttribute> dSc_GeAttributesByServiceProcess(IContext context, slm.proxies.Service_Process _inputServiceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputServiceProcess", _inputServiceProcess == null ? null : _inputServiceProcess.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DSc_GeAttributesByServiceProcess", params);
			java.util.List<slm.proxies.SPDefinitionAttribute> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.SPDefinitionAttribute>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.SPDefinitionAttribute.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.ScreenBlockAttribute> dSc_GetScreenBlockAttributesByScreenBlock(IContext context, slm.proxies.ScreenBlock _inputScreenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputScreenBlock", _inputScreenBlock == null ? null : _inputScreenBlock.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DSc_GetScreenBlockAttributesByScreenBlock", params);
			java.util.List<slm.proxies.ScreenBlockAttribute> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.ScreenBlockAttribute>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.ScreenBlockAttribute.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String dSo_GetCIForContract(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			return (java.lang.String)Core.execute(context, "SLM.DSo_GetCIForContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String dSo_GetDeliveringForContract(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			return (java.lang.String)Core.execute(context, "SLM.DSo_GetDeliveringForContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String dSo_GetIUPForContract(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			return (java.lang.String)Core.execute(context, "SLM.DSo_GetIUPForContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String dSo_GetReceivingForContract(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			return (java.lang.String)Core.execute(context, "SLM.DSo_GetReceivingForContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String dSo_GetServiceForContract(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			return (java.lang.String)Core.execute(context, "SLM.DSo_GetServiceForContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String dSo_GetServiceProcessForContract(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			return (java.lang.String)Core.execute(context, "SLM.DSo_GetServiceProcessForContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.Service_Process> dSo_NewSPRelDefs(IContext context, slm.proxies.SPAllowedRelation _sPAllowedRelation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPAllowedRelation", _sPAllowedRelation == null ? null : _sPAllowedRelation.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DSo_NewSPRelDefs", params);
			java.util.List<slm.proxies.Service_Process> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.Service_Process>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.Service_Process.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<slm.proxies.AttributeValue> dSO_SPDefinitionDefaultvalues(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.DSO_SPDefinitionDefaultvalues", params);
			java.util.List<slm.proxies.AttributeValue> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<slm.proxies.AttributeValue>();
				for (IMendixObject obj : objs)
					result.add(slm.proxies.AttributeValue.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void editContractGeneralInformation(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.EditContractGeneralInformation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void exportSelectedContracts(IContext context, java.util.List<slm.proxies.Contract> _objectList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_objectList = null;
			if (_objectList != null)
			{
				listparam_objectList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Contract obj : _objectList)
					listparam_objectList.add(obj.getMendixObject());
			}
			params.put("ObjectList", listparam_objectList);
			Core.execute(context, "SLM.ExportSelectedContracts", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void exportSelectedContracts_Advanced(IContext context, java.util.List<slm.proxies.Contract> _objectList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_objectList = null;
			if (_objectList != null)
			{
				listparam_objectList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Contract obj : _objectList)
					listparam_objectList.add(obj.getMendixObject());
			}
			params.put("ObjectList", listparam_objectList);
			Core.execute(context, "SLM.ExportSelectedContracts_Advanced", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean field_Contract_Expired(IContext context, slm.proxies.Contract _contracts)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contracts", _contracts == null ? null : _contracts.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.Field_Contract_Expired", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean fill_ContractAttachmentName(IContext context, slm.proxies.ContractAttachment _attachment)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Attachment", _attachment == null ? null : _attachment.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.Fill_ContractAttachmentName", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void fillAddedGrid(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.FillAddedGrid", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void fillAvailableGrid(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.FillAvailableGrid", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean generate_IUP_Combination_Name(IContext context, slm.proxies.IUP_Combination _iUP_Combination)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IUP_Combination", _iUP_Combination == null ? null : _iUP_Combination.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.Generate_IUP_Combination_Name", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long getFilteredAddedRowCount(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Long)Core.execute(context, "SLM.GetFilteredAddedRowCount", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long getFilteredAvailableRowCount(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Long)Core.execute(context, "SLM.GetFilteredAvailableRowCount", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<statetransition.proxies.Matrix> getMatricesForService(IContext context, slm.proxies.ServiceMatrix _serviceMatrix)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceMatrix", _serviceMatrix == null ? null : _serviceMatrix.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.getMatricesForService", params);
			java.util.List<statetransition.proxies.Matrix> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<statetransition.proxies.Matrix>();
				for (IMendixObject obj : objs)
					result.add(statetransition.proxies.Matrix.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<statetransition.proxies.Matrix> getMatricesForServiceProcess(IContext context, slm.proxies.ServiceProcessMatrix _serviceProcessMatrix)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcessMatrix", _serviceProcessMatrix == null ? null : _serviceProcessMatrix.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "SLM.getMatricesForServiceProcess", params);
			java.util.List<statetransition.proxies.Matrix> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<statetransition.proxies.Matrix>();
				for (IMendixObject obj : objs)
					result.add(statetransition.proxies.Matrix.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static slm.proxies.ContractValidator getRefreshContractValidator(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "SLM.getRefreshContractValidator", params);
			return result == null ? null : slm.proxies.ContractValidator.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void getRefreshContractValidatorForAccount(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.getRefreshContractValidatorForAccount", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean indexPriority_BeforeCommit(IContext context, slm.proxies.Priority _priority)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Priority", _priority == null ? null : _priority.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.IndexPriority_BeforeCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean indexService_BeforeCommit(IContext context, slm.proxies.Service _service)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.IndexService_BeforeCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddAllSelectableCIs(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_AddAllSelectableCIs", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddAllSelectableDeliveringOrganisation(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_AddAllSelectableDeliveringOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddAllSelectableReceivingOrganisation(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_AddAllSelectableReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddAllSelectableServices(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_AddAllSelectableServices", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddCI(IContext context, slm.proxies.Contract _contract, java.util.List<cmdb.proxies.ConfigurationItem> _cIList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_cIList = null;
			if (_cIList != null)
			{
				listparam_cIList = new java.util.ArrayList<IMendixObject>();
				for (cmdb.proxies.ConfigurationItem obj : _cIList)
					listparam_cIList.add(obj.getMendixObject());
			}
			params.put("CIList", listparam_cIList);
			Core.execute(context, "SLM.IVK_AddCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddDelivering(IContext context, slm.proxies.Contract _contract, java.util.List<nap.proxies.Organisation> _deliveringList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_deliveringList = null;
			if (_deliveringList != null)
			{
				listparam_deliveringList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Organisation obj : _deliveringList)
					listparam_deliveringList.add(obj.getMendixObject());
			}
			params.put("DeliveringList", listparam_deliveringList);
			Core.execute(context, "SLM.IVK_AddDelivering", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddIUP(IContext context, slm.proxies.Contract _inputContract, java.util.List<slm.proxies.IUP_Combination> _inputIUPList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_inputIUPList = null;
			if (_inputIUPList != null)
			{
				listparam_inputIUPList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.IUP_Combination obj : _inputIUPList)
					listparam_inputIUPList.add(obj.getMendixObject());
			}
			params.put("InputIUPList", listparam_inputIUPList);
			Core.execute(context, "SLM.IVK_AddIUP", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddProcessDocument(IContext context, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_AddProcessDocument", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddReceivingOrganisation(IContext context, slm.proxies.Contract _contract, java.util.List<nap.proxies.Organisation> _receivingOrganisationList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_receivingOrganisationList = null;
			if (_receivingOrganisationList != null)
			{
				listparam_receivingOrganisationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Organisation obj : _receivingOrganisationList)
					listparam_receivingOrganisationList.add(obj.getMendixObject());
			}
			params.put("ReceivingOrganisationList", listparam_receivingOrganisationList);
			Core.execute(context, "SLM.IVK_AddReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddScreenBlock_ServiceProcess(IContext context, slm.proxies.Service_Process _inputServiceProcessDefinition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputServiceProcessDefinition", _inputServiceProcessDefinition == null ? null : _inputServiceProcessDefinition.getMendixObject());
			Core.execute(context, "SLM.IVK_AddScreenBlock_ServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddService(IContext context, slm.proxies.Contract _contract, java.util.List<slm.proxies.Service> _serviceList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_serviceList = null;
			if (_serviceList != null)
			{
				listparam_serviceList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Service obj : _serviceList)
					listparam_serviceList.add(obj.getMendixObject());
			}
			params.put("ServiceList", listparam_serviceList);
			Core.execute(context, "SLM.IVK_AddService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AddServiceProcess(IContext context, slm.proxies.Contract _inputContract, java.util.List<slm.proxies.Service_Process> _inputServiceProcessList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_inputServiceProcessList = null;
			if (_inputServiceProcessList != null)
			{
				listparam_inputServiceProcessList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Service_Process obj : _inputServiceProcessList)
					listparam_inputServiceProcessList.add(obj.getMendixObject());
			}
			params.put("InputServiceProcessList", listparam_inputServiceProcessList);
			Core.execute(context, "SLM.IVK_AddServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ApplyAddedFilter(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_ApplyAddedFilter", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ApplyAvailableFilter(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_ApplyAvailableFilter", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Attribute_Overview_Close(IContext context, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_Attribute_Overview_Close", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 922741: Fix to refresh service after rollback
	 */
	public static void iVK_BusinessServiceCancel(IContext context, slm.proxies.Service _service)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			Core.execute(context, "SLM.IVK_BusinessServiceCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 922741: Add ability to define color per service (textcolor in master/detail view)
	 * -Added color validation before save
	 */
	public static boolean iVK_BusinessServiceSave(IContext context, slm.proxies.Service _service)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.IVK_BusinessServiceSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 922741: Add ability to define color per service (textcolor in master/detail view)
	 * -Use subflow to save
	 */
	public static void iVK_BusinessServiceSaveAndClose(IContext context, slm.proxies.Service _service)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			Core.execute(context, "SLM.IVK_BusinessServiceSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_Commitments(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_Commitments", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_Contracts(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_Contracts", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_Holidays(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_Holidays", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_Impacts(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_Impacts", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_IUP_Combination(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_IUP_Combination", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_Priority(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_Priority", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_Relation_Types(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_Relation_Types", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_Service_Process(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_Service_Process", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_Services(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_Services", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_Urgencies(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_Urgencies", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_Open_Working_Hours(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.IVK_Button_Open_Working_Hours", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CancelAttributeEdit(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			Core.execute(context, "SLM.IVK_CancelAttributeEdit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CancelContractPopup(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_CancelContractPopup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CancelSPDefAttribute(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			Core.execute(context, "SLM.IVK_CancelSPDefAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseCI_Check(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_CloseCI_Check", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseDelivering_Check(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_CloseDelivering_Check", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseIUP_Check(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_CloseIUP_Check", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseReceiving_Check(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_CloseReceiving_Check", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseService_Check(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_CloseService_Check", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseServiceProcess_Check(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_CloseServiceProcess_Check", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CloseServiceProcessDocDialog(IContext context, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_CloseServiceProcessDocDialog", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Contract_Cancel(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_Contract_Cancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CopyAttribute(IContext context, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_CopyAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CopySelectedAttribute(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_CopySelectedAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CopyService(IContext context, slm.proxies.Service _service)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			Core.execute(context, "SLM.IVK_CopyService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DeleteAttachment(IContext context, slm.proxies.ServiceProcessDoc _serviceProcessDoc, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcessDoc", _serviceProcessDoc == null ? null : _serviceProcessDoc.getMendixObject());
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_DeleteAttachment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DeleteAttribute(IContext context, slm.proxies.AttributeValue _attributeValue)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("AttributeValue", _attributeValue == null ? null : _attributeValue.getMendixObject());
			Core.execute(context, "SLM.IVK_DeleteAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DeleteBlock_ServiceProcess(IContext context, slm.proxies.ScreenBlock _screenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScreenBlock", _screenBlock == null ? null : _screenBlock.getMendixObject());
			Core.execute(context, "SLM.IVK_DeleteBlock_ServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DeleteSPAllowedRelation(IContext context, slm.proxies.SPAllowedRelation _sPAllowedRelation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPAllowedRelation", _sPAllowedRelation == null ? null : _sPAllowedRelation.getMendixObject());
			Core.execute(context, "SLM.IVK_DeleteSPAllowedRelation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DeleteSPAtt(IContext context, slm.proxies.SPDefinitionAttribute _inputSPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputSPDefinitionAttribute", _inputSPDefinitionAttribute == null ? null : _inputSPDefinitionAttribute.getMendixObject());
			Core.execute(context, "SLM.IVK_DeleteSPAtt", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DeleteSPRelationType(IContext context, java.util.List<slm.proxies.SPRelationType> _sPRelationTypeList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_sPRelationTypeList = null;
			if (_sPRelationTypeList != null)
			{
				listparam_sPRelationTypeList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.SPRelationType obj : _sPRelationTypeList)
					listparam_sPRelationTypeList.add(obj.getMendixObject());
			}
			params.put("SPRelationTypeList", listparam_sPRelationTypeList);
			Core.execute(context, "SLM.IVK_DeleteSPRelationType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_EditBlockName(IContext context, slm.proxies.ScreenBlock _screenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScreenBlock", _screenBlock == null ? null : _screenBlock.getMendixObject());
			Core.execute(context, "SLM.IVK_EditBlockName", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_EditContract(IContext context, java.util.List<slm.proxies.Contract> _contractList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_contractList = null;
			if (_contractList != null)
			{
				listparam_contractList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Contract obj : _contractList)
					listparam_contractList.add(obj.getMendixObject());
			}
			params.put("ContractList", listparam_contractList);
			Core.execute(context, "SLM.IVK_EditContract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_EditSPAttribute_Dialog(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			Core.execute(context, "SLM.IVK_EditSPAttribute_Dialog", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GetFirstAddedChunk(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_GetFirstAddedChunk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GetFirstAvailableChunk(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_GetFirstAvailableChunk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GetLastAddedChunk(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_GetLastAddedChunk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GetLastAvailableChunk(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_GetLastAvailableChunk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GetNextAddedChunk(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_GetNextAddedChunk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GetNextAvailableChunk(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_GetNextAvailableChunk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GetPreviousAddedChunk(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_GetPreviousAddedChunk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GetPreviousAvailableChunk(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_GetPreviousAvailableChunk", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImpactCancel(IContext context, slm.proxies.Impact _impact)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Impact", _impact == null ? null : _impact.getMendixObject());
			Core.execute(context, "SLM.IVK_ImpactCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImpactSave(IContext context, slm.proxies.Impact _impact)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Impact", _impact == null ? null : _impact.getMendixObject());
			Core.execute(context, "SLM.IVK_ImpactSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImpactSaveAndClose(IContext context, slm.proxies.Impact _impact)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Impact", _impact == null ? null : _impact.getMendixObject());
			Core.execute(context, "SLM.IVK_ImpactSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IUPCombinationCancel(IContext context, slm.proxies.IUP_Combination _iUP_Combination)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IUP_Combination", _iUP_Combination == null ? null : _iUP_Combination.getMendixObject());
			Core.execute(context, "SLM.IVK_IUPCombinationCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IUPCombinationSave(IContext context, slm.proxies.IUP_Combination _iUP_Combination)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IUP_Combination", _iUP_Combination == null ? null : _iUP_Combination.getMendixObject());
			Core.execute(context, "SLM.IVK_IUPCombinationSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IUPCombinationSaveAndClose(IContext context, slm.proxies.IUP_Combination _iUP_Combination)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IUP_Combination", _iUP_Combination == null ? null : _iUP_Combination.getMendixObject());
			Core.execute(context, "SLM.IVK_IUPCombinationSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ManageAttributes_ServiceProcess(IContext context, slm.proxies.ScreenBlock _inputScreenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputScreenBlock", _inputScreenBlock == null ? null : _inputScreenBlock.getMendixObject());
			Core.execute(context, "SLM.IVK_ManageAttributes_ServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_NewSPDefinitionAttribute(IContext context, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_NewSPDefinitionAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_NewSPDefinitionAttribute_FromBlock(IContext context, slm.proxies.ScreenBlock _screenblock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Screenblock", _screenblock == null ? null : _screenblock.getMendixObject());
			Core.execute(context, "SLM.IVK_NewSPDefinitionAttribute_FromBlock", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenAddContractAttachment(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenAddContractAttachment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenAddContractPortalRequest(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenAddContractPortalRequest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenAutoClose(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenAutoClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenContractAttachment(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenContractAttachment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenContractInfo(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenContractInfo", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenContractPortalRequest(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenContractPortalRequest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenEditAttachment(IContext context, slm.proxies.ServiceProcessDoc _serviceProcessDoc)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcessDoc", _serviceProcessDoc == null ? null : _serviceProcessDoc.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenEditAttachment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenEditCI(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenEditCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenEditDelivering(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenEditDelivering", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenEditIUP(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenEditIUP", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenEditReceivingOrganisation(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenEditReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenEditService(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenEditService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenEditServiceProcess(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenEditServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenSpecializedOrganisation_Popup(IContext context, java.util.List<nap.proxies.Organisation> _organisationList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_organisationList = null;
			if (_organisationList != null)
			{
				listparam_organisationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Organisation obj : _organisationList)
					listparam_organisationList.add(obj.getMendixObject());
			}
			params.put("OrganisationList", listparam_organisationList);
			Core.execute(context, "SLM.IVK_OpenSpecializedOrganisation_Popup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenViewAllContractCI(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenViewAllContractCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenViewAllDelivering(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenViewAllDelivering", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenViewAllIUP(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenViewAllIUP", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenViewAllReceivingOrganisation(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenViewAllReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenViewAllService(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenViewAllService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenViewAllServiceProcess(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_OpenViewAllServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_PriorityCancel(IContext context, slm.proxies.Priority _priority)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Priority", _priority == null ? null : _priority.getMendixObject());
			Core.execute(context, "SLM.IVK_PriorityCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_PrioritySave(IContext context, slm.proxies.Priority _priority)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Priority", _priority == null ? null : _priority.getMendixObject());
			Core.execute(context, "SLM.IVK_PrioritySave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_PrioritySaveAndClose(IContext context, slm.proxies.Priority _priority)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Priority", _priority == null ? null : _priority.getMendixObject());
			Core.execute(context, "SLM.IVK_PrioritySaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RemoveAllSelectableCIs(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_RemoveAllSelectableCIs", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RemoveAllSelectableDeliveringOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_RemoveAllSelectableDeliveringOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * [3049] Removed loop to iterate over organisations, and remove the contract from the association 'ReceivingOrganisations_Contract'. Changed Change object for the contract to remove the contracts from the same association.
	 * 
	 * [3452] Undo changes made in this microflow by Patch 3049.
	 * Reinstate the loop and remove the contract from organisations side.
	 * 
	 * Fetch organisations from the Temp-association, for all removed organisations, check if it was part of the TempList. Only if it was part of the Temp list, set the temp association again on the organisation. Do not set it for other organisations (relation is used for rollbacks on cancel).
	 * 
	 * List of organisations was retrieved from the database. After the changes made in the loop for each organisation, the contract cannot use the temp-relation as it appears to be reset.
	 */
	public static void iVK_RemoveAllSelectableReceivingOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_RemoveAllSelectableReceivingOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RemoveAllSelectableServices(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_RemoveAllSelectableServices", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RemoveCI(IContext context, slm.proxies.Contract _contract, java.util.List<cmdb.proxies.ConfigurationItem> _cIList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_cIList = null;
			if (_cIList != null)
			{
				listparam_cIList = new java.util.ArrayList<IMendixObject>();
				for (cmdb.proxies.ConfigurationItem obj : _cIList)
					listparam_cIList.add(obj.getMendixObject());
			}
			params.put("CIList", listparam_cIList);
			Core.execute(context, "SLM.IVK_RemoveCI", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RemoveDelivering(IContext context, slm.proxies.Contract _contract, java.util.List<nap.proxies.Organisation> _deliveringList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_deliveringList = null;
			if (_deliveringList != null)
			{
				listparam_deliveringList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Organisation obj : _deliveringList)
					listparam_deliveringList.add(obj.getMendixObject());
			}
			params.put("DeliveringList", listparam_deliveringList);
			Core.execute(context, "SLM.IVK_RemoveDelivering", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RemoveIUP(IContext context, slm.proxies.Contract _inputContract, java.util.List<slm.proxies.IUP_Combination> _inputIUPList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_inputIUPList = null;
			if (_inputIUPList != null)
			{
				listparam_inputIUPList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.IUP_Combination obj : _inputIUPList)
					listparam_inputIUPList.add(obj.getMendixObject());
			}
			params.put("InputIUPList", listparam_inputIUPList);
			Core.execute(context, "SLM.IVK_RemoveIUP", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RemoveReceivingOrganisation(IContext context, slm.proxies.Contract _contract, java.util.List<nap.proxies.Organisation> _receivingOrganisationList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_receivingOrganisationList = null;
			if (_receivingOrganisationList != null)
			{
				listparam_receivingOrganisationList = new java.util.ArrayList<IMendixObject>();
				for (nap.proxies.Organisation obj : _receivingOrganisationList)
					listparam_receivingOrganisationList.add(obj.getMendixObject());
			}
			params.put("ReceivingOrganisationList", listparam_receivingOrganisationList);
			Core.execute(context, "SLM.IVK_RemoveReceivingOrganisation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RemoveService(IContext context, slm.proxies.Contract _contract, java.util.List<slm.proxies.Service> _serviceList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_serviceList = null;
			if (_serviceList != null)
			{
				listparam_serviceList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Service obj : _serviceList)
					listparam_serviceList.add(obj.getMendixObject());
			}
			params.put("ServiceList", listparam_serviceList);
			Core.execute(context, "SLM.IVK_RemoveService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RemoveServiceProcess(IContext context, slm.proxies.Contract _inputContract, java.util.List<slm.proxies.Service_Process> _inputServiceProcessList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_inputServiceProcessList = null;
			if (_inputServiceProcessList != null)
			{
				listparam_inputServiceProcessList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.Service_Process obj : _inputServiceProcessList)
					listparam_inputServiceProcessList.add(obj.getMendixObject());
			}
			params.put("InputServiceProcessList", listparam_inputServiceProcessList);
			Core.execute(context, "SLM.IVK_RemoveServiceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ResetAddedFilter(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_ResetAddedFilter", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ResetAvailableFilter(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_ResetAvailableFilter", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Save_Contract(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_Save_Contract", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Save_Contract_General(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_Save_Contract_General", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveAndAddNew(IContext context, slm.proxies.AttributeValue _inputAttributeValue)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputAttributeValue", _inputAttributeValue == null ? null : _inputAttributeValue.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveAndAddNew", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveAttributeValue(IContext context, slm.proxies.AttributeValue _attributeValue)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("AttributeValue", _attributeValue == null ? null : _attributeValue.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveAttributeValue", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveContractPopup(IContext context, slm.proxies.Contract _inputContract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContract", _inputContract == null ? null : _inputContract.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveContractPopup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveEditAttribute(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveEditAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveEditNewAttributeValue(IContext context, slm.proxies.AttributeValue _attributeValue)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("AttributeValue", _attributeValue == null ? null : _attributeValue.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveEditNewAttributeValue", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveEditScreenblock(IContext context, slm.proxies.ScreenBlock _screenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScreenBlock", _screenBlock == null ? null : _screenBlock.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveEditScreenblock", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveEditSPAllowedRelation(IContext context, slm.proxies.SPAllowedRelation _sPAllowedRelation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPAllowedRelation", _sPAllowedRelation == null ? null : _sPAllowedRelation.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveEditSPAllowedRelation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveEditSPRelationType(IContext context, slm.proxies.NewEditSPRelationType _inputNewSPRelationType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputNewSPRelationType", _inputNewSPRelationType == null ? null : _inputNewSPRelationType.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveEditSPRelationType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveNewAttribue(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveNewAttribue", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveNewBlock_SeviceProcess(IContext context, slm.proxies.ScreenBlock _screenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScreenBlock", _screenBlock == null ? null : _screenBlock.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveNewBlock_SeviceProcess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveNewContractAttachment(IContext context, slm.proxies.ContractAttachment _inputContractAttachment)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputContractAttachment", _inputContractAttachment == null ? null : _inputContractAttachment.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveNewContractAttachment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveNewSPAllowedRelation(IContext context, slm.proxies.SPAllowedRelation _sPAllowedRelation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPAllowedRelation", _sPAllowedRelation == null ? null : _sPAllowedRelation.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveNewSPAllowedRelation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveNewSPRelationType(IContext context, slm.proxies.NewEditSPRelationType _inputNewSPRelationType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputNewSPRelationType", _inputNewSPRelationType == null ? null : _inputNewSPRelationType.getMendixObject());
			Core.execute(context, "SLM.IVK_SaveNewSPRelationType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ScreenBlockOrderDown(IContext context, slm.proxies.ScreenBlock _screenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScreenBlock", _screenBlock == null ? null : _screenBlock.getMendixObject());
			Core.execute(context, "SLM.IVK_ScreenBlockOrderDown", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ScreenBlockOrderUp(IContext context, slm.proxies.ScreenBlock _screenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScreenBlock", _screenBlock == null ? null : _screenBlock.getMendixObject());
			Core.execute(context, "SLM.IVK_ScreenBlockOrderUp", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ServiceProcessCancel(IContext context, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_ServiceProcessCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ServiceProcessSave(IContext context, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_ServiceProcessSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ServiceProcessSaveAndClose(IContext context, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_ServiceProcessSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ShowInvalidCIs(IContext context, slm.proxies.ContractValidator _contractValidator, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ContractValidator", _contractValidator == null ? null : _contractValidator.getMendixObject());
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVK_ShowInvalidCIs", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ShowSPAttributes_Dialog(IContext context, slm.proxies.Service_Process _serviceProcess)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			Core.execute(context, "SLM.IVK_ShowSPAttributes_Dialog", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SPDefinitionAttributeOrderDown(IContext context, slm.proxies.ScreenBlockAttribute _screenBlockAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScreenBlockAttribute", _screenBlockAttribute == null ? null : _screenBlockAttribute.getMendixObject());
			Core.execute(context, "SLM.IVK_SPDefinitionAttributeOrderDown", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SPDefinitionAttributeOrderUp(IContext context, slm.proxies.ScreenBlockAttribute _screenBlockAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScreenBlockAttribute", _screenBlockAttribute == null ? null : _screenBlockAttribute.getMendixObject());
			Core.execute(context, "SLM.IVK_SPDefinitionAttributeOrderUp", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_UrgencyCancel(IContext context, slm.proxies.Urgency _urgency)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Urgency", _urgency == null ? null : _urgency.getMendixObject());
			Core.execute(context, "SLM.IVK_UrgencyCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_UrgencySave(IContext context, slm.proxies.Urgency _urgency)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Urgency", _urgency == null ? null : _urgency.getMendixObject());
			Core.execute(context, "SLM.IVK_UrgencySave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_UrgencySaveAndClose(IContext context, slm.proxies.Urgency _urgency)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Urgency", _urgency == null ? null : _urgency.getMendixObject());
			Core.execute(context, "SLM.IVK_UrgencySaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVM_CloseNewContractAttachment(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.IVM_CloseNewContractAttachment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void mCa_SaveNewAttribute(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			Core.execute(context, "SLM.MCa_SaveNewAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String mCa_SetRelationDescription(IContext context, slm.proxies.SPAllowedRelation _sPAllowedRelation, boolean _inverse, slm.proxies.SPRelationType _sPRelationType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPAllowedRelation", _sPAllowedRelation == null ? null : _sPAllowedRelation.getMendixObject());
			params.put("Inverse", _inverse);
			params.put("SPRelationType", _sPRelationType == null ? null : _sPRelationType.getMendixObject());
			return (java.lang.String)Core.execute(context, "SLM.MCa_SetRelationDescription", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean mCa_ValidateNewAttribute(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.MCa_ValidateNewAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean mCa_ValidateScreenBlock(IContext context, slm.proxies.Service_Process _serviceProcess, slm.proxies.ScreenBlock _screenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcess", _serviceProcess == null ? null : _serviceProcess.getMendixObject());
			params.put("ScreenBlock", _screenBlock == null ? null : _screenBlock.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.MCa_ValidateScreenBlock", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oC_AddedSortAttribute(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.OC_AddedSortAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oC_AddedSortOrder(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.OC_AddedSortOrder", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oC_AvailableSortAttribute(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.OC_AvailableSortAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oC_AvailableSortOrder(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.OC_AvailableSortOrder", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oC_SearchAdded(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.OC_SearchAdded", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oC_SearchAvailable(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.OC_SearchAvailable", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 922741: Add ability to define color per service (textcolor in master/detail view)
	 */
	public static boolean oCH_CardColor(IContext context, slm.proxies.Service _service)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.OCH_CardColor", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_CommitScreenBlockAttribute(IContext context, slm.proxies.ScreenBlockAttribute _inputScreenBlockAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("InputScreenBlockAttribute", _inputScreenBlockAttribute == null ? null : _inputScreenBlockAttribute.getMendixObject());
			Core.execute(context, "SLM.OCh_CommitScreenBlockAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_RelationSetDescription(IContext context, slm.proxies.SPAllowedRelation _sPAllowedRelation)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPAllowedRelation", _sPAllowedRelation == null ? null : _sPAllowedRelation.getMendixObject());
			Core.execute(context, "SLM.OCh_RelationSetDescription", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_SetColorCode(IContext context, slm.proxies.Service_Process _service_Process)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service_Process", _service_Process == null ? null : _service_Process.getMendixObject());
			Core.execute(context, "SLM.OCh_SetColorCode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onChangeMatrixProcessType(IContext context, slm.proxies.ServiceProcessMatrix _serviceProcessMatrix)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceProcessMatrix", _serviceProcessMatrix == null ? null : _serviceProcessMatrix.getMendixObject());
			Core.execute(context, "SLM.onChangeMatrixProcessType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onChangeServiceProcessType(IContext context, slm.proxies.ServiceMatrix _serviceMatrix)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ServiceMatrix", _serviceMatrix == null ? null : _serviceMatrix.getMendixObject());
			Core.execute(context, "SLM.onChangeServiceProcessType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onClick_RequireOnCreate(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			Core.execute(context, "SLM.onClick_RequireOnCreate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onClick_RequireOnSolve(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			Core.execute(context, "SLM.onClick_RequireOnSolve", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void openEditSPRelationType(IContext context, java.util.List<slm.proxies.SPRelationType> _sPRelationTypeList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_sPRelationTypeList = null;
			if (_sPRelationTypeList != null)
			{
				listparam_sPRelationTypeList = new java.util.ArrayList<IMendixObject>();
				for (slm.proxies.SPRelationType obj : _sPRelationTypeList)
					listparam_sPRelationTypeList.add(obj.getMendixObject());
			}
			params.put("SPRelationTypeList", listparam_sPRelationTypeList);
			Core.execute(context, "SLM.OpenEditSPRelationType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void openNewSPRelationType(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "SLM.OpenNewSPRelationType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void populateContractValidator(IContext context, slm.proxies.Contract _contract, slm.proxies.ContractValidator _contractValidator)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			params.put("ContractValidator", _contractValidator == null ? null : _contractValidator.getMendixObject());
			Core.execute(context, "SLM.populateContractValidator", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void portal_Tab_Visibility_OnChange(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			Core.execute(context, "SLM.Portal_Tab_Visibility_OnChange", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean screenBlock_HasAttribute_Calculated(IContext context, slm.proxies.ScreenBlock _screenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScreenBlock", _screenBlock == null ? null : _screenBlock.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.ScreenBlock_HasAttribute_Calculated", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 847308: added thresholds for the RedAmberGreen indicator in the progress (bar)
	 */
	public static boolean serviceProcess_BeforeCommit(IContext context, slm.proxies.Service_Process _service_Process)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service_Process", _service_Process == null ? null : _service_Process.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.ServiceProcess_BeforeCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean serviceProcess_HasDynamicAttrs_Calculated(IContext context, slm.proxies.Service_Process _service_Process)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service_Process", _service_Process == null ? null : _service_Process.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.ServiceProcess_HasDynamicAttrs_Calculated", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean setImpactDataAccess(IContext context, slm.proxies.Impact _impact)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Impact", _impact == null ? null : _impact.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.SetImpactDataAccess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean setPriorityDataAccess(IContext context, slm.proxies.Priority _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.SetPriorityDataAccess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean setServiceDataAccess(IContext context, slm.proxies.Service _service)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.SetServiceDataAccess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean setUrgencyDataAccess(IContext context, slm.proxies.Urgency _urgency)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Urgency", _urgency == null ? null : _urgency.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.SetUrgencyDataAccess", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * [1125476] Add Release Date to startpanel grid.
	 */
	public static void sUB_UpdateRequestReleaseDate(IContext context, slm.proxies.SPAttribute _sPAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPAttribute", _sPAttribute == null ? null : _sPAttribute.getMendixObject());
			Core.execute(context, "SLM.SUB_UpdateRequestReleaseDate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void updateSPAttributesOnChange_Async(IContext context, slm.proxies.SPDefinitionAttribute _sPDefinitionAttribute)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("SPDefinitionAttribute", _sPDefinitionAttribute == null ? null : _sPDefinitionAttribute.getMendixObject());
			Core.execute(context, "SLM.updateSPAttributesOnChange_Async", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void updateSPScreenBlockOnCreate_Async(IContext context, slm.proxies.ScreenBlock _screenBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScreenBlock", _screenBlock == null ? null : _screenBlock.getMendixObject());
			Core.execute(context, "SLM.updateSPScreenBlockOnCreate_Async", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * Ticket #2957:
	 * Swapped the 'Default SRM?' and the 'Commitment by' checks.
	 * This way SRM contracts not for the webshop can use all types of commitments.
	 */
	public static boolean validateContractGeneral(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.ValidateContractGeneral", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateNewContract_General(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.ValidateNewContract_General", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateReceivingOrganisations(IContext context, slm.proxies.Contract _contract)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Contract", _contract == null ? null : _contract.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.validateReceivingOrganisations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 922741: Add ability to define color per service (textcolor in master/detail view)
	 * 
	 */
	public static boolean validateService(IContext context, slm.proxies.Service _service)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Service", _service == null ? null : _service.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "SLM.ValidateService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}