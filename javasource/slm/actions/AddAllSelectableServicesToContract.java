// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package slm.actions;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import slm.proxies.Contract.MemberNames;
import slm.proxies.Service;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataRow;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTable;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import communitycommons.XPath;

public class AddAllSelectableServicesToContract extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __ContractParameter1;
	private slm.proxies.Contract ContractParameter1;

	public AddAllSelectableServicesToContract(IContext context, IMendixObject ContractParameter1)
	{
		super(context);
		this.__ContractParameter1 = ContractParameter1;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.ContractParameter1 = __ContractParameter1 == null ? null : slm.proxies.Contract.initialize(getContext(), __ContractParameter1);

		// BEGIN USER CODE
		String oqlQuery = "SELECT " + XPath.ID + 
				 " FROM " + Service.getType();
		//When no filtering is done, no WHERE clause is required.
		if((ContractParameter1.getSearchAvailableServiceName() == null || ContractParameter1.getSearchAvailableServiceName().equals("")) &&
		   (ContractParameter1.getSearchAvailableServiceDescription() == null || ContractParameter1.getSearchAvailableServiceDescription().equals(""))){
			IDataTable result = Core.retrieveOQLDataTable(this.getContext(), oqlQuery);
			LinkedList<IMendixIdentifier> serviceMendixIdentifierList = new LinkedList<IMendixIdentifier>();
			for(Iterator<IDataRow> iDataRowIterator = result.iterator(); iDataRowIterator.hasNext(); ){
				serviceMendixIdentifierList.add((IMendixIdentifier) iDataRowIterator.next().getValue(this.getContext(), 0));
			}
			ContractParameter1.getMendixObject().setValue(getContext(), MemberNames.Contract_Service.toString(), serviceMendixIdentifierList);
			return true;
		}

		oqlQuery = oqlQuery	+ " WHERE ";	
		//Retrieve all service entries which are already related to the contract (from the user context)
		//The retrieval of the identifiers is done using the getValue method so no database search is invoked (which would be the case if the ContractParameter1.getContract_Service() was used.
		Object valueObject = ContractParameter1.getMendixObject().getValue(this.getContext(), MemberNames.Contract_Service.toString());
		//When there are no related services continue
		boolean first = true;
		if (valueObject != null){
			@SuppressWarnings("unchecked")
			List<IMendixIdentifier> addedServiceList = (List<IMendixIdentifier>) valueObject;
			//When there are no related services continue
			if(addedServiceList.size() != 0){
	
				for(Iterator<IMendixIdentifier> addedServiceIterator = addedServiceList.iterator(); addedServiceIterator.hasNext(); ){
					String mainIDQueryPart = Service.getType() + "/" + XPath.ID + " = " + addedServiceIterator.next().toLong();
					if(first){
						oqlQuery = oqlQuery	+ mainIDQueryPart;
						first = false;
					}
					oqlQuery = oqlQuery	+ " OR " + mainIDQueryPart;
				}
			}
		}
		//Add search field content
		boolean firstFilter = true;
		String OQLFilterPart = "";
		int OQLFilterPartCounter = 0;
		if(ContractParameter1.getSearchAvailableServiceName() != null && !ContractParameter1.getSearchAvailableServiceName().equals("")){
			String mainSearchAvailableServicenameQueryPart = Service.getType() + "/" + Service.MemberNames.ServiceName + " LIKE '%" + ContractParameter1.getSearchAvailableServiceName() + "%'"; 
			OQLFilterPart = mainSearchAvailableServicenameQueryPart;
			firstFilter = false;
			OQLFilterPartCounter++;
		}
		if(ContractParameter1.getSearchAvailableCITypeName() != null && !ContractParameter1.getSearchAvailableCITypeName().equals("")){
			String mainSearchAvailableServiceDescriptionQueryPart = Service.getType() + "/" + Service.MemberNames.Description + " IKE '%" + ContractParameter1.getSearchAvailableServiceDescription() + "%'"; 
			if(!firstFilter){
				OQLFilterPart = OQLFilterPart + " AND ";
			}
			OQLFilterPart = OQLFilterPart + mainSearchAvailableServiceDescriptionQueryPart;
			firstFilter = false;
			OQLFilterPartCounter++;
		}
		if(!first){
			oqlQuery = oqlQuery	+ " OR ";
		}
		if(OQLFilterPartCounter > 1){
			oqlQuery = oqlQuery + "(" + OQLFilterPart + ")";
		}
		else{
			oqlQuery = oqlQuery + OQLFilterPart;
		}
		
		IDataTable result = Core.retrieveOQLDataTable(this.getContext(), oqlQuery);
		LinkedList<IMendixIdentifier> serviceMendixIdentifierList = new LinkedList<IMendixIdentifier>();
		for(Iterator<IDataRow> iDataRowIterator = result.iterator(); iDataRowIterator.hasNext(); ){
			serviceMendixIdentifierList.add((IMendixIdentifier) iDataRowIterator.next().getValue(this.getContext(), 0));
		}
		ContractParameter1.getMendixObject().setValue(getContext(), MemberNames.Contract_Service.toString(), serviceMendixIdentifierList);
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "AddAllSelectableServicesToContract";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
