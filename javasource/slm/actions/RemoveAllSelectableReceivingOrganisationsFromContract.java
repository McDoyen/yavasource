// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package slm.actions;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import nap.proxies.Organisation;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import communitycommons.XPath;

public class RemoveAllSelectableReceivingOrganisationsFromContract extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __ContractParameter1;
	private slm.proxies.Contract ContractParameter1;

	public RemoveAllSelectableReceivingOrganisationsFromContract(IContext context, IMendixObject ContractParameter1)
	{
		super(context);
		this.__ContractParameter1 = ContractParameter1;
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.ContractParameter1 = __ContractParameter1 == null ? null : slm.proxies.Contract.initialize(getContext(), __ContractParameter1);

		// BEGIN USER CODE
		XPath<Organisation> receivingOrganisationXPath = XPath.create(Core.createSystemContext(), Organisation.class);
		//Include only organisation entries which are already related to the contract as receiving organisation (from the user context)
		boolean first = true;
		for( Iterator<IMendixObject> addedReceivingOrganisationsIterator = Core.retrieveByPath(getContext(), ContractParameter1.getMendixObject(), Organisation.MemberNames.ReceivingOrganisation_Contracts.toString()).iterator(); addedReceivingOrganisationsIterator.hasNext(); ){
			if(first){
				receivingOrganisationXPath.subconstraint().eq(XPath.ID,addedReceivingOrganisationsIterator.next().getId().toLong());
				first = false;
			}
			else{
				receivingOrganisationXPath.or().eq(XPath.ID,addedReceivingOrganisationsIterator.next().getId().toLong());
			}
		}
		receivingOrganisationXPath.close();
		//When there are no added receiving organisations, quit.
		LinkedList<IMendixObject> toBeRemovedIMendixObjectList = new LinkedList<IMendixObject>();
		if (!first){
			//Add search field content
			if(ContractParameter1.getSearchAddedOrganisation() != null && !ContractParameter1.getSearchAddedOrganisation().equals("")){
				receivingOrganisationXPath.contains(Organisation.MemberNames.OrganisationName, ContractParameter1.getSearchAddedOrganisation());
			}
			List<Organisation> toBeRemovedreceivingOrganisationList = receivingOrganisationXPath.all();
			
			for(Iterator<Organisation> listIterator = toBeRemovedreceivingOrganisationList.iterator(); listIterator.hasNext(); ){
				//Retrieve all already added contracts using the association
				toBeRemovedIMendixObjectList.add(listIterator.next().getMendixObject());
				//Organisation receivingOrganisation = listIterator.next();
				//Object valueObject = receivingOrganisation.getMendixObject().getValue(this.getContext(), Organisation.MemberNames.ReceivingOrganisation_Contracts.toString());
				//LinkedList<Contract> newContractList = new LinkedList<Contract>();
				//List<Contract> resultContractList = receivingOrganisation.getReceivingOrganisation_Contracts();
				//for(Iterator<Contract> resultContractListIterator = resultContractList.iterator(); resultContractListIterator.hasNext(); ){
					//Contract resultContract = resultContractListIterator.next();
					//if(resultContract.getMendixObject().getId().toLong() != ContractParameter1.getMendixObject().getId().toLong()){
						//newContractList.add(resultContract);
					//}
				//}
				
				//if (valueObject != null){
					//@SuppressWarnings("unchecked")
					
					//receivingOrganisation.setReceivingOrganisation_Contracts(newContractList);
					//List<IMendixIdentifier> resultIMendixObjectContractList = (List<IMendixIdentifier>) valueObject;
					//When there are no related contracts (which is not possible) continue
					//if(resultIMendixObjectContractList.size() != 0){
					//	resultIMendixObjectContractList.remove(ContractParameter1.getMendixObject().getId());
					//	receivingOrganisation.getMendixObject().setValue(getContext(), Organisation.MemberNames.ReceivingOrganisation_Contracts.toString(), resultIMendixObjectContractList);
					//}
				//}
			}
		}
		return toBeRemovedIMendixObjectList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "RemoveAllSelectableReceivingOrganisationsFromContract";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
