// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package winsso.proxies.constants;

import com.mendix.core.Core;

public class Constants
{
	// These are the constants for the WinSSO module

	/**
	* HTML page(located in the resource map) which is responded to a user when authentication fails.
	*/
	public static java.lang.String getFallbackPage()
	{
		return (java.lang.String)Core.getConfiguration().getConstantValue("WinSSO.FallbackPage");
	}

	/**
	* If the user logging in is authenticated and known in the app (i.e. a valid login), the user will be redirected to this page. By default this is index.html, but you can change this in case you use index.html as a redirect page to /sso/. 
	* 
	* If the SSO link has a continuation parameter (e.g. ?cont=link/foo), the continuation overrides this constant and the user will be redirected there instead. You can use this in combination with the deeplink module to have deeplinks automatically attempt a Kerberos login for unauthenticated users.
	*/
	public static java.lang.String getIndexPage()
	{
		return (java.lang.String)Core.getConfiguration().getConstantValue("WinSSO.IndexPage");
	}

	/**
	* If the user logging in is authenticated, but unknown, the user will be redirected to this page. Note that the username will be appended to the url. 
	* 
	* You can add your own 'unknownuser.html' to your theme package if this behavior should be supported.
	* 
	* Another possiblity is to automatically start a signup wizard by opening a deeplink (which can be found in the appstore), for example:
	* 'link/newusersignup/'
	*/
	public static java.lang.String getUnknownUserPage()
	{
		return (java.lang.String)Core.getConfiguration().getConstantValue("WinSSO.UnknownUserPage");
	}

	public static boolean getUseSingleSignOn()
	{
		return (java.lang.Boolean)Core.getConfiguration().getConstantValue("WinSSO.UseSingleSignOn");
	}
}