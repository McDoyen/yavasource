// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package databasereplication.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the DatabaseReplication module
	public static void aCr_CustomConstraint(IContext context, databasereplication.proxies.CustomConstraint _customConstraint)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("CustomConstraint", _customConstraint == null ? null : _customConstraint.getMendixObject());
			Core.execute(context, "DatabaseReplication.ACr_CustomConstraint", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aCr_Database(IContext context, databasereplication.proxies.Database _database)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Database", _database == null ? null : _database.getMendixObject());
			Core.execute(context, "DatabaseReplication.ACr_Database", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean aSu_CheckModelAndMapping(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.ASu_CheckModelAndMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_AdditionalJoins(IContext context, databasereplication.proxies.AdditionalJoins _additionalJoins)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("AdditionalJoins", _additionalJoins == null ? null : _additionalJoins.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.BCo_AdditionalJoins", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_ColumnMapping(IContext context, databasereplication.proxies.ColumnMapping _columnMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ColumnMapping", _columnMapping == null ? null : _columnMapping.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.BCo_ColumnMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_Constraint(IContext context, databasereplication.proxies.Constraint _constraint)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Constraint", _constraint == null ? null : _constraint.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.BCo_Constraint", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_CustomConstraint(IContext context, databasereplication.proxies.CustomConstraint _customConstraint)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("CustomConstraint", _customConstraint == null ? null : _customConstraint.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.BCo_CustomConstraint", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_Database(IContext context, databasereplication.proxies.Database _database)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Database", _database == null ? null : _database.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.BCo_Database", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_TableMapping(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.BCo_TableMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bDe_ColumnMapping(IContext context, databasereplication.proxies.ColumnMapping _columnMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ColumnMapping", _columnMapping == null ? null : _columnMapping.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.BDe_ColumnMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bRb_AdditionalJoins(IContext context, databasereplication.proxies.AdditionalJoins _additionalJoins)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("AdditionalJoins", _additionalJoins == null ? null : _additionalJoins.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.BRb_AdditionalJoins", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bRb_ColumnMapping(IContext context, databasereplication.proxies.ColumnMapping _columnMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ColumnMapping", _columnMapping == null ? null : _columnMapping.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.BRb_ColumnMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bRb_Constraint(IContext context, databasereplication.proxies.Constraint _constraint)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Constraint", _constraint == null ? null : _constraint.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.BRb_Constraint", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void ch_FindAttribute(IContext context, databasereplication.proxies.ColumnMapping _columnmapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("columnmapping", _columnmapping == null ? null : _columnmapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.Ch_FindAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void ch_FindObjectType(IContext context, databasereplication.proxies.ColumnMapping _columnmapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("columnmapping", _columnmapping == null ? null : _columnmapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.Ch_FindObjectType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void ch_FindReference(IContext context, databasereplication.proxies.ColumnMapping _columnmapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("columnmapping", _columnmapping == null ? null : _columnmapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.Ch_FindReference", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void ch_SetAttribute(IContext context, databasereplication.proxies.ColumnMapping _columnmapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("columnmapping", _columnmapping == null ? null : _columnmapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.Ch_SetAttribute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void ch_SetObjectTypeReference(IContext context, databasereplication.proxies.ColumnMapping _columnmapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("columnmapping", _columnmapping == null ? null : _columnmapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.Ch_SetObjectTypeReference", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void ch_SetReference(IContext context, databasereplication.proxies.ColumnMapping _columnmapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("columnmapping", _columnmapping == null ? null : _columnmapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.Ch_SetReference", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cH_UpdateConnectionExample(IContext context, databasereplication.proxies.CustomConnectionInfo _customConnectionInfo)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("CustomConnectionInfo", _customConnectionInfo == null ? null : _customConnectionInfo.getMendixObject());
			Core.execute(context, "DatabaseReplication.CH_UpdateConnectionExample", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String checkEmptyString(IContext context, java.lang.String _inputString)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("inputString", _inputString);
			return (java.lang.String)Core.execute(context, "DatabaseReplication.CheckEmptyString", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void column_SetCorrectRefObjectType(IContext context, mxmodelreflection.proxies.MxObjectReference _reference, databasereplication.proxies.ColumnMapping _columnMapping, mxmodelreflection.proxies.MxObjectType _startMxObjectType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Reference", _reference == null ? null : _reference.getMendixObject());
			params.put("ColumnMapping", _columnMapping == null ? null : _columnMapping.getMendixObject());
			params.put("StartMxObjectType", _startMxObjectType == null ? null : _startMxObjectType.getMendixObject());
			Core.execute(context, "DatabaseReplication.Column_SetCorrectRefObjectType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<databasereplication.proxies.TableMapping> importXMLFile(IContext context, databasereplication.proxies.XMLDocumentTM _xMLDocument, databasereplication.proxies.Database _selectedDatabase)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("XMLDocument", _xMLDocument == null ? null : _xMLDocument.getMendixObject());
			params.put("SelectedDatabase", _selectedDatabase == null ? null : _selectedDatabase.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "DatabaseReplication.ImportXMLFile", params);
			java.util.List<databasereplication.proxies.TableMapping> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<databasereplication.proxies.TableMapping>();
				for (IMendixObject obj : objs)
					result.add(databasereplication.proxies.TableMapping.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AbortAllRunningImports(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DatabaseReplication.IVK_AbortAllRunningImports", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_AbortSelectedRunningImport(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_AbortSelectedRunningImport", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CancelImportCall(IContext context, databasereplication.proxies.ImportCall _importCall)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportCall", _importCall == null ? null : _importCall.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_CancelImportCall", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ColMapping_SaveClose(IContext context, databasereplication.proxies.ColumnMapping _columnMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ColumnMapping", _columnMapping == null ? null : _columnMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_ColMapping_SaveClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ColMapping_SaveNext(IContext context, databasereplication.proxies.ColumnMapping _columnMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ColumnMapping", _columnMapping == null ? null : _columnMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_ColMapping_SaveNext", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_CustomConstraint_Save(IContext context, databasereplication.proxies.CustomConstraint _customConstraint)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("CustomConstraint", _customConstraint == null ? null : _customConstraint.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_CustomConstraint_Save", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ExportAll(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DatabaseReplication.IVK_ExportAll", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ExportMappingList(IContext context, java.util.List<databasereplication.proxies.TableMapping> _tableMappingList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_tableMappingList = null;
			if (_tableMappingList != null)
			{
				listparam_tableMappingList = new java.util.ArrayList<IMendixObject>();
				for (databasereplication.proxies.TableMapping obj : _tableMappingList)
					listparam_tableMappingList.add(obj.getMendixObject());
			}
			params.put("TableMappingList", listparam_tableMappingList);
			Core.execute(context, "DatabaseReplication.IVK_ExportMappingList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_GetAllTableInfo(IContext context, databasereplication.proxies.Database _database)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Database", _database == null ? null : _database.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_GetAllTableInfo", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImportByImportCallConfig(IContext context, databasereplication.proxies.ImportCall _importCall)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportCall", _importCall == null ? null : _importCall.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_ImportByImportCallConfig", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImportTableMapping(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_ImportTableMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImportXML_Upload(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DatabaseReplication.IVK_ImportXML_Upload", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVk_NewColumn(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVk_NewColumn", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_NewConstraint(IContext context, databasereplication.proxies.AdditionalJoins _additionalJoin)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("AdditionalJoin", _additionalJoin == null ? null : _additionalJoin.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_NewConstraint", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_NewJoin(IContext context, databasereplication.proxies.TableMapping _mapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Mapping", _mapping == null ? null : _mapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_NewJoin", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_RemoveAllConfigItems(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DatabaseReplication.IVK_RemoveAllConfigItems", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ReselectObjectType(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_ReselectObjectType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ReselectObjectTypeFinal(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_ReselectObjectTypeFinal", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveDatabaseInfo(IContext context, databasereplication.proxies.Database _database)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Database", _database == null ? null : _database.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_SaveDatabaseInfo", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_SaveImportCall(IContext context, databasereplication.proxies.ImportCall _importCall)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportCall", _importCall == null ? null : _importCall.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_SaveImportCall", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ScheduledImportActivity_ResetImportTime(IContext context, databasereplication.proxies.ScheduledImportActivity _scheduledImportActivity)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledImportActivity", _scheduledImportActivity == null ? null : _scheduledImportActivity.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_ScheduledImportActivity_ResetImportTime", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ScheduledImportActivity_Save(IContext context, databasereplication.proxies.ScheduledImportActivity _scheduledImportActivity)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledImportActivity", _scheduledImportActivity == null ? null : _scheduledImportActivity.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_ScheduledImportActivity_Save", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_StartImportCall(IContext context, databasereplication.proxies.ImportCall _importCall)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportCall", _importCall == null ? null : _importCall.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_StartImportCall", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TableMapping_Save(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_TableMapping_Save", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TableMapping_Update_Save(IContext context, databasereplication.proxies.UpdateConfiguration _updateConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UpdateConfiguration", _updateConfiguration == null ? null : _updateConfiguration.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_TableMapping_Update_Save", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Template_ConnectMatchingAttributes(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_Template_ConnectMatchingAttributes", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TM_SaveNext(IContext context, databasereplication.proxies.TableMapping _dataViewObject)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DataViewObject", _dataViewObject == null ? null : _dataViewObject.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_TM_SaveNext", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TM_Update_SaveNext(IContext context, databasereplication.proxies.UpdateConfiguration _updateConfiguration)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UpdateConfiguration", _updateConfiguration == null ? null : _updateConfiguration.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_TM_Update_SaveNext", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_UpdateMapping_New(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DatabaseReplication.IVK_UpdateMapping_New", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_XMLDocument_Cancel(IContext context, databasereplication.proxies.XMLDocumentTM _xMLDocumentTM)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("XMLDocumentTM", _xMLDocumentTM == null ? null : _xMLDocumentTM.getMendixObject());
			Core.execute(context, "DatabaseReplication.IVK_XMLDocument_Cancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void mappingColumn_SetInfo(IContext context, databasereplication.proxies.ColumnMapping _columnMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ColumnMapping", _columnMapping == null ? null : _columnMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.MappingColumn_SetInfo", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.XMLDocumentTM mB_ExportToXML(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "DatabaseReplication.MB_ExportToXML", params);
			return result == null ? null : databasereplication.proxies.XMLDocumentTM.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.XMLDocumentTM mB_ExportToXML_UpdateConfig(IContext context, databasereplication.proxies.UpdateConfiguration _updateConfig)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UpdateConfig", _updateConfig == null ? null : _updateConfig.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "DatabaseReplication.MB_ExportToXML_UpdateConfig", params);
			return result == null ? null : databasereplication.proxies.XMLDocumentTM.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<databasereplication.proxies.TableMapping> mB_ImportXMLFile(IContext context, databasereplication.proxies.XMLDocumentTM _xMLDocument, databasereplication.proxies.Database _selectedDatabase)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("XMLDocument", _xMLDocument == null ? null : _xMLDocument.getMendixObject());
			params.put("SelectedDatabase", _selectedDatabase == null ? null : _selectedDatabase.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "DatabaseReplication.MB_ImportXMLFile", params);
			java.util.List<databasereplication.proxies.TableMapping> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<databasereplication.proxies.TableMapping>();
				for (IMendixObject obj : objs)
					result.add(databasereplication.proxies.TableMapping.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oC_ConstraintCopyLeftTable(IContext context, databasereplication.proxies.Constraint _constraint)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Constraint", _constraint == null ? null : _constraint.getMendixObject());
			Core.execute(context, "DatabaseReplication.OC_ConstraintCopyLeftTable", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_ImportCall_Save(IContext context, databasereplication.proxies.ImportCall _importCall)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportCall", _importCall == null ? null : _importCall.getMendixObject());
			Core.execute(context, "DatabaseReplication.OCh_ImportCall_Save", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_AssociationKey(IContext context, databasereplication.proxies.AssociationKeyOption _isAssociationKey)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IsAssociationKey", _isAssociationKey == null ? null : _isAssociationKey.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_AssociationKey", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_ConstraintInputObject(IContext context, databasereplication.proxies.ContraintInputObject _constraintInputObject)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ConstraintInputObject", _constraintInputObject == null ? null : _constraintInputObject.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_ConstraintInputObject", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_CustomConstraintType(IContext context, databasereplication.proxies.CustomConstraintType _constraintType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ConstraintType", _constraintType == null ? null : _constraintType.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_CustomConstraintType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_DatabaseType(IContext context, databasereplication.proxies.DBType _databaseType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DatabaseType", _databaseType == null ? null : _databaseType.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_DatabaseType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_DataHandling(IContext context, databasereplication.proxies.ReferenceDataHandling _dataHandling)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DataHandling", _dataHandling == null ? null : _dataHandling.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_DataHandling", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_ImportAction(IContext context, databasereplication.proxies.ImportAction _importAction)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportAction", _importAction == null ? null : _importAction.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_ImportAction", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_JoinType(IContext context, databasereplication.proxies.JoinType _joinType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("JoinType", _joinType == null ? null : _joinType.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_JoinType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_MappingType(IContext context, databasereplication.proxies.MappingType _mappingType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MappingType", _mappingType == null ? null : _mappingType.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_MappingType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_Mode(IContext context, databasereplication.proxies.Mode _mode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Mode", _mode == null ? null : _mode.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_Mode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_Operator(IContext context, databasereplication.proxies.Operator _operator)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Operator", _operator == null ? null : _operator.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_Operator", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_QueryType(IContext context, databasereplication.proxies.QueryType _queryType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("QueryType", _queryType == null ? null : _queryType.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_QueryType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_RefHandling(IContext context, databasereplication.proxies.ReferenceHandlingEnum _handling)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Handling", _handling == null ? null : _handling.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_RefHandling", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_RemoveIndicator(IContext context, databasereplication.proxies.RemoveIndicator _removeIndicator)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RemoveIndicator", _removeIndicator == null ? null : _removeIndicator.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_RemoveIndicator", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_StatisticLevel(IContext context, databasereplication.proxies.StatisticsLevel _printStatisticsMessages)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PrintStatisticsMessages", _printStatisticsMessages == null ? null : _printStatisticsMessages.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_StatisticLevel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_UpdateConfigurataion(IContext context, databasereplication.proxies.UpdateType _updateType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UpdateType", _updateType == null ? null : _updateType.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_UpdateConfigurataion", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String parseEnumToString_YesNo(IContext context, databasereplication.proxies.YesNo _useCustomConstraints)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UseCustomConstraints", _useCustomConstraints == null ? null : _useCustomConstraints.name());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ParseEnumToString_YesNo", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.AssociationKeyOption parseStringToEnum_AssociationKey(IContext context, java.lang.String _isAssociationKey)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IsAssociationKey", _isAssociationKey);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_AssociationKey", params);
			if (result == null)
				return null;
			return databasereplication.proxies.AssociationKeyOption.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.ContraintInputObject parseStringToEnum_ConstraintInputObject(IContext context, java.lang.String _constraintType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ConstraintType", _constraintType);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_ConstraintInputObject", params);
			if (result == null)
				return null;
			return databasereplication.proxies.ContraintInputObject.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.CustomConstraintType parseStringToEnum_CustomConstraintType(IContext context, java.lang.String _constraintType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ConstraintType", _constraintType);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_CustomConstraintType", params);
			if (result == null)
				return null;
			return databasereplication.proxies.CustomConstraintType.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.DBType parseStringToEnum_DatabaseType(IContext context, java.lang.String _databaseType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DatabaseType", _databaseType);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_DatabaseType", params);
			if (result == null)
				return null;
			return databasereplication.proxies.DBType.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.ReferenceDataHandling parseStringToEnum_DataHandling(IContext context, java.lang.String _dataHandling)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DataHandling", _dataHandling);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_DataHandling", params);
			if (result == null)
				return null;
			return databasereplication.proxies.ReferenceDataHandling.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.ImportAction parseStringToEnum_ImportAction(IContext context, java.lang.String _importAction)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportAction", _importAction);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_ImportAction", params);
			if (result == null)
				return null;
			return databasereplication.proxies.ImportAction.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.JoinType parseStringToEnum_JoinType(IContext context, java.lang.String _joinType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("JoinType", _joinType);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_JoinType", params);
			if (result == null)
				return null;
			return databasereplication.proxies.JoinType.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.MappingType parseStringToEnum_MappingType(IContext context, java.lang.String _mappingType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("MappingType", _mappingType);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_MappingType", params);
			if (result == null)
				return null;
			return databasereplication.proxies.MappingType.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.Mode parseStringToEnum_Mode(IContext context, java.lang.String _mode)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Mode", _mode);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_Mode", params);
			if (result == null)
				return null;
			return databasereplication.proxies.Mode.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.Operator parseStringToEnum_Operator(IContext context, java.lang.String _operator)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Operator", _operator);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_Operator", params);
			if (result == null)
				return null;
			return databasereplication.proxies.Operator.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.QueryType parseStringToEnum_QueryType(IContext context, java.lang.String _queryType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("QueryType", _queryType);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_QueryType", params);
			if (result == null)
				return null;
			return databasereplication.proxies.QueryType.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.ReferenceHandlingEnum parseStringToEnum_RefHandling(IContext context, java.lang.String _handling)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Handling", _handling);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_RefHandling", params);
			if (result == null)
				return null;
			return databasereplication.proxies.ReferenceHandlingEnum.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.RemoveIndicator parseStringToEnum_RemoveIndicator(IContext context, java.lang.String _strRemoveIndicator)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("strRemoveIndicator", _strRemoveIndicator);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_RemoveIndicator", params);
			if (result == null)
				return null;
			return databasereplication.proxies.RemoveIndicator.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.StatisticsLevel parseStringToEnum_StatisticsLevel(IContext context, java.lang.String _printStatisticsMessages)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("PrintStatisticsMessages", _printStatisticsMessages);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_StatisticsLevel", params);
			if (result == null)
				return null;
			return databasereplication.proxies.StatisticsLevel.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.YesNo parseStringToEnum_YesNo(IContext context, java.lang.String _strYesNo)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("strYesNo", _strYesNo);
			java.lang.String result = (java.lang.String)Core.execute(context, "DatabaseReplication.ParseStringToEnum_YesNo", params);
			if (result == null)
				return null;
			return databasereplication.proxies.YesNo.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void prepareReferenceHandling(IContext context, databasereplication.proxies.ColumnMapping _pColumn)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("pColumn", _pColumn == null ? null : _pColumn.getMendixObject());
			Core.execute(context, "DatabaseReplication.prepareReferenceHandling", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void processActivitySet(IContext context, databasereplication.proxies.ScheduledImportActivity _importActivity, java.util.Date _startDate)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportActivity", _importActivity == null ? null : _importActivity.getMendixObject());
			params.put("StartDate", _startDate);
			Core.execute(context, "DatabaseReplication.ProcessActivitySet", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<databasereplication.proxies.TableMapping> publishedFlow(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.List<IMendixObject> objs = Core.execute(context, "DatabaseReplication.PublishedFlow", params);
			java.util.List<databasereplication.proxies.TableMapping> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<databasereplication.proxies.TableMapping>();
				for (IMendixObject obj : objs)
					result.add(databasereplication.proxies.TableMapping.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sE_ImportEverything(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DatabaseReplication.SE_ImportEverything", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.ColumnMapping sF_DetermineColumnMapping(IContext context, java.util.List<databasereplication.proxies.ColumnMapping> _columnMappingList, databasereplication.proxies.Column _column, databasereplication.proxies.TableMapping _tableMapping, databasereplication.proxies.AdditionalJoins _additionalJoin, mxmodelreflection.proxies.MxObjectMember _mxObjectMember)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_columnMappingList = null;
			if (_columnMappingList != null)
			{
				listparam_columnMappingList = new java.util.ArrayList<IMendixObject>();
				for (databasereplication.proxies.ColumnMapping obj : _columnMappingList)
					listparam_columnMappingList.add(obj.getMendixObject());
			}
			params.put("ColumnMappingList", listparam_columnMappingList);
			params.put("Column", _column == null ? null : _column.getMendixObject());
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			params.put("AdditionalJoin", _additionalJoin == null ? null : _additionalJoin.getMendixObject());
			params.put("MxObjectMember", _mxObjectMember == null ? null : _mxObjectMember.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "DatabaseReplication.SF_DetermineColumnMapping", params);
			return result == null ? null : databasereplication.proxies.ColumnMapping.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sF_ImportDatabases_Select(IContext context, databasereplication.proxies.XMLDocumentTM _xMLDocumentTM)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("XMLDocumentTM", _xMLDocumentTM == null ? null : _xMLDocumentTM.getMendixObject());
			Core.execute(context, "DatabaseReplication.SF_ImportDatabases_Select", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sF_MatchAdditionalJoin(IContext context, databasereplication.proxies.AdditionalJoins _additionalJoin, mxmodelreflection.proxies.MxObjectType _mxObjectType, java.util.List<databasereplication.proxies.ColumnMapping> _columnMappingList, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("AdditionalJoin", _additionalJoin == null ? null : _additionalJoin.getMendixObject());
			params.put("MxObjectType", _mxObjectType == null ? null : _mxObjectType.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_columnMappingList = null;
			if (_columnMappingList != null)
			{
				listparam_columnMappingList = new java.util.ArrayList<IMendixObject>();
				for (databasereplication.proxies.ColumnMapping obj : _columnMappingList)
					listparam_columnMappingList.add(obj.getMendixObject());
			}
			params.put("ColumnMappingList", listparam_columnMappingList);
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.SF_MatchAdditionalJoin", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String sub_GetLatestErrorMessage(IContext context, system.proxies.Error _error)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Error", _error == null ? null : _error.getMendixObject());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.Sub_GetLatestErrorMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.UpdateConfiguration sUB_GetUpdateConfig(IContext context, databasereplication.proxies.TableMapping _tableMapping, java.lang.String _updateType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			params.put("UpdateType", _updateType);
			IMendixObject result = (IMendixObject)Core.execute(context, "DatabaseReplication.SUB_GetUpdateConfig", params);
			return result == null ? null : databasereplication.proxies.UpdateConfiguration.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sUB_SetRefAfterImport_AJ(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.SUB_SetRefAfterImport_AJ", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sUB_SetRefAfterImport_CM(IContext context, databasereplication.proxies.TableMapping _tableMapping, databasereplication.proxies.XMLDocumentTM _xMLDocumentTM)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			params.put("XMLDocumentTM", _xMLDocumentTM == null ? null : _xMLDocumentTM.getMendixObject());
			Core.execute(context, "DatabaseReplication.SUB_SetRefAfterImport_CM", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sUB_SetRefAfterImport_Constraints(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.SUB_SetRefAfterImport_Constraints", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sUB_SetRefAfterImport_RH(IContext context, databasereplication.proxies.TableMapping _tableMapping, databasereplication.proxies.XMLDocumentTM _xMLDocumentTM)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			params.put("XMLDocumentTM", _xMLDocumentTM == null ? null : _xMLDocumentTM.getMendixObject());
			Core.execute(context, "DatabaseReplication.SUB_SetRefAfterImport_RH", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void updateColumnTypes(IContext context, databasereplication.proxies.Table _table)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Table", _table == null ? null : _table.getMendixObject());
			Core.execute(context, "DatabaseReplication.UpdateColumnTypes", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String vA_RetrieveMappingName(IContext context, databasereplication.proxies.ImportCall _importCall)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportCall", _importCall == null ? null : _importCall.getMendixObject());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.VA_RetrieveMappingName", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateColumnMapping(IContext context, databasereplication.proxies.ColumnMapping _columnMapping, databasereplication.proxies.TableMapping _tableMapping, boolean _showFeedback)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ColumnMapping", _columnMapping == null ? null : _columnMapping.getMendixObject());
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			params.put("ShowFeedback", _showFeedback);
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.ValidateColumnMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateDatabase(IContext context, databasereplication.proxies.Database _database)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Database", _database == null ? null : _database.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DatabaseReplication.ValidateDatabase", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String validateImportActivity(IContext context, databasereplication.proxies.ScheduledImportActivity _scheduledImportActivity)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledImportActivity", _scheduledImportActivity == null ? null : _scheduledImportActivity.getMendixObject());
			return (java.lang.String)Core.execute(context, "DatabaseReplication.ValidateImportActivity", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void validateTableMapping(IContext context, databasereplication.proxies.TableMapping _tableMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TableMapping", _tableMapping == null ? null : _tableMapping.getMendixObject());
			Core.execute(context, "DatabaseReplication.ValidateTableMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static databasereplication.proxies.Table xMLToDom_SearchTable(IContext context, databasereplication.proxies.XMLDocumentTM _xMLMappingParent, java.lang.String _name)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("XMLMappingParent", _xMLMappingParent == null ? null : _xMLMappingParent.getMendixObject());
			params.put("Name", _name);
			IMendixObject result = (IMendixObject)Core.execute(context, "DatabaseReplication.XMLToDom_SearchTable", params);
			return result == null ? null : databasereplication.proxies.Table.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}