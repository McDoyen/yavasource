// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package statetransitiongraph.actions;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import statetransitiongraph.proxies.Relation;
import statetransitiongraph.proxies.UniquePhaseStateCombinations;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class CreateTreeLayout extends CustomJavaAction<java.lang.String>
{
	private java.util.List<IMendixObject> __UniquePhaseStateCombiList;
	private java.util.List<statetransitiongraph.proxies.UniquePhaseStateCombinations> UniquePhaseStateCombiList;
	private java.util.List<IMendixObject> __Relations;
	private java.util.List<statetransitiongraph.proxies.Relation> Relations;
	private IMendixObject __MatrixParameter1;
	private statetransition.proxies.Matrix MatrixParameter1;

	public CreateTreeLayout(IContext context, java.util.List<IMendixObject> UniquePhaseStateCombiList, java.util.List<IMendixObject> Relations, IMendixObject MatrixParameter1)
	{
		super(context);
		this.__UniquePhaseStateCombiList = UniquePhaseStateCombiList;
		this.__Relations = Relations;
		this.__MatrixParameter1 = MatrixParameter1;
	}

	@Override
	public java.lang.String executeAction() throws Exception
	{
		this.UniquePhaseStateCombiList = new java.util.ArrayList<statetransitiongraph.proxies.UniquePhaseStateCombinations>();
		if (__UniquePhaseStateCombiList != null)
			for (IMendixObject __UniquePhaseStateCombiListElement : __UniquePhaseStateCombiList)
				this.UniquePhaseStateCombiList.add(statetransitiongraph.proxies.UniquePhaseStateCombinations.initialize(getContext(), __UniquePhaseStateCombiListElement));

		this.Relations = new java.util.ArrayList<statetransitiongraph.proxies.Relation>();
		if (__Relations != null)
			for (IMendixObject __RelationsElement : __Relations)
				this.Relations.add(statetransitiongraph.proxies.Relation.initialize(getContext(), __RelationsElement));

		this.MatrixParameter1 = __MatrixParameter1 == null ? null : statetransition.proxies.Matrix.initialize(getContext(), __MatrixParameter1);

		// BEGIN USER CODE
		SortedMap<Integer, UniquePhaseStateCombinations> sorted = new TreeMap<Integer, UniquePhaseStateCombinations>();
		Iterator<UniquePhaseStateCombinations> tempIterator = UniquePhaseStateCombiList.iterator();
		while(tempIterator.hasNext()){
			UniquePhaseStateCombinations tempStateAndPhase = tempIterator.next();
			sorted.put(tempStateAndPhase.getChartOrder(), tempStateAndPhase);
			Core.getLogger("ExpertDesk").debug("phase "+tempStateAndPhase.getPhase()+" state "+tempStateAndPhase.getState()+" Chart Order" +tempStateAndPhase.getChartOrder()+" size"+sorted.size());
			
		}
		
		String chartXML="<chart bgcolor='FFFFFF' charttopmargin='0' chartleftmargin='0' chartrightmargin='0' bordercolor='FFFFFF' canvasbordercolor='DFBAAD' xAxisMinValue='0' xAxisMaxValue='100' yAxisMinValue='0' yAxisMaxValue='100' bubbleScale='3' is3D='1' numDivLines='0' showFormBtn='0' ><dataset plotborderAlpha='0' >";
		String chartXMLSet ="";
		
		Integer yValueStep = 100;
		Integer xValue = 300;
		Integer yValue = 750;
		Integer PhaseOrder = 0;
		Integer StateOrder = 0;
	
		Integer xNumber =1;
		
		Collection<UniquePhaseStateCombinations> c = sorted.values();
		
		Iterator<UniquePhaseStateCombinations> stateAndPhaseIterator = c.iterator();
		
		while (stateAndPhaseIterator.hasNext()) {
			UniquePhaseStateCombinations stateAndPhase = stateAndPhaseIterator.next();
			Core.getLogger("ExpertDesk").debug("loop over sorted unique phase state combinations: " + stateAndPhase.getPhase() + "/" + stateAndPhase.getState());
			if((stateAndPhase.getPhaseOrder() != null && stateAndPhase.getPhaseOrder() > PhaseOrder) || (stateAndPhase.getStateOrder()!=null && stateAndPhase.getStateOrder() > StateOrder)){
				PhaseOrder = stateAndPhase.getPhaseOrder();
				StateOrder = stateAndPhase.getStateOrder();
				
				yValue -= yValueStep;
				xValue = 300;
				xNumber =  1;
			}
			else{
				xNumber +=1;
				if(xNumber % 2 == 0){
					xValue += 100*xNumber;
				}
				else
					xValue -=100*xNumber;
			}
			String statePhaseame = stateAndPhase.getPhase()+System.getProperty("line.separator")+stateAndPhase.getState();
			String stateAndPhaseInstanceID = stateAndPhase.getGUID().toString();
			if (stateAndPhase.getStartPoint()){
				chartXML += " <set x='"+xValue+"' y='"+yValue+"' width='100' height='50' name='"+statePhaseame+"' color='1BE059' id='"+stateAndPhaseInstanceID+"' imageNode='0' labelAlign='top' imageAlign='middle' alpha='100' allowDrag='1'/>";
			}
			else
				chartXML += " <set x='"+xValue+"' y='"+yValue+"' width='100' height='50' name='"+statePhaseame+"' color='FFFFFF' id='"+stateAndPhaseInstanceID+"' imageNode='0' labelAlign='top' imageAlign='middle' alpha='100' allowDrag='1'/>";
			
			//chartXMLSet += " <set x='"+xValue+"' y='"+yValue+"' width='100' height='50' name='"+statePhaseame+"' color='FFFFFF' id='"+stateAndPhaseInstanceID+"' imageNode='0' labelAlign='top' imageAlign='middle' alpha='100' allowDrag='1'/>";

		}
		
		//Standaard stuff voor connectors
		chartXML +=chartXMLSet;
chartXML += "</dataset>";
		
		Iterator<Relation> phaseAndStateRelationIterator = Relations.iterator();
		
		String connectors= "<connectors alpha='50' color='000000' stdThickness='8'>";
		
		Map<String,String> labelMap = new HashMap<String,String>();
		Map<String,Boolean> arrowBothDirectionMap = new HashMap<String,Boolean>();
		
		Map<String,String> parentMap = new HashMap<String,String>();
		Map<String,String> childMap = new HashMap<String,String>();
		
		while (phaseAndStateRelationIterator.hasNext()) {
			Relation phaseAndStateRelation = phaseAndStateRelationIterator.next();	
			UniquePhaseStateCombinations parentPhaseAndState = phaseAndStateRelation.getRelation_UniquePhaseStateCombinationsParent();
			UniquePhaseStateCombinations childPhaseAndState = phaseAndStateRelation.getRelation_UniquePhaseStateCombinationsChild();
			String ActionName = phaseAndStateRelation.getActionLabel();
			
			String key = parentPhaseAndState.getGUID().toString()+"-"+childPhaseAndState.getGUID().toString();
			String reverseKey = childPhaseAndState.getGUID().toString()+"-"+parentPhaseAndState.getGUID().toString();
			if(labelMap.containsKey(key)) {
				labelMap.put(key, labelMap.get(key) + "," + ActionName);
			} else if (labelMap.containsKey(reverseKey) ) {
				if (!arrowBothDirectionMap.get(reverseKey)) {
					labelMap.put(reverseKey, ActionName + System.getProperty("line.separator") + labelMap.get(reverseKey) );
					arrowBothDirectionMap.put(reverseKey, true);
				} else {
					labelMap.put(reverseKey, ActionName + "," + labelMap.get(reverseKey) );
				}
				
			} else {
				labelMap.put(key, ActionName);
				arrowBothDirectionMap.put(key, false);
				parentMap.put(key, parentPhaseAndState.getGUID().toString());
				childMap.put(key, childPhaseAndState.getGUID().toString());
			}
		}
		
		for(String key:labelMap.keySet()) {
			
		connectors +=" <connector strength='0.55' from='"+childMap.get(key)+"' label ='"+labelMap.get(key)+"' to='"+parentMap.get(key)+"' color='"+"33ccff"+"' arrowAtStart='1' arrowAtEnd='"+(arrowBothDirectionMap.get(key)?"1":"0")+"'/>";
		}
		
		connectors += "</connectors>";
		
		chartXML += connectors;
		
		String labels = "<labels><label text='"+MatrixParameter1.getName()+"' x='100' y='750' color='EFEFEF' borderColor='0F6A00' fontsize='18' bgColor='35AE00'/></labels>";
		chartXML += labels;
		chartXML += "</chart>";
		
		return chartXML;
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "CreateTreeLayout";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
