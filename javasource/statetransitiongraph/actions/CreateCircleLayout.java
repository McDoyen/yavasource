// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package statetransitiongraph.actions;

import statetransitiongraph.proxies.Relation;
import statetransitiongraph.proxies.UniquePhaseStateCombinations;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.CoreException;
import edu.uci.ics.jung.algorithms.layout.AbstractLayout;
import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import edu.uci.ics.jung.graph.util.EdgeType;
import java.awt.Dimension;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class CreateCircleLayout extends CustomJavaAction<java.lang.String>
{
	private java.util.List<IMendixObject> __UniquePhaseStateCombinationList;
	private java.util.List<statetransitiongraph.proxies.UniquePhaseStateCombinations> UniquePhaseStateCombinationList;
	private java.util.List<IMendixObject> __Relations;
	private java.util.List<statetransitiongraph.proxies.Relation> Relations;
	private IMendixObject __MatrixParameter1;
	private statetransition.proxies.Matrix MatrixParameter1;

	public CreateCircleLayout(IContext context, java.util.List<IMendixObject> UniquePhaseStateCombinationList, java.util.List<IMendixObject> Relations, IMendixObject MatrixParameter1)
	{
		super(context);
		this.__UniquePhaseStateCombinationList = UniquePhaseStateCombinationList;
		this.__Relations = Relations;
		this.__MatrixParameter1 = MatrixParameter1;
	}

	@Override
	public java.lang.String executeAction() throws Exception
	{
		this.UniquePhaseStateCombinationList = new java.util.ArrayList<statetransitiongraph.proxies.UniquePhaseStateCombinations>();
		if (__UniquePhaseStateCombinationList != null)
			for (IMendixObject __UniquePhaseStateCombinationListElement : __UniquePhaseStateCombinationList)
				this.UniquePhaseStateCombinationList.add(statetransitiongraph.proxies.UniquePhaseStateCombinations.initialize(getContext(), __UniquePhaseStateCombinationListElement));

		this.Relations = new java.util.ArrayList<statetransitiongraph.proxies.Relation>();
		if (__Relations != null)
			for (IMendixObject __RelationsElement : __Relations)
				this.Relations.add(statetransitiongraph.proxies.Relation.initialize(getContext(), __RelationsElement));

		this.MatrixParameter1 = __MatrixParameter1 == null ? null : statetransition.proxies.Matrix.initialize(getContext(), __MatrixParameter1);

		// BEGIN USER CODE
		AbstractLayout<String, String> layout;
		layout = createChartCircleLayout();
		
		Iterator<UniquePhaseStateCombinations> stateAndPhaseIterator = UniquePhaseStateCombinationList.iterator();
		
		String chartXML="<chart bgcolor='FFFFFF' charttopmargin='0' chartleftmargin='0' chartrightmargin='0' bordercolor='FFFFFF' canvasbordercolor='DFBAAD' xAxisMinValue='0' xAxisMaxValue='100' yAxisMinValue='0' yAxisMaxValue='100' bubbleScale='3' is3D='1' numDivLines='0' showFormBtn='0' ><dataset plotborderAlpha='0' >";
		
		
		while (stateAndPhaseIterator.hasNext()) {
			UniquePhaseStateCombinations stateAndPhase = stateAndPhaseIterator.next();
			
			int x = (int)layout.getX(stateAndPhase.getGUID());
			int y = (int)layout.getY(stateAndPhase.getGUID());
			
			String statePhaseame = stateAndPhase.getPhase()+System.getProperty("line.separator")+stateAndPhase.getState();
			
			String stateAndPhaseInstanceID = stateAndPhase.getGUID().toString();
			
			if (stateAndPhase.getStartPoint()){
				chartXML += " <set x='"+x+"' y='"+y+"' width='100' height='50' name='"+statePhaseame+"' color='1BE059' id='"+stateAndPhaseInstanceID+"' imageNode='0' labelAlign='top' imageAlign='middle' alpha='100' allowDrag='1'/>";
			}
			else
				chartXML += " <set x='"+x+"' y='"+y+"' width='100' height='50' name='"+statePhaseame+"' color='FFFFFF' id='"+stateAndPhaseInstanceID+"' imageNode='0' labelAlign='top' imageAlign='middle' alpha='100' allowDrag='1'/>";
			
		}	
		
		chartXML += "</dataset>";
		
		Iterator<Relation> phaseAndStateRelationIterator = Relations.iterator();
		
		String connectors= "<connectors alpha='50' color='000000' stdThickness='8'>";
		
		Map<String,String> labelMap = new HashMap<String,String>();
		Map<String,Boolean> arrowBothDirectionMap = new HashMap<String,Boolean>();
		
		Map<String,String> parentMap = new HashMap<String,String>();
		Map<String,String> childMap = new HashMap<String,String>();
		
		while (phaseAndStateRelationIterator.hasNext()) {
			Relation phaseAndStateRelation = phaseAndStateRelationIterator.next();	
			UniquePhaseStateCombinations parentPhaseAndState = phaseAndStateRelation.getRelation_UniquePhaseStateCombinationsParent();
			UniquePhaseStateCombinations childPhaseAndState = phaseAndStateRelation.getRelation_UniquePhaseStateCombinationsChild();
			String ActionName = phaseAndStateRelation.getActionLabel();
			
			String key = parentPhaseAndState.getGUID().toString()+"-"+childPhaseAndState.getGUID().toString();
			String reverseKey = childPhaseAndState.getGUID().toString()+"-"+parentPhaseAndState.getGUID().toString();
			if(labelMap.containsKey(key)) {
				labelMap.put(key, labelMap.get(key) + "," + ActionName);
			} else if (labelMap.containsKey(reverseKey) ) {
				if (!arrowBothDirectionMap.get(reverseKey)) {
					labelMap.put(reverseKey, ActionName + System.getProperty("line.separator") + labelMap.get(reverseKey) );
					arrowBothDirectionMap.put(reverseKey, true);
				} else {
					labelMap.put(reverseKey, ActionName + "," + labelMap.get(reverseKey) );
				}
				
			} else {
				labelMap.put(key, ActionName);
				arrowBothDirectionMap.put(key, false);
				parentMap.put(key, parentPhaseAndState.getGUID().toString());
				childMap.put(key, childPhaseAndState.getGUID().toString());
			}
		}
		
		for(String key:labelMap.keySet()) {
			
		connectors +=" <connector strength='0.55' from='"+childMap.get(key)+"' label ='"+labelMap.get(key)+"' to='"+parentMap.get(key)+"' color='"+"33ccff"+"' arrowAtStart='1' arrowAtEnd='"+(arrowBothDirectionMap.get(key)?"1":"0")+"'/>";
		}
		
		connectors += "</connectors>";
		
		chartXML += connectors;
		
		String labels = "<labels><label text='"+MatrixParameter1.getName()+"' x='100' y='750' color='EFEFEF' borderColor='0F6A00' fontsize='18' bgColor='35AE00'/></labels>";
		chartXML += labels;
		chartXML += "</chart>";
		
		return chartXML;
	
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "CreateCircleLayout";
	}

	// BEGIN EXTRA CODE
	private CircleLayout<String, String> createChartCircleLayout() throws CoreException {
		DirectedSparseMultigraph<String, String> g = createGraph();
	
		CircleLayout<String, String> layout = new CircleLayout<String, String>(g);
		layout.setSize(new Dimension(1000,800));
		
		return layout;
	}
	
	private DirectedSparseMultigraph<String, String> createGraph() throws CoreException {
		DirectedSparseMultigraph<String, String> g = new DirectedSparseMultigraph<String, String>();

		Iterator<UniquePhaseStateCombinations> uniquePhaseStateCombinationIterator = UniquePhaseStateCombinationList.iterator();
		Iterator<Relation> RelationIterator = Relations.iterator();

		while (uniquePhaseStateCombinationIterator.hasNext()) {	
			UniquePhaseStateCombinations combi = uniquePhaseStateCombinationIterator.next();
			g.addVertex(combi.getGUID());
		}

		while (RelationIterator.hasNext()) {
			Relation statePhaseRelation = RelationIterator.next();
	
			UniquePhaseStateCombinations parentStateAndPhase = statePhaseRelation.getRelation_UniquePhaseStateCombinationsParent();
			UniquePhaseStateCombinations childStateAndPhase = statePhaseRelation.getRelation_UniquePhaseStateCombinationsChild();
			
			g.addEdge(childStateAndPhase.getGUID()+"-"+parentStateAndPhase.getGUID(),childStateAndPhase.getGUID(), parentStateAndPhase.getGUID(), EdgeType.DIRECTED);
		}
		return g;
	}
	

	// END EXTRA CODE
}
