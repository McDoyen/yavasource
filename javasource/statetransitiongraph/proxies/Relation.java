// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package statetransitiongraph.proxies;

public class Relation
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject relationMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "StateTransitionGraph.Relation";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		ActionLabel("ActionLabel"),
		Relation_UniquePhaseStateCombinationsParent("StateTransitionGraph.Relation_UniquePhaseStateCombinationsParent"),
		Relation_UniquePhaseStateCombinationsChild("StateTransitionGraph.Relation_UniquePhaseStateCombinationsChild");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Relation(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "StateTransitionGraph.Relation"));
	}

	protected Relation(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject relationMendixObject)
	{
		if (relationMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("StateTransitionGraph.Relation", relationMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a StateTransitionGraph.Relation");

		this.relationMendixObject = relationMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Relation.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static statetransitiongraph.proxies.Relation initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return statetransitiongraph.proxies.Relation.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static statetransitiongraph.proxies.Relation initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new statetransitiongraph.proxies.Relation(context, mendixObject);
	}

	public static statetransitiongraph.proxies.Relation load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return statetransitiongraph.proxies.Relation.initialize(context, mendixObject);
	}

	public static java.util.List<statetransitiongraph.proxies.Relation> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<statetransitiongraph.proxies.Relation> result = new java.util.ArrayList<statetransitiongraph.proxies.Relation>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//StateTransitionGraph.Relation" + xpathConstraint))
			result.add(statetransitiongraph.proxies.Relation.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of ActionLabel
	 */
	public final java.lang.String getActionLabel()
	{
		return getActionLabel(getContext());
	}

	/**
	 * @param context
	 * @return value of ActionLabel
	 */
	public final java.lang.String getActionLabel(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ActionLabel.toString());
	}

	/**
	 * Set value of ActionLabel
	 * @param actionlabel
	 */
	public final void setActionLabel(java.lang.String actionlabel)
	{
		setActionLabel(getContext(), actionlabel);
	}

	/**
	 * Set value of ActionLabel
	 * @param context
	 * @param actionlabel
	 */
	public final void setActionLabel(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String actionlabel)
	{
		getMendixObject().setValue(context, MemberNames.ActionLabel.toString(), actionlabel);
	}

	/**
	 * @return value of Relation_UniquePhaseStateCombinationsParent
	 */
	public final statetransitiongraph.proxies.UniquePhaseStateCombinations getRelation_UniquePhaseStateCombinationsParent() throws com.mendix.core.CoreException
	{
		return getRelation_UniquePhaseStateCombinationsParent(getContext());
	}

	/**
	 * @param context
	 * @return value of Relation_UniquePhaseStateCombinationsParent
	 */
	public final statetransitiongraph.proxies.UniquePhaseStateCombinations getRelation_UniquePhaseStateCombinationsParent(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		statetransitiongraph.proxies.UniquePhaseStateCombinations result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Relation_UniquePhaseStateCombinationsParent.toString());
		if (identifier != null)
			result = statetransitiongraph.proxies.UniquePhaseStateCombinations.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Relation_UniquePhaseStateCombinationsParent
	 * @param relation_uniquephasestatecombinationsparent
	 */
	public final void setRelation_UniquePhaseStateCombinationsParent(statetransitiongraph.proxies.UniquePhaseStateCombinations relation_uniquephasestatecombinationsparent)
	{
		setRelation_UniquePhaseStateCombinationsParent(getContext(), relation_uniquephasestatecombinationsparent);
	}

	/**
	 * Set value of Relation_UniquePhaseStateCombinationsParent
	 * @param context
	 * @param relation_uniquephasestatecombinationsparent
	 */
	public final void setRelation_UniquePhaseStateCombinationsParent(com.mendix.systemwideinterfaces.core.IContext context, statetransitiongraph.proxies.UniquePhaseStateCombinations relation_uniquephasestatecombinationsparent)
	{
		if (relation_uniquephasestatecombinationsparent == null)
			getMendixObject().setValue(context, MemberNames.Relation_UniquePhaseStateCombinationsParent.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Relation_UniquePhaseStateCombinationsParent.toString(), relation_uniquephasestatecombinationsparent.getMendixObject().getId());
	}

	/**
	 * @return value of Relation_UniquePhaseStateCombinationsChild
	 */
	public final statetransitiongraph.proxies.UniquePhaseStateCombinations getRelation_UniquePhaseStateCombinationsChild() throws com.mendix.core.CoreException
	{
		return getRelation_UniquePhaseStateCombinationsChild(getContext());
	}

	/**
	 * @param context
	 * @return value of Relation_UniquePhaseStateCombinationsChild
	 */
	public final statetransitiongraph.proxies.UniquePhaseStateCombinations getRelation_UniquePhaseStateCombinationsChild(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		statetransitiongraph.proxies.UniquePhaseStateCombinations result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Relation_UniquePhaseStateCombinationsChild.toString());
		if (identifier != null)
			result = statetransitiongraph.proxies.UniquePhaseStateCombinations.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Relation_UniquePhaseStateCombinationsChild
	 * @param relation_uniquephasestatecombinationschild
	 */
	public final void setRelation_UniquePhaseStateCombinationsChild(statetransitiongraph.proxies.UniquePhaseStateCombinations relation_uniquephasestatecombinationschild)
	{
		setRelation_UniquePhaseStateCombinationsChild(getContext(), relation_uniquephasestatecombinationschild);
	}

	/**
	 * Set value of Relation_UniquePhaseStateCombinationsChild
	 * @param context
	 * @param relation_uniquephasestatecombinationschild
	 */
	public final void setRelation_UniquePhaseStateCombinationsChild(com.mendix.systemwideinterfaces.core.IContext context, statetransitiongraph.proxies.UniquePhaseStateCombinations relation_uniquephasestatecombinationschild)
	{
		if (relation_uniquephasestatecombinationschild == null)
			getMendixObject().setValue(context, MemberNames.Relation_UniquePhaseStateCombinationsChild.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Relation_UniquePhaseStateCombinationsChild.toString(), relation_uniquephasestatecombinationschild.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return relationMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final statetransitiongraph.proxies.Relation that = (statetransitiongraph.proxies.Relation) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "StateTransitionGraph.Relation";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
