// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package statetransitiongraph.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the StateTransitionGraph module
	public static java.util.List<statetransition.proxies.Transition> addedTransitions(IContext context, statetransition.proxies.Matrix _matrix)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "StateTransitionGraph.AddedTransitions", params);
			java.util.List<statetransition.proxies.Transition> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<statetransition.proxies.Transition>();
				for (IMendixObject obj : objs)
					result.add(statetransition.proxies.Transition.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkAndCreatePhaseInMatrix(IContext context, statetransition.proxies.Matrix _matrix, statetransition.proxies.Phase _phase)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			params.put("Phase", _phase == null ? null : _phase.getMendixObject());
			Core.execute(context, "StateTransitionGraph.CheckAndCreatePhaseInMatrix", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkAndCreateStateInMatrix(IContext context, statetransition.proxies.Matrix _matrix, statetransition.proxies.State _state)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			params.put("State", _state == null ? null : _state.getMendixObject());
			Core.execute(context, "StateTransitionGraph.CheckAndCreateStateInMatrix", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkOneSelectedAndStartTreeLayout(IContext context, java.util.List<statetransition.proxies.Matrix> _matrixList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_matrixList = null;
			if (_matrixList != null)
			{
				listparam_matrixList = new java.util.ArrayList<IMendixObject>();
				for (statetransition.proxies.Matrix obj : _matrixList)
					listparam_matrixList.add(obj.getMendixObject());
			}
			params.put("MatrixList", listparam_matrixList);
			Core.execute(context, "StateTransitionGraph.CheckOneSelectedAndStartTreeLayout", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createGraphData(IContext context, statetransition.proxies.Matrix _matrix, boolean _tree)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			params.put("tree", _tree);
			Core.execute(context, "StateTransitionGraph.CreateGraphData", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<statetransition.proxies.Phase> createPhaseList(IContext context, statetransition.proxies.Matrix _matrix, statetransition.proxies.TypeOfPhaseOrState _typeOfPhase)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			params.put("TypeOfPhase", _typeOfPhase == null ? null : _typeOfPhase.name());
			java.util.List<IMendixObject> objs = Core.execute(context, "StateTransitionGraph.CreatePhaseList", params);
			java.util.List<statetransition.proxies.Phase> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<statetransition.proxies.Phase>();
				for (IMendixObject obj : objs)
					result.add(statetransition.proxies.Phase.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createPhaseStateCombination(IContext context, statetransition.proxies.Phase _phase, statetransition.proxies.State _state, statetransition.proxies.Matrix _matrix, statetransition.proxies.Transition _transition)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Phase", _phase == null ? null : _phase.getMendixObject());
			params.put("State", _state == null ? null : _state.getMendixObject());
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			params.put("Transition", _transition == null ? null : _transition.getMendixObject());
			Core.execute(context, "StateTransitionGraph.CreatePhaseStateCombination", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<statetransition.proxies.State> createStateList(IContext context, statetransition.proxies.Matrix _matrix, statetransition.proxies.TypeOfPhaseOrState _typeOfState)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			params.put("TypeOfState", _typeOfState == null ? null : _typeOfState.name());
			java.util.List<IMendixObject> objs = Core.execute(context, "StateTransitionGraph.CreateStateList", params);
			java.util.List<statetransition.proxies.State> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<statetransition.proxies.State>();
				for (IMendixObject obj : objs)
					result.add(statetransition.proxies.State.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createStatePhaseCombinations(IContext context, statetransition.proxies.Matrix _matrix, java.util.List<statetransition.proxies.Transition> _transitionList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_transitionList = null;
			if (_transitionList != null)
			{
				listparam_transitionList = new java.util.ArrayList<IMendixObject>();
				for (statetransition.proxies.Transition obj : _transitionList)
					listparam_transitionList.add(obj.getMendixObject());
			}
			params.put("TransitionList", listparam_transitionList);
			Core.execute(context, "StateTransitionGraph.CreateStatePhaseCombinations", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createXMLData(IContext context, statetransition.proxies.Matrix _matrix, boolean _tree)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			params.put("Tree", _tree);
			Core.execute(context, "StateTransitionGraph.CreateXMLData", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean getLevelInfoAndSetOrders(IContext context, statetransitiongraph.proxies.UniquePhaseStateCombinations _uniquePhaseStateCombinations)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UniquePhaseStateCombinations", _uniquePhaseStateCombinations == null ? null : _uniquePhaseStateCombinations.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "StateTransitionGraph.GetLevelInfoAndSetOrders", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void getPhaseAndStatesFromMatrix(IContext context, statetransition.proxies.Matrix _matrix, boolean _tree)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Matrix", _matrix == null ? null : _matrix.getMendixObject());
			params.put("Tree", _tree);
			Core.execute(context, "StateTransitionGraph.GetPhaseAndStatesFromMatrix", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean setIsStartPoint(IContext context, statetransitiongraph.proxies.UniquePhaseStateCombinations _uniquePhaseStateCombinations)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UniquePhaseStateCombinations", _uniquePhaseStateCombinations == null ? null : _uniquePhaseStateCombinations.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "StateTransitionGraph.SetIsStartPoint", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}