// This file was generated by Mendix Business Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package approval.actions;

import interfaceldap.LDAPLoginAction;
import interfaceldap.LDAPModule;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IUser;
import com.mendix.webui.CustomJavaAction;

/**
 * 
 */
public class UU95_AuthenticateForApproval extends CustomJavaAction<Boolean>
{
	private IMendixObject __ApprovalUser;
	private system.proxies.User ApprovalUser;
	private String Password;
	private IMendixObject __CurrentUserPar;
	private system.proxies.User CurrentUserPar;

	public UU95_AuthenticateForApproval(IContext context, IMendixObject ApprovalUser, String Password, IMendixObject CurrentUserPar)
	{
		super(context);
		this.__ApprovalUser = ApprovalUser;
		this.Password = Password;
		this.__CurrentUserPar = CurrentUserPar;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		this.ApprovalUser = __ApprovalUser == null ? null : system.proxies.User.initialize(getContext(), __ApprovalUser);

		this.CurrentUserPar = __CurrentUserPar == null ? null : system.proxies.User.initialize(getContext(), __CurrentUserPar);

		// BEGIN USER CODE
		IContext context = this.getContext();
		String userName = ApprovalUser.getName();
		IUser user = Core.getUser(context, userName);
		if (user != null){
			if (Password!=null && !Password.isEmpty()) {
				if (CurrentUserPar.getName().equals(ApprovalUser.getName())) {
					if(LDAPLoginAction.ldapAuthenticationEnabled() && !LDAPLoginAction.useLocalAuthentication(userName)){
						if (LDAPModule.getInstance().authenticateUser(this.getContext(), userName, Password)) {
							return true;
						}
						else{
							Core.getLogger("AuthenticateForApproval").error("LDAPLogin FAILED: invalid credentials for user " + userName);
						}
					}
					else{
						if(Core.authenticate(this.getContext(), user, Password)){
							return true;
						}
						else{
							Core.getLogger("AuthenticateForApproval").error("LocalLogin FAILED: invalid credentials for user " + userName);
						}
					}
				}
				else{
					Core.getLogger("AuthenticateForApproval").error("Logged on user does not match approval person: " + CurrentUserPar.getName() + ", " + ApprovalUser.getName());
				}
			}
			else{
				Core.getLogger("AuthenticateForApproval").error("Login FAILED: empty password");
			}
		}
		else{
			Core.getLogger("AuthenticateForApproval").error("Login FAILED: unknown local user " + userName + " , is the userbase in sync?");
			
		}
		return false;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "AuthenticateForApproval";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
