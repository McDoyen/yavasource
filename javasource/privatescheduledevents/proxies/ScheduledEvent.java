// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package privatescheduledevents.proxies;

public class ScheduledEvent
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject scheduledEventMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "PrivateScheduledEvents.ScheduledEvent";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		MicroflowName("MicroflowName"),
		Frequency("Frequency"),
		Offset("Offset"),
		LastRun("LastRun"),
		IsRunning("IsRunning"),
		Enabled("Enabled"),
		CheckDelay("CheckDelay"),
		CleanAudit("CleanAudit");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ScheduledEvent(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "PrivateScheduledEvents.ScheduledEvent"));
	}

	protected ScheduledEvent(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject scheduledEventMendixObject)
	{
		if (scheduledEventMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("PrivateScheduledEvents.ScheduledEvent", scheduledEventMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a PrivateScheduledEvents.ScheduledEvent");

		this.scheduledEventMendixObject = scheduledEventMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'ScheduledEvent.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static privatescheduledevents.proxies.ScheduledEvent initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return privatescheduledevents.proxies.ScheduledEvent.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static privatescheduledevents.proxies.ScheduledEvent initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new privatescheduledevents.proxies.ScheduledEvent(context, mendixObject);
	}

	public static privatescheduledevents.proxies.ScheduledEvent load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return privatescheduledevents.proxies.ScheduledEvent.initialize(context, mendixObject);
	}

	public static java.util.List<privatescheduledevents.proxies.ScheduledEvent> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<privatescheduledevents.proxies.ScheduledEvent> result = new java.util.ArrayList<privatescheduledevents.proxies.ScheduledEvent>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//PrivateScheduledEvents.ScheduledEvent" + xpathConstraint))
			result.add(privatescheduledevents.proxies.ScheduledEvent.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of MicroflowName
	 */
	public final java.lang.String getMicroflowName()
	{
		return getMicroflowName(getContext());
	}

	/**
	 * @param context
	 * @return value of MicroflowName
	 */
	public final java.lang.String getMicroflowName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.MicroflowName.toString());
	}

	/**
	 * Set value of MicroflowName
	 * @param microflowname
	 */
	public final void setMicroflowName(java.lang.String microflowname)
	{
		setMicroflowName(getContext(), microflowname);
	}

	/**
	 * Set value of MicroflowName
	 * @param context
	 * @param microflowname
	 */
	public final void setMicroflowName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String microflowname)
	{
		getMendixObject().setValue(context, MemberNames.MicroflowName.toString(), microflowname);
	}

	/**
	 * @return value of Frequency
	 */
	public final java.lang.Integer getFrequency()
	{
		return getFrequency(getContext());
	}

	/**
	 * @param context
	 * @return value of Frequency
	 */
	public final java.lang.Integer getFrequency(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.Frequency.toString());
	}

	/**
	 * Set value of Frequency
	 * @param frequency
	 */
	public final void setFrequency(java.lang.Integer frequency)
	{
		setFrequency(getContext(), frequency);
	}

	/**
	 * Set value of Frequency
	 * @param context
	 * @param frequency
	 */
	public final void setFrequency(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer frequency)
	{
		getMendixObject().setValue(context, MemberNames.Frequency.toString(), frequency);
	}

	/**
	 * @return value of Offset
	 */
	public final java.lang.Integer getOffset()
	{
		return getOffset(getContext());
	}

	/**
	 * @param context
	 * @return value of Offset
	 */
	public final java.lang.Integer getOffset(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.Offset.toString());
	}

	/**
	 * Set value of Offset
	 * @param offset
	 */
	public final void setOffset(java.lang.Integer offset)
	{
		setOffset(getContext(), offset);
	}

	/**
	 * Set value of Offset
	 * @param context
	 * @param offset
	 */
	public final void setOffset(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer offset)
	{
		getMendixObject().setValue(context, MemberNames.Offset.toString(), offset);
	}

	/**
	 * @return value of LastRun
	 */
	public final java.util.Date getLastRun()
	{
		return getLastRun(getContext());
	}

	/**
	 * @param context
	 * @return value of LastRun
	 */
	public final java.util.Date getLastRun(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.LastRun.toString());
	}

	/**
	 * Set value of LastRun
	 * @param lastrun
	 */
	public final void setLastRun(java.util.Date lastrun)
	{
		setLastRun(getContext(), lastrun);
	}

	/**
	 * Set value of LastRun
	 * @param context
	 * @param lastrun
	 */
	public final void setLastRun(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date lastrun)
	{
		getMendixObject().setValue(context, MemberNames.LastRun.toString(), lastrun);
	}

	/**
	 * @return value of IsRunning
	 */
	public final java.lang.Boolean getIsRunning()
	{
		return getIsRunning(getContext());
	}

	/**
	 * @param context
	 * @return value of IsRunning
	 */
	public final java.lang.Boolean getIsRunning(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.IsRunning.toString());
	}

	/**
	 * Set value of IsRunning
	 * @param isrunning
	 */
	public final void setIsRunning(java.lang.Boolean isrunning)
	{
		setIsRunning(getContext(), isrunning);
	}

	/**
	 * Set value of IsRunning
	 * @param context
	 * @param isrunning
	 */
	public final void setIsRunning(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean isrunning)
	{
		getMendixObject().setValue(context, MemberNames.IsRunning.toString(), isrunning);
	}

	/**
	 * @return value of Enabled
	 */
	public final java.lang.Boolean getEnabled()
	{
		return getEnabled(getContext());
	}

	/**
	 * @param context
	 * @return value of Enabled
	 */
	public final java.lang.Boolean getEnabled(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Enabled.toString());
	}

	/**
	 * Set value of Enabled
	 * @param enabled
	 */
	public final void setEnabled(java.lang.Boolean enabled)
	{
		setEnabled(getContext(), enabled);
	}

	/**
	 * Set value of Enabled
	 * @param context
	 * @param enabled
	 */
	public final void setEnabled(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean enabled)
	{
		getMendixObject().setValue(context, MemberNames.Enabled.toString(), enabled);
	}

	/**
	 * @return value of CheckDelay
	 */
	public final java.lang.Integer getCheckDelay()
	{
		return getCheckDelay(getContext());
	}

	/**
	 * @param context
	 * @return value of CheckDelay
	 */
	public final java.lang.Integer getCheckDelay(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.CheckDelay.toString());
	}

	/**
	 * Set value of CheckDelay
	 * @param checkdelay
	 */
	public final void setCheckDelay(java.lang.Integer checkdelay)
	{
		setCheckDelay(getContext(), checkdelay);
	}

	/**
	 * Set value of CheckDelay
	 * @param context
	 * @param checkdelay
	 */
	public final void setCheckDelay(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer checkdelay)
	{
		getMendixObject().setValue(context, MemberNames.CheckDelay.toString(), checkdelay);
	}

	/**
	 * @return value of CleanAudit
	 */
	public final java.lang.Integer getCleanAudit()
	{
		return getCleanAudit(getContext());
	}

	/**
	 * @param context
	 * @return value of CleanAudit
	 */
	public final java.lang.Integer getCleanAudit(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.CleanAudit.toString());
	}

	/**
	 * Set value of CleanAudit
	 * @param cleanaudit
	 */
	public final void setCleanAudit(java.lang.Integer cleanaudit)
	{
		setCleanAudit(getContext(), cleanaudit);
	}

	/**
	 * Set value of CleanAudit
	 * @param context
	 * @param cleanaudit
	 */
	public final void setCleanAudit(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer cleanaudit)
	{
		getMendixObject().setValue(context, MemberNames.CleanAudit.toString(), cleanaudit);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return scheduledEventMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final privatescheduledevents.proxies.ScheduledEvent that = (privatescheduledevents.proxies.ScheduledEvent) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "PrivateScheduledEvents.ScheduledEvent";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
