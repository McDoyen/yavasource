// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package privatescheduledevents.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;

public class Microflows
{
	// These are the microflows for the PrivateScheduledEvents module
	public static void afterStartup(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PrivateScheduledEvents.AfterStartup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cleanUpAudit(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PrivateScheduledEvents.CleanUpAudit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DeleteAll(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PrivateScheduledEvents.IVK_DeleteAll", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenPrivateScheduledEventOverview(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PrivateScheduledEvents.IVK_OpenPrivateScheduledEventOverview", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenScheduledEvents(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PrivateScheduledEvents.IVK_OpenScheduledEvents", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_OpenScheduledEventsAudit(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PrivateScheduledEvents.IVK_OpenScheduledEventsAudit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean iVK_Start(IContext context, privatescheduledevents.proxies.ScheduledEvent _scheduledEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledEvent", _scheduledEvent == null ? null : _scheduledEvent.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "PrivateScheduledEvents.IVK_Start", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_StartAll(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PrivateScheduledEvents.IVK_StartAll", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Stop(IContext context, privatescheduledevents.proxies.ScheduledEvent _scheduledEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledEvent", _scheduledEvent == null ? null : _scheduledEvent.getMendixObject());
			Core.execute(context, "PrivateScheduledEvents.IVK_Stop", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_StopAll(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PrivateScheduledEvents.IVK_StopAll", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void save_PrivateScheduledEvent(IContext context, privatescheduledevents.proxies.ScheduledEvent _scheduledEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledEvent", _scheduledEvent == null ? null : _scheduledEvent.getMendixObject());
			Core.execute(context, "PrivateScheduledEvents.Save_PrivateScheduledEvent", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean scheduledEventIsRunning_Field(IContext context, privatescheduledevents.proxies.ScheduledEvent _scheduledEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledEvent", _scheduledEvent == null ? null : _scheduledEvent.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "PrivateScheduledEvents.ScheduledEventIsRunning_Field", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void selfCheck(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "PrivateScheduledEvents.SelfCheck", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void stopOrStartOnEnableAndDisable(IContext context, privatescheduledevents.proxies.ScheduledEvent _scheduledEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ScheduledEvent", _scheduledEvent == null ? null : _scheduledEvent.getMendixObject());
			Core.execute(context, "PrivateScheduledEvents.StopOrStartOnEnableAndDisable", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}