// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package userstatistics.proxies;

public class ConcurrentUserInfo
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject concurrentUserInfoMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "UserStatistics.ConcurrentUserInfo";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Timestamp("Timestamp"),
		Total("Total"),
		Named("Named"),
		Anonymous("Anonymous"),
		Webservice("Webservice"),
		ServerName("ServerName"),
		ConcurrentUserInfo_LicensePool("UserStatistics.ConcurrentUserInfo_LicensePool");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ConcurrentUserInfo(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "UserStatistics.ConcurrentUserInfo"));
	}

	protected ConcurrentUserInfo(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject concurrentUserInfoMendixObject)
	{
		if (concurrentUserInfoMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("UserStatistics.ConcurrentUserInfo", concurrentUserInfoMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a UserStatistics.ConcurrentUserInfo");

		this.concurrentUserInfoMendixObject = concurrentUserInfoMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'ConcurrentUserInfo.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static userstatistics.proxies.ConcurrentUserInfo initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return userstatistics.proxies.ConcurrentUserInfo.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static userstatistics.proxies.ConcurrentUserInfo initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new userstatistics.proxies.ConcurrentUserInfo(context, mendixObject);
	}

	public static userstatistics.proxies.ConcurrentUserInfo load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return userstatistics.proxies.ConcurrentUserInfo.initialize(context, mendixObject);
	}

	public static java.util.List<userstatistics.proxies.ConcurrentUserInfo> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<userstatistics.proxies.ConcurrentUserInfo> result = new java.util.ArrayList<userstatistics.proxies.ConcurrentUserInfo>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//UserStatistics.ConcurrentUserInfo" + xpathConstraint))
			result.add(userstatistics.proxies.ConcurrentUserInfo.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Timestamp
	 */
	public final java.util.Date getTimestamp()
	{
		return getTimestamp(getContext());
	}

	/**
	 * @param context
	 * @return value of Timestamp
	 */
	public final java.util.Date getTimestamp(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.Timestamp.toString());
	}

	/**
	 * Set value of Timestamp
	 * @param timestamp
	 */
	public final void setTimestamp(java.util.Date timestamp)
	{
		setTimestamp(getContext(), timestamp);
	}

	/**
	 * Set value of Timestamp
	 * @param context
	 * @param timestamp
	 */
	public final void setTimestamp(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date timestamp)
	{
		getMendixObject().setValue(context, MemberNames.Timestamp.toString(), timestamp);
	}

	/**
	 * @return value of Total
	 */
	public final java.lang.Integer getTotal()
	{
		return getTotal(getContext());
	}

	/**
	 * @param context
	 * @return value of Total
	 */
	public final java.lang.Integer getTotal(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.Total.toString());
	}

	/**
	 * Set value of Total
	 * @param total
	 */
	public final void setTotal(java.lang.Integer total)
	{
		setTotal(getContext(), total);
	}

	/**
	 * Set value of Total
	 * @param context
	 * @param total
	 */
	public final void setTotal(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer total)
	{
		getMendixObject().setValue(context, MemberNames.Total.toString(), total);
	}

	/**
	 * @return value of Named
	 */
	public final java.lang.Integer getNamed()
	{
		return getNamed(getContext());
	}

	/**
	 * @param context
	 * @return value of Named
	 */
	public final java.lang.Integer getNamed(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.Named.toString());
	}

	/**
	 * Set value of Named
	 * @param named
	 */
	public final void setNamed(java.lang.Integer named)
	{
		setNamed(getContext(), named);
	}

	/**
	 * Set value of Named
	 * @param context
	 * @param named
	 */
	public final void setNamed(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer named)
	{
		getMendixObject().setValue(context, MemberNames.Named.toString(), named);
	}

	/**
	 * @return value of Anonymous
	 */
	public final java.lang.Integer getAnonymous()
	{
		return getAnonymous(getContext());
	}

	/**
	 * @param context
	 * @return value of Anonymous
	 */
	public final java.lang.Integer getAnonymous(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.Anonymous.toString());
	}

	/**
	 * Set value of Anonymous
	 * @param anonymous
	 */
	public final void setAnonymous(java.lang.Integer anonymous)
	{
		setAnonymous(getContext(), anonymous);
	}

	/**
	 * Set value of Anonymous
	 * @param context
	 * @param anonymous
	 */
	public final void setAnonymous(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer anonymous)
	{
		getMendixObject().setValue(context, MemberNames.Anonymous.toString(), anonymous);
	}

	/**
	 * @return value of Webservice
	 */
	public final java.lang.Integer getWebservice()
	{
		return getWebservice(getContext());
	}

	/**
	 * @param context
	 * @return value of Webservice
	 */
	public final java.lang.Integer getWebservice(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.Webservice.toString());
	}

	/**
	 * Set value of Webservice
	 * @param webservice
	 */
	public final void setWebservice(java.lang.Integer webservice)
	{
		setWebservice(getContext(), webservice);
	}

	/**
	 * Set value of Webservice
	 * @param context
	 * @param webservice
	 */
	public final void setWebservice(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer webservice)
	{
		getMendixObject().setValue(context, MemberNames.Webservice.toString(), webservice);
	}

	/**
	 * @return value of ServerName
	 */
	public final java.lang.String getServerName()
	{
		return getServerName(getContext());
	}

	/**
	 * @param context
	 * @return value of ServerName
	 */
	public final java.lang.String getServerName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ServerName.toString());
	}

	/**
	 * Set value of ServerName
	 * @param servername
	 */
	public final void setServerName(java.lang.String servername)
	{
		setServerName(getContext(), servername);
	}

	/**
	 * Set value of ServerName
	 * @param context
	 * @param servername
	 */
	public final void setServerName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String servername)
	{
		getMendixObject().setValue(context, MemberNames.ServerName.toString(), servername);
	}

	/**
	 * @return value of ConcurrentUserInfo_LicensePool
	 */
	public final mendix.proxies.LicensePool getConcurrentUserInfo_LicensePool() throws com.mendix.core.CoreException
	{
		return getConcurrentUserInfo_LicensePool(getContext());
	}

	/**
	 * @param context
	 * @return value of ConcurrentUserInfo_LicensePool
	 */
	public final mendix.proxies.LicensePool getConcurrentUserInfo_LicensePool(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		mendix.proxies.LicensePool result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ConcurrentUserInfo_LicensePool.toString());
		if (identifier != null)
			result = mendix.proxies.LicensePool.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ConcurrentUserInfo_LicensePool
	 * @param concurrentuserinfo_licensepool
	 */
	public final void setConcurrentUserInfo_LicensePool(mendix.proxies.LicensePool concurrentuserinfo_licensepool)
	{
		setConcurrentUserInfo_LicensePool(getContext(), concurrentuserinfo_licensepool);
	}

	/**
	 * Set value of ConcurrentUserInfo_LicensePool
	 * @param context
	 * @param concurrentuserinfo_licensepool
	 */
	public final void setConcurrentUserInfo_LicensePool(com.mendix.systemwideinterfaces.core.IContext context, mendix.proxies.LicensePool concurrentuserinfo_licensepool)
	{
		if (concurrentuserinfo_licensepool == null)
			getMendixObject().setValue(context, MemberNames.ConcurrentUserInfo_LicensePool.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ConcurrentUserInfo_LicensePool.toString(), concurrentuserinfo_licensepool.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return concurrentUserInfoMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final userstatistics.proxies.ConcurrentUserInfo that = (userstatistics.proxies.ConcurrentUserInfo) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "UserStatistics.ConcurrentUserInfo";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
