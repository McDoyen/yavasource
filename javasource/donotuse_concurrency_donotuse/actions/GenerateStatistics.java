// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package donotuse_concurrency_donotuse.actions;

import java.util.Date;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataColumnSchema;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataRow;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTable;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import donotuse_concurrency_donotuse.proxies.LockObject;
import donotuse_concurrency_donotuse.proxies.Statistics;
import com.mendix.webui.CustomJavaAction;

public class GenerateStatistics extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __StatisticsPeriodParameter1;
	private donotuse_concurrency_donotuse.proxies.StatisticsPeriod StatisticsPeriodParameter1;

	public GenerateStatistics(IContext context, IMendixObject StatisticsPeriodParameter1)
	{
		super(context);
		this.__StatisticsPeriodParameter1 = StatisticsPeriodParameter1;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.StatisticsPeriodParameter1 = __StatisticsPeriodParameter1 == null ? null : donotuse_concurrency_donotuse.proxies.StatisticsPeriod.initialize(getContext(), __StatisticsPeriodParameter1);

		// BEGIN USER CODE
		IContext context = this.getContext();
		Core.getLogger("ExpertDesk").info("Concurrency Statistics: Retrieving data pass 1");
	    Date start = new Date();
		
		String oqlAllReplaced = oqlAll.replaceAll("#STATISTICS-PERIOD-ID#", new Long(__StatisticsPeriodParameter1.getId().toLong()).toString());
		Core.getLogger("ExpertDesk").debug("Concurrency Statistics: OQL Base replaced:" + oqlAllReplaced);
		IDataTable iDataTable = Core.retrieveOQLDataTable(context, oqlAllReplaced);

		
		
		int i=0;
		for (IDataRow dataRow:iDataTable.getRows()) {
			Core.getLogger("ExpertDesk").trace("Concurrency Statistics: row "+i);i++;
			Statistics stat = new Statistics(context);
			stat.setStartDate(StatisticsPeriodParameter1.getStartDate());
			stat.setEndDate(StatisticsPeriodParameter1.getEndDate());
			stat.setStatistics_StatisticsPeriod(StatisticsPeriodParameter1);
			for(IDataColumnSchema colDef:iDataTable.getSchema().getColumnSchemas()) {
				if (dataRow.getValue(context,colDef)!=null) {
					Core.getLogger("ExpertDesk").trace("Concurrency Statistics: column "+colDef.getName() + " with value " + dataRow.getValue(context,colDef));
					if (colDef.getName().equals("ID")) {
						stat.setStatistics_LockObject(LockObject.initialize(context, Core.retrieveId(context, Core.createMendixIdentifier((String) dataRow.getValue(context,colDef)))));
					} else {
						stat.getMendixObject().setValue(context, colDef.getName(), dataRow.getValue(context,colDef));
					}
				} else {
					Core.getLogger("ExpertDesk").debug("Concurrency Statistics: column "+colDef.getName() + " skipped for NULL value");					
				}
			}
			Core.commit(context, stat.getMendixObject());
		}

		context.endTransaction();
		Date middle = new Date();
		Core.getLogger("ExpertDesk").info("Concurrency Statistics: Pass 1 had "+iDataTable.getRowCount()+" rows. Retrieving data pass 2 after " + (middle.getTime() - start.getTime()) + " total milliseconds");
		context.startTransaction();

		// Now the std dev
		String oqlStdDevReplaced = oqlStdDev.replaceAll("#STATISTICS-PERIOD-ID#", new Long(__StatisticsPeriodParameter1.getId().toLong()).toString());
		Core.getLogger("ExpertDesk").debug("Concurrency Statistics: OQL StdDev replaced:" + oqlStdDevReplaced);
		IDataTable iDataTable2 = Core.retrieveOQLDataTable(context, oqlStdDevReplaced);
		for (IDataRow dataRow:iDataTable2.getRows()) {
			Statistics stat = null;
			for(IDataColumnSchema colDef:iDataTable2.getSchema().getColumnSchemas()) {
				if (dataRow.getValue(context,colDef)!=null) {
					Core.getLogger("ExpertDesk").trace("Concurrency Statistics: column "+colDef.getName() + " with value " + dataRow.getValue(context,colDef));
					if (colDef.getName().equals("ID")) {
						stat = Statistics.initialize(context, Core.retrieveId(context, Core.createMendixIdentifier((String) dataRow.getValue(context,colDef))));
						Core.getLogger("ExpertDesk").trace("Concurrency Statistics: Finding stat object for " + stat.getStatistics_LockObject().getLockName());
					} else if (stat!=null) {
						Double stdDev = java.lang.Math.sqrt((Double) dataRow.getValue(context,colDef));
						stat.getMendixObject().setValue(context, colDef.getName(), stdDev);
					} else {
						Core.getLogger("ExpertDesk").error("Concurrency Statistics: column "+colDef.getName() + " skipped for statistics record has NULL value");											
					}
				} else {
					Core.getLogger("ExpertDesk").debug("Concurrency Statistics: column "+colDef.getName() + " skipped for NULL value");					
				}
			}
			if (stat!=null) Core.commit(context, stat.getMendixObject());
		}
		
		//Core.delete(context, StatisticsPeriodParameter1.getMendixObject());
		//Core.commit(context, StatisticsPeriodParameter1.getMendixObject()); // is this necessary?
		Date end = new Date();
		Core.getLogger("ExpertDesk").info("Concurrency Statistics: Pass 2 had "+iDataTable2.getRowCount()+" rows. Finished after " + (end.getTime() - start.getTime()) + " total milliseconds");
		context.endTransaction();
		context.startTransaction();

		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "GenerateStatistics";
	}

	// BEGIN EXTRA CODE
	String oqlAll = "FROM Concurrency.ThreadHistory AS History\n" +
						"INNER JOIN History/Concurrency.ThreadHistory_Thread/Concurrency.Thread/Concurrency.Thread_LockObject/Concurrency.LockObject AS LockObject\n" +
						"INNER JOIN Concurrency.StatisticsPeriod AS StatisticsPeriod ON (StatisticsPeriod.ID = #STATISTICS-PERIOD-ID#)\n" +
						"WHERE History.Date < StatisticsPeriod.EndDate AND History.Date >= StatisticsPeriod.StartDate\n" +
						"GROUP BY LockObject.ID\n" +
						"SELECT CAST(LockObject.ID AS String) AS ID\n" +
						", MAX(History.DeltaSequence) AS DeltaSequenceMax\n" +
						", SUM(CASE WHEN History.Result='Executed_And_Rollback' THEN 1 ELSE 0 END) AS NumberOfExecutedAndRollback\n" +
						", SUM(CASE WHEN History.Result='Executed_Lock_Object' THEN 1 ELSE 0 END) AS NumberOfExecutedLockObject\n" +
						", SUM(CASE WHEN History.Result='Out_Of_Sequence' THEN 1 ELSE 0 END) AS NumberOfOutOfSequence\n" +
						", SUM(CASE WHEN History.Result='Other_Executed' THEN 1 ELSE 0 END) AS NumberOfOtherExecuted\n" +
						", SUM(CASE WHEN History.Result='Other_Executed_Before_Start' THEN 1 ELSE 0 END) AS NumOfOtherExecBeforeStart\n" +
						", SUM(CASE WHEN History.Result='Timeout' THEN 1 ELSE 0 END) AS NumberOfTimeout\n" +
						", SUM(CASE WHEN History.Result='Protection_Clears_Lock' THEN 1 ELSE 0 END) AS NumberOfProtectionClearsLock\n" +
						", SUM(CASE WHEN History.Result='Start' THEN 1 ELSE 0 END) AS NumberOfStart\n" +
						", SUM(CASE WHEN History.Result='Unlock_Without_Server_Lock' THEN 1 ELSE 0 END) AS NumOfUnlockWithoutServerLock\n" +
						", COUNT(*) AS TotalHistoryRecords\n" +
						", MAX(CASE WHEN History.Result='Executed_Lock_Object' THEN History.DeltaTime ELSE NULL END) AS DeltaTimeMax" +
						", MIN(CASE WHEN History.Result='Executed_Lock_Object' THEN History.DeltaTime ELSE NULL END) AS DeltaTimeMin" +
						", AVG(CASE WHEN History.Result='Executed_Lock_Object' THEN History.DeltaTime ELSE NULL END) AS DeltaTimeAvg" +
						", MAX(CASE WHEN History.Result='Executed_Lock_Object' THEN History.ExecutionTime ELSE NULL END) AS ExecutionTimeMax" +
						", MIN(CASE WHEN History.Result='Executed_Lock_Object' THEN History.ExecutionTime ELSE NULL END) AS ExecutionTimeMin" +
						", AVG(CASE WHEN History.Result='Executed_Lock_Object' THEN History.ExecutionTime ELSE NULL END) AS ExecutionTimeAvg";


	String oqlStdDev2 = "FROM Concurrency.ThreadHistory AS History\n" +
							"INNER JOIN History/Concurrency.ThreadHistory_Thread/Concurrency.Thread/Concurrency.Thread_LockObject/Concurrency.LockObject AS LockObject\n" +
							"INNER JOIN Concurrency.StatisticsPeriod AS StatisticsPeriod ON (StatisticsPeriod.ID = #STATISTICS-PERIOD-ID#)\n" +
							"INNER JOIN StatisticsPeriod/Concurrency.Statistics_StatisticsPeriod/Concurrency.Statistics AS Statistics ON (Statistics/Concurrency.Statistics_LockObject=LockObject/ID AND Statistics/Concurrency.Statistics_StatisticsPeriod = #STATISTICS-PERIOD-ID#)" +
							"WHERE History.Date < StatisticsPeriod.EndDate AND History.Date >= StatisticsPeriod.StartDate\n" +
							"AND History.Result = 'Executed_Lock_Object'\n" + 
							"GROUP BY Statistics.ID\n" +
							"SELECT CAST(Statistics.ID AS String) AS ID\n" +
							", AVG((History.DeltaTime-Statistics.DeltaTimeAvg)*(History.DeltaTime-Statistics.DeltaTimeAvg)) AS DeltaTimeStdDev\n" +
							", AVG((History.ExecutionTime-Statistics.ExecutionTimeAvg)*(History.ExecutionTime-Statistics.ExecutionTimeAvg)) AS ExecutionTimeStdDev\n";

	String oqlStdDev = "FROM Concurrency.Statistics AS Statistics\n" +
			"INNER JOIN Statistics/Concurrency.Statistics_LockObject/Concurrency.LockObject/Concurrency.Thread_LockObject/Concurrency.Thread/Concurrency.ThreadHistory_Thread/Concurrency.ThreadHistory AS History\n" +
			"INNER JOIN Statistics/Concurrency.Statistics_StatisticsPeriod/Concurrency.StatisticsPeriod AS StatisticsPeriod\n" +
			"WHERE History.Date < StatisticsPeriod.EndDate AND History.Date >= StatisticsPeriod.StartDate\n" +
			"AND History.Result = 'Executed_Lock_Object'\n" + 
			"AND StatisticsPeriod.ID = #STATISTICS-PERIOD-ID#\n" +
			"GROUP BY Statistics.ID\n" +
			"SELECT CAST(Statistics.ID AS String) AS ID\n" +
			", AVG((History.DeltaTime-Statistics.DeltaTimeAvg)*(History.DeltaTime-Statistics.DeltaTimeAvg)) AS DeltaTimeStdDev\n" +
			", AVG((History.ExecutionTime-Statistics.ExecutionTimeAvg)*(History.ExecutionTime-Statistics.ExecutionTimeAvg)) AS ExecutionTimeStdDev\n";

	// END EXTRA CODE
}
