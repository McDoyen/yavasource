// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package donotuse_concurrency_donotuse.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the DoNotUse_Concurrency_DoNotUse module
	public static void afterStartup_BeforeShutdown(IContext context, donotuse_concurrency_donotuse.proxies.StartupShutdownEnum _startupShutdownEnum)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("StartupShutdownEnum", _startupShutdownEnum == null ? null : _startupShutdownEnum.name());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.AfterStartup_BeforeShutdown", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cleanupThreadHistory_MF(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.CleanupThreadHistory_MF", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void clearLocksOfLockObject(IContext context, donotuse_concurrency_donotuse.proxies.LockObject _lockObject)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.ClearLocksOfLockObject", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void clearLocksOfServer(IContext context, donotuse_concurrency_donotuse.proxies.Server _server)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Server", _server == null ? null : _server.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.ClearLocksOfServer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void clearServerMaxAliveInterval(IContext context, donotuse_concurrency_donotuse.proxies.Server _server)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Server", _server == null ? null : _server.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.ClearServerMaxAliveInterval", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void clearThread(IContext context, donotuse_concurrency_donotuse.proxies.Thread _thread)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Thread", _thread == null ? null : _thread.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.ClearThread", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createThreadHistory(IContext context, donotuse_concurrency_donotuse.proxies.LockObject _lockObject, donotuse_concurrency_donotuse.proxies.Server _server, donotuse_concurrency_donotuse.proxies.ResultEnum _resultEnum, donotuse_concurrency_donotuse.proxies.Thread _thread, donotuse_concurrency_donotuse.proxies.Settings _settings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			params.put("Server", _server == null ? null : _server.getMendixObject());
			params.put("ResultEnum", _resultEnum == null ? null : _resultEnum.name());
			params.put("Thread", _thread == null ? null : _thread.getMendixObject());
			params.put("Settings", _settings == null ? null : _settings.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.CreateThreadHistory", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void delayAndTrace(IContext context, donotuse_concurrency_donotuse.proxies.Server _server, donotuse_concurrency_donotuse.proxies.LockObject _lockObject, java.lang.String _message, mendix.proxies.Level _level, boolean _skipDebugDelay, java.lang.String _threadName, boolean _skipDebugSimulation, java.lang.Long _debugSimulationPositionFrom, donotuse_concurrency_donotuse.proxies.LockObject _simulationLockObject, donotuse_concurrency_donotuse.proxies.Settings _settings, java.lang.Long _debugSimulationPositionTo)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Server", _server == null ? null : _server.getMendixObject());
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			params.put("Message", _message);
			params.put("Level", _level == null ? null : _level.name());
			params.put("SkipDebugDelay", _skipDebugDelay);
			params.put("ThreadName", _threadName);
			params.put("SkipDebugSimulation", _skipDebugSimulation);
			params.put("DebugSimulationPositionFrom", _debugSimulationPositionFrom);
			params.put("SimulationLockObject", _simulationLockObject == null ? null : _simulationLockObject.getMendixObject());
			params.put("Settings", _settings == null ? null : _settings.getMendixObject());
			params.put("DebugSimulationPositionTo", _debugSimulationPositionTo);
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.DelayAndTrace", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void generateStatistices_ForHistoryDay(IContext context, donotuse_concurrency_donotuse.proxies.ThreadHistory _threadHistory)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ThreadHistory", _threadHistory == null ? null : _threadHistory.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.GenerateStatistices_ForHistoryDay", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void generateStatistics_MF(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.GenerateStatistics_MF", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static donotuse_concurrency_donotuse.proxies.Settings getOrCreateSettings(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.GetOrCreateSettings", params);
			return result == null ? null : donotuse_concurrency_donotuse.proxies.Settings.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static donotuse_concurrency_donotuse.proxies.Thread getOrCreateThread(IContext context, donotuse_concurrency_donotuse.proxies.LockObject _lockObject, donotuse_concurrency_donotuse.proxies.Server _server, java.lang.String _threadName, boolean _requireWriteLock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			params.put("Server", _server == null ? null : _server.getMendixObject());
			params.put("ThreadName", _threadName);
			params.put("RequireWriteLock", _requireWriteLock);
			IMendixObject result = (IMendixObject)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.GetOrCreateThread", params);
			return result == null ? null : donotuse_concurrency_donotuse.proxies.Thread.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static donotuse_concurrency_donotuse.proxies.LastExecution getOrCreatLastExecution(IContext context, donotuse_concurrency_donotuse.proxies.LockObject _lockObject)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.GetOrCreatLastExecution", params);
			return result == null ? null : donotuse_concurrency_donotuse.proxies.LastExecution.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static donotuse_concurrency_donotuse.proxies.LastStart getOrCreatLastStart(IContext context, donotuse_concurrency_donotuse.proxies.Thread _thread)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Thread", _thread == null ? null : _thread.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.GetOrCreatLastStart", params);
			return result == null ? null : donotuse_concurrency_donotuse.proxies.LastStart.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static donotuse_concurrency_donotuse.proxies.LockObject getOrCreatLockObject(IContext context, java.lang.String _lockName, donotuse_concurrency_donotuse.proxies.LockTypeEnum _lockType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockName", _lockName);
			params.put("LockType", _lockType == null ? null : _lockType.name());
			IMendixObject result = (IMendixObject)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.GetOrCreatLockObject", params);
			return result == null ? null : donotuse_concurrency_donotuse.proxies.LockObject.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static donotuse_concurrency_donotuse.proxies.Server getOrCreatServer(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.GetOrCreatServer", params);
			return result == null ? null : donotuse_concurrency_donotuse.proxies.Server.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static donotuse_concurrency_donotuse.proxies.ServerProtection getOrCreatServerProtection(IContext context, donotuse_concurrency_donotuse.proxies.Server _thisServer, donotuse_concurrency_donotuse.proxies.Server _server)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ThisServer", _thisServer == null ? null : _thisServer.getMendixObject());
			params.put("Server", _server == null ? null : _server.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.GetOrCreatServerProtection", params);
			return result == null ? null : donotuse_concurrency_donotuse.proxies.ServerProtection.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Open_Button_ConcurrencyLockObjects(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.IVK_Open_Button_ConcurrencyLockObjects", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Open_Button_ConcurrencyServers(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.IVK_Open_Button_ConcurrencyServers", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Open_Button_ConcurrencySimulator(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.IVK_Open_Button_ConcurrencySimulator", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Open_Button_ConcurrencyStatistics(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.IVK_Open_Button_ConcurrencyStatistics", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Open_Button_ConcurrencyThreadHistory(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.IVK_Open_Button_ConcurrencyThreadHistory", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Open_Button_ConcurrencyThreads(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.IVK_Open_Button_ConcurrencyThreads", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void keepAlive_MF(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.KeepAlive_MF", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean lock_Server(IContext context, java.lang.String _lockName, java.lang.String _threadName, boolean _skipDebugDelay, boolean _skipDebugSimulation, boolean _requireWriteLock, donotuse_concurrency_donotuse.proxies.LockTypeEnum _lockType, donotuse_concurrency_donotuse.proxies.LockObject _simulationLockObject, donotuse_concurrency_donotuse.proxies.Settings _settings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockName", _lockName);
			params.put("ThreadName", _threadName);
			params.put("SkipDebugDelay", _skipDebugDelay);
			params.put("SkipDebugSimulation", _skipDebugSimulation);
			params.put("RequireWriteLock", _requireWriteLock);
			params.put("LockType", _lockType == null ? null : _lockType.name());
			params.put("SimulationLockObject", _simulationLockObject == null ? null : _simulationLockObject.getMendixObject());
			params.put("Settings", _settings == null ? null : _settings.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Lock_Server", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean lock_WithSequenceAndAlive(IContext context, java.lang.String _lockName, java.lang.String _threadName)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockName", _lockName);
			params.put("ThreadName", _threadName);
			return (java.lang.Boolean)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Lock_WithSequenceAndAlive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean lockPerThreadLoop_Server(IContext context, donotuse_concurrency_donotuse.proxies.LockObject _lockObject, donotuse_concurrency_donotuse.proxies.Thread _thisThread, donotuse_concurrency_donotuse.proxies.Server _thisServer, java.lang.String _threadName, donotuse_concurrency_donotuse.proxies.Thread _otherThread, boolean _skipDebugSimulation, boolean _requireWriteLock, donotuse_concurrency_donotuse.proxies.LockObject _simulationLockObject, donotuse_concurrency_donotuse.proxies.Settings _settings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			params.put("ThisThread", _thisThread == null ? null : _thisThread.getMendixObject());
			params.put("ThisServer", _thisServer == null ? null : _thisServer.getMendixObject());
			params.put("ThreadName", _threadName);
			params.put("OtherThread", _otherThread == null ? null : _otherThread.getMendixObject());
			params.put("SkipDebugSimulation", _skipDebugSimulation);
			params.put("RequireWriteLock", _requireWriteLock);
			params.put("SimulationLockObject", _simulationLockObject == null ? null : _simulationLockObject.getMendixObject());
			params.put("Settings", _settings == null ? null : _settings.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.LockPerThreadLoop_Server", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean lockPerThreadLoop_WithSequenceAndAlive(IContext context, donotuse_concurrency_donotuse.proxies.LockObject _lockObject, java.lang.Long _localSequence, donotuse_concurrency_donotuse.proxies.Thread _thisThread, donotuse_concurrency_donotuse.proxies.Server _thisServer, java.lang.String _threadName, donotuse_concurrency_donotuse.proxies.Thread _otherThread, donotuse_concurrency_donotuse.proxies.Settings _settings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			params.put("LocalSequence", _localSequence);
			params.put("ThisThread", _thisThread == null ? null : _thisThread.getMendixObject());
			params.put("ThisServer", _thisServer == null ? null : _thisServer.getMendixObject());
			params.put("ThreadName", _threadName);
			params.put("OtherThread", _otherThread == null ? null : _otherThread.getMendixObject());
			params.put("Settings", _settings == null ? null : _settings.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.LockPerThreadLoop_WithSequenceAndAlive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void next_Step(IContext context, donotuse_concurrency_donotuse.proxies.Simulator _simulator, donotuse_concurrency_donotuse.proxies.Server _thisServer, donotuse_concurrency_donotuse.proxies.Settings _settings, donotuse_concurrency_donotuse.proxies.LockObject _lockObject)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Simulator", _simulator == null ? null : _simulator.getMendixObject());
			params.put("ThisServer", _thisServer == null ? null : _thisServer.getMendixObject());
			params.put("Settings", _settings == null ? null : _settings.getMendixObject());
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Next_Step", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onChangeValidationLockObject(IContext context, donotuse_concurrency_donotuse.proxies.LockObject _lockObject)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.OnChangeValidationLockObject", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onChangeValidationMaxDuration(IContext context, donotuse_concurrency_donotuse.proxies.LockObject _lockObject)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.OnChangeValidationMaxDuration", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void onChangeValidationServer(IContext context, donotuse_concurrency_donotuse.proxies.Server _server)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Server", _server == null ? null : _server.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.OnChangeValidationServer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void openLockObjectFromHistory(IContext context, donotuse_concurrency_donotuse.proxies.ThreadHistory _threadHistory)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ThreadHistory", _threadHistory == null ? null : _threadHistory.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.OpenLockObjectFromHistory", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void openLockObjectFromServer(IContext context, donotuse_concurrency_donotuse.proxies.Thread _thread)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Thread", _thread == null ? null : _thread.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.OpenLockObjectFromServer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void openSettings(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.OpenSettings", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void protectionAgainstFailure_MF(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.ProtectionAgainstFailure_MF", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void saveLockObject(IContext context, donotuse_concurrency_donotuse.proxies.LockObject _lockObject)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockObject", _lockObject == null ? null : _lockObject.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.SaveLockObject", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void saveServer(IContext context, donotuse_concurrency_donotuse.proxies.Server _server)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Server", _server == null ? null : _server.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.SaveServer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void settings_AfterCommit(IContext context, donotuse_concurrency_donotuse.proxies.Settings _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Settings_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean settings_AfterDelete(IContext context, donotuse_concurrency_donotuse.proxies.Settings _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Settings_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean settings_BeforeCommit(IContext context, donotuse_concurrency_donotuse.proxies.Settings _settings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Settings", _settings == null ? null : _settings.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Settings_BeforeCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void settings_GetAuditRecord(IContext context, donotuse_concurrency_donotuse.proxies.Settings _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Settings_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void simulator_Execute(IContext context, donotuse_concurrency_donotuse.proxies.Simulator _simulator, donotuse_concurrency_donotuse.proxies.Server _thisServer, donotuse_concurrency_donotuse.proxies.Settings _settings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Simulator", _simulator == null ? null : _simulator.getMendixObject());
			params.put("ThisServer", _thisServer == null ? null : _thisServer.getMendixObject());
			params.put("Settings", _settings == null ? null : _settings.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Simulator_Execute", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void simulator_MF(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Simulator_MF", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void startSimulation(IContext context, donotuse_concurrency_donotuse.proxies.Simulator _simulator)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Simulator", _simulator == null ? null : _simulator.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.StartSimulation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void stopSimulation(IContext context, donotuse_concurrency_donotuse.proxies.Simulator _simulator)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Simulator", _simulator == null ? null : _simulator.getMendixObject());
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.StopSimulation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void truncateStatistics(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.TruncateStatistics", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void truncateThreadHistory(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "DoNotUse_Concurrency_DoNotUse.TruncateThreadHistory", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean unlock_Server(IContext context, java.lang.String _lockName, java.lang.String _threadName, boolean _skipDebugDelay, boolean _skipDebugSimulation, boolean _requireWriteLock, donotuse_concurrency_donotuse.proxies.LockTypeEnum _lockType, donotuse_concurrency_donotuse.proxies.LockObject _simulationLockObject, donotuse_concurrency_donotuse.proxies.Settings _settings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockName", _lockName);
			params.put("ThreadName", _threadName);
			params.put("SkipDebugDelay", _skipDebugDelay);
			params.put("SkipDebugSimulation", _skipDebugSimulation);
			params.put("RequireWriteLock", _requireWriteLock);
			params.put("LockType", _lockType == null ? null : _lockType.name());
			params.put("SimulationLockObject", _simulationLockObject == null ? null : _simulationLockObject.getMendixObject());
			params.put("Settings", _settings == null ? null : _settings.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Unlock_Server", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean unlock_WithSequenceAndAlive(IContext context, java.lang.String _lockName, java.lang.String _threadName)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LockName", _lockName);
			params.put("ThreadName", _threadName);
			return (java.lang.Boolean)Core.execute(context, "DoNotUse_Concurrency_DoNotUse.Unlock_WithSequenceAndAlive", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}