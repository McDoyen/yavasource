// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package donotuse_concurrency_donotuse.proxies;

public class LastExecution
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject lastExecutionMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "DoNotUse_Concurrency_DoNotUse.LastExecution";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		LastExecution_ThreadHistory("DoNotUse_Concurrency_DoNotUse.LastExecution_ThreadHistory"),
		LastExecution_LockObject("DoNotUse_Concurrency_DoNotUse.LastExecution_LockObject");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public LastExecution(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "DoNotUse_Concurrency_DoNotUse.LastExecution"));
	}

	protected LastExecution(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject lastExecutionMendixObject)
	{
		if (lastExecutionMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("DoNotUse_Concurrency_DoNotUse.LastExecution", lastExecutionMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a DoNotUse_Concurrency_DoNotUse.LastExecution");

		this.lastExecutionMendixObject = lastExecutionMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'LastExecution.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static donotuse_concurrency_donotuse.proxies.LastExecution initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return donotuse_concurrency_donotuse.proxies.LastExecution.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static donotuse_concurrency_donotuse.proxies.LastExecution initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new donotuse_concurrency_donotuse.proxies.LastExecution(context, mendixObject);
	}

	public static donotuse_concurrency_donotuse.proxies.LastExecution load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return donotuse_concurrency_donotuse.proxies.LastExecution.initialize(context, mendixObject);
	}

	public static java.util.List<donotuse_concurrency_donotuse.proxies.LastExecution> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<donotuse_concurrency_donotuse.proxies.LastExecution> result = new java.util.ArrayList<donotuse_concurrency_donotuse.proxies.LastExecution>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//DoNotUse_Concurrency_DoNotUse.LastExecution" + xpathConstraint))
			result.add(donotuse_concurrency_donotuse.proxies.LastExecution.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of LastExecution_ThreadHistory
	 */
	public final donotuse_concurrency_donotuse.proxies.ThreadHistory getLastExecution_ThreadHistory() throws com.mendix.core.CoreException
	{
		return getLastExecution_ThreadHistory(getContext());
	}

	/**
	 * @param context
	 * @return value of LastExecution_ThreadHistory
	 */
	public final donotuse_concurrency_donotuse.proxies.ThreadHistory getLastExecution_ThreadHistory(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		donotuse_concurrency_donotuse.proxies.ThreadHistory result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.LastExecution_ThreadHistory.toString());
		if (identifier != null)
			result = donotuse_concurrency_donotuse.proxies.ThreadHistory.load(context, identifier);
		return result;
	}

	/**
	 * Set value of LastExecution_ThreadHistory
	 * @param lastexecution_threadhistory
	 */
	public final void setLastExecution_ThreadHistory(donotuse_concurrency_donotuse.proxies.ThreadHistory lastexecution_threadhistory)
	{
		setLastExecution_ThreadHistory(getContext(), lastexecution_threadhistory);
	}

	/**
	 * Set value of LastExecution_ThreadHistory
	 * @param context
	 * @param lastexecution_threadhistory
	 */
	public final void setLastExecution_ThreadHistory(com.mendix.systemwideinterfaces.core.IContext context, donotuse_concurrency_donotuse.proxies.ThreadHistory lastexecution_threadhistory)
	{
		if (lastexecution_threadhistory == null)
			getMendixObject().setValue(context, MemberNames.LastExecution_ThreadHistory.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.LastExecution_ThreadHistory.toString(), lastexecution_threadhistory.getMendixObject().getId());
	}

	/**
	 * @return value of LastExecution_LockObject
	 */
	public final donotuse_concurrency_donotuse.proxies.LockObject getLastExecution_LockObject() throws com.mendix.core.CoreException
	{
		return getLastExecution_LockObject(getContext());
	}

	/**
	 * @param context
	 * @return value of LastExecution_LockObject
	 */
	public final donotuse_concurrency_donotuse.proxies.LockObject getLastExecution_LockObject(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		donotuse_concurrency_donotuse.proxies.LockObject result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.LastExecution_LockObject.toString());
		if (identifier != null)
			result = donotuse_concurrency_donotuse.proxies.LockObject.load(context, identifier);
		return result;
	}

	/**
	 * Set value of LastExecution_LockObject
	 * @param lastexecution_lockobject
	 */
	public final void setLastExecution_LockObject(donotuse_concurrency_donotuse.proxies.LockObject lastexecution_lockobject)
	{
		setLastExecution_LockObject(getContext(), lastexecution_lockobject);
	}

	/**
	 * Set value of LastExecution_LockObject
	 * @param context
	 * @param lastexecution_lockobject
	 */
	public final void setLastExecution_LockObject(com.mendix.systemwideinterfaces.core.IContext context, donotuse_concurrency_donotuse.proxies.LockObject lastexecution_lockobject)
	{
		if (lastexecution_lockobject == null)
			getMendixObject().setValue(context, MemberNames.LastExecution_LockObject.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.LastExecution_LockObject.toString(), lastexecution_lockobject.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return lastExecutionMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final donotuse_concurrency_donotuse.proxies.LastExecution that = (donotuse_concurrency_donotuse.proxies.LastExecution) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "DoNotUse_Concurrency_DoNotUse.LastExecution";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
