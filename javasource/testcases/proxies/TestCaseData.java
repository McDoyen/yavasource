// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testcases.proxies;

public class TestCaseData
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject testCaseDataMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "TestCases.TestCaseData";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		TestData("TestData"),
		DataFor("DataFor"),
		IsHTML("IsHTML"),
		TestData_TestCase("TestCases.TestData_TestCase");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public TestCaseData(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "TestCases.TestCaseData"));
	}

	protected TestCaseData(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject testCaseDataMendixObject)
	{
		if (testCaseDataMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("TestCases.TestCaseData", testCaseDataMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a TestCases.TestCaseData");

		this.testCaseDataMendixObject = testCaseDataMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'TestCaseData.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static testcases.proxies.TestCaseData initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return testcases.proxies.TestCaseData.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static testcases.proxies.TestCaseData initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new testcases.proxies.TestCaseData(context, mendixObject);
	}

	public static testcases.proxies.TestCaseData load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return testcases.proxies.TestCaseData.initialize(context, mendixObject);
	}

	public static java.util.List<testcases.proxies.TestCaseData> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<testcases.proxies.TestCaseData> result = new java.util.ArrayList<testcases.proxies.TestCaseData>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//TestCases.TestCaseData" + xpathConstraint))
			result.add(testcases.proxies.TestCaseData.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of TestData
	 */
	public final java.lang.String getTestData()
	{
		return getTestData(getContext());
	}

	/**
	 * @param context
	 * @return value of TestData
	 */
	public final java.lang.String getTestData(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.TestData.toString());
	}

	/**
	 * Set value of TestData
	 * @param testdata
	 */
	public final void setTestData(java.lang.String testdata)
	{
		setTestData(getContext(), testdata);
	}

	/**
	 * Set value of TestData
	 * @param context
	 * @param testdata
	 */
	public final void setTestData(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String testdata)
	{
		getMendixObject().setValue(context, MemberNames.TestData.toString(), testdata);
	}

	/**
	 * @return value of DataFor
	 */
	public final java.lang.String getDataFor()
	{
		return getDataFor(getContext());
	}

	/**
	 * @param context
	 * @return value of DataFor
	 */
	public final java.lang.String getDataFor(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.DataFor.toString());
	}

	/**
	 * Set value of DataFor
	 * @param datafor
	 */
	public final void setDataFor(java.lang.String datafor)
	{
		setDataFor(getContext(), datafor);
	}

	/**
	 * Set value of DataFor
	 * @param context
	 * @param datafor
	 */
	public final void setDataFor(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String datafor)
	{
		getMendixObject().setValue(context, MemberNames.DataFor.toString(), datafor);
	}

	/**
	 * @return value of IsHTML
	 */
	public final java.lang.Boolean getIsHTML()
	{
		return getIsHTML(getContext());
	}

	/**
	 * @param context
	 * @return value of IsHTML
	 */
	public final java.lang.Boolean getIsHTML(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.IsHTML.toString());
	}

	/**
	 * Set value of IsHTML
	 * @param ishtml
	 */
	public final void setIsHTML(java.lang.Boolean ishtml)
	{
		setIsHTML(getContext(), ishtml);
	}

	/**
	 * Set value of IsHTML
	 * @param context
	 * @param ishtml
	 */
	public final void setIsHTML(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean ishtml)
	{
		getMendixObject().setValue(context, MemberNames.IsHTML.toString(), ishtml);
	}

	/**
	 * @return value of TestData_TestCase
	 */
	public final testcases.proxies.TestCase getTestData_TestCase() throws com.mendix.core.CoreException
	{
		return getTestData_TestCase(getContext());
	}

	/**
	 * @param context
	 * @return value of TestData_TestCase
	 */
	public final testcases.proxies.TestCase getTestData_TestCase(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		testcases.proxies.TestCase result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.TestData_TestCase.toString());
		if (identifier != null)
			result = testcases.proxies.TestCase.load(context, identifier);
		return result;
	}

	/**
	 * Set value of TestData_TestCase
	 * @param testdata_testcase
	 */
	public final void setTestData_TestCase(testcases.proxies.TestCase testdata_testcase)
	{
		setTestData_TestCase(getContext(), testdata_testcase);
	}

	/**
	 * Set value of TestData_TestCase
	 * @param context
	 * @param testdata_testcase
	 */
	public final void setTestData_TestCase(com.mendix.systemwideinterfaces.core.IContext context, testcases.proxies.TestCase testdata_testcase)
	{
		if (testdata_testcase == null)
			getMendixObject().setValue(context, MemberNames.TestData_TestCase.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.TestData_TestCase.toString(), testdata_testcase.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return testCaseDataMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final testcases.proxies.TestCaseData that = (testcases.proxies.TestCaseData) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "TestCases.TestCaseData";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
