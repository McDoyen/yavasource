// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testcases.proxies;

public class IdentifierCheck extends testcases.proxies.Check
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "TestCases.IdentifierCheck";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		IdentifierCheckType("IdentifierCheckType"),
		Check("Check"),
		CheckType("CheckType"),
		CheckOn("CheckOn"),
		Visibility("Visibility"),
		Editability("Editability"),
		ExpectedValue("ExpectedValue"),
		ExpectedIdentifierValue("ExpectedIdentifierValue"),
		ExpectedBehaviour("ExpectedBehaviour"),
		ExpectedNumberOfEntries("ExpectedNumberOfEntries"),
		Result("Result"),
		ActualValue("ActualValue"),
		ActualIdentifierValue("ActualIdentifierValue"),
		ActualBehaviour("ActualBehaviour"),
		ActualNumberOfEntries("ActualNumberOfEntries"),
		Delete("Delete"),
		IdentifierCheck_Identifier("TestCases.IdentifierCheck_Identifier"),
		Check_TestCaseStep("TestCases.Check_TestCaseStep"),
		Check_TestStep("TestCases.Check_TestStep");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public IdentifierCheck(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "TestCases.IdentifierCheck"));
	}

	protected IdentifierCheck(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject identifierCheckMendixObject)
	{
		super(context, identifierCheckMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("TestCases.IdentifierCheck", identifierCheckMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a TestCases.IdentifierCheck");
	}

	/**
	 * @deprecated Use 'IdentifierCheck.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static testcases.proxies.IdentifierCheck initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return testcases.proxies.IdentifierCheck.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static testcases.proxies.IdentifierCheck initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		if (com.mendix.core.Core.isSubClassOf("TestCases.TestCaseIdentifierCheck", mendixObject.getType()))
			return testcases.proxies.TestCaseIdentifierCheck.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("TestCases.TestIdentifierCheck", mendixObject.getType()))
			return testcases.proxies.TestIdentifierCheck.initialize(context, mendixObject);

		return new testcases.proxies.IdentifierCheck(context, mendixObject);
	}

	public static testcases.proxies.IdentifierCheck load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return testcases.proxies.IdentifierCheck.initialize(context, mendixObject);
	}

	public static java.util.List<? extends testcases.proxies.IdentifierCheck> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<testcases.proxies.IdentifierCheck> result = new java.util.ArrayList<testcases.proxies.IdentifierCheck>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//TestCases.IdentifierCheck" + xpathConstraint))
			result.add(testcases.proxies.IdentifierCheck.initialize(context, obj));
		return result;
	}

	/**
	 * Set value of IdentifierCheckType
	 * @param identifierchecktype
	 */
	public final testcases.proxies.IdentifierCheckType getIdentifierCheckType()
	{
		return getIdentifierCheckType(getContext());
	}

	/**
	 * @param context
	 * @return value of IdentifierCheckType
	 */
	public final testcases.proxies.IdentifierCheckType getIdentifierCheckType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.IdentifierCheckType.toString());
		if (obj == null)
			return null;

		return testcases.proxies.IdentifierCheckType.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of IdentifierCheckType
	 * @param identifierchecktype
	 */
	public final void setIdentifierCheckType(testcases.proxies.IdentifierCheckType identifierchecktype)
	{
		setIdentifierCheckType(getContext(), identifierchecktype);
	}

	/**
	 * Set value of IdentifierCheckType
	 * @param context
	 * @param identifierchecktype
	 */
	public final void setIdentifierCheckType(com.mendix.systemwideinterfaces.core.IContext context, testcases.proxies.IdentifierCheckType identifierchecktype)
	{
		if (identifierchecktype != null)
			getMendixObject().setValue(context, MemberNames.IdentifierCheckType.toString(), identifierchecktype.toString());
		else
			getMendixObject().setValue(context, MemberNames.IdentifierCheckType.toString(), null);
	}

	/**
	 * @return value of IdentifierCheck_Identifier
	 */
	public final testcases.proxies.Identifier getIdentifierCheck_Identifier() throws com.mendix.core.CoreException
	{
		return getIdentifierCheck_Identifier(getContext());
	}

	/**
	 * @param context
	 * @return value of IdentifierCheck_Identifier
	 */
	public final testcases.proxies.Identifier getIdentifierCheck_Identifier(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		testcases.proxies.Identifier result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.IdentifierCheck_Identifier.toString());
		if (identifier != null)
			result = testcases.proxies.Identifier.load(context, identifier);
		return result;
	}

	/**
	 * Set value of IdentifierCheck_Identifier
	 * @param identifiercheck_identifier
	 */
	public final void setIdentifierCheck_Identifier(testcases.proxies.Identifier identifiercheck_identifier)
	{
		setIdentifierCheck_Identifier(getContext(), identifiercheck_identifier);
	}

	/**
	 * Set value of IdentifierCheck_Identifier
	 * @param context
	 * @param identifiercheck_identifier
	 */
	public final void setIdentifierCheck_Identifier(com.mendix.systemwideinterfaces.core.IContext context, testcases.proxies.Identifier identifiercheck_identifier)
	{
		if (identifiercheck_identifier == null)
			getMendixObject().setValue(context, MemberNames.IdentifierCheck_Identifier.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.IdentifierCheck_Identifier.toString(), identifiercheck_identifier.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final testcases.proxies.IdentifierCheck that = (testcases.proxies.IdentifierCheck) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "TestCases.IdentifierCheck";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
