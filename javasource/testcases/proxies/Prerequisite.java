// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testcases.proxies;

public class Prerequisite
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject prerequisiteMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "TestCases.Prerequisite";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Prerequisite("Prerequisite"),
		PrerequisiteType("PrerequisiteType"),
		Prerequisite_TestCase("TestCases.Prerequisite_TestCase"),
		Prerequisite_UserRole("TestCases.Prerequisite_UserRole");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Prerequisite(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "TestCases.Prerequisite"));
	}

	protected Prerequisite(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject prerequisiteMendixObject)
	{
		if (prerequisiteMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("TestCases.Prerequisite", prerequisiteMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a TestCases.Prerequisite");

		this.prerequisiteMendixObject = prerequisiteMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Prerequisite.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static testcases.proxies.Prerequisite initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return testcases.proxies.Prerequisite.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static testcases.proxies.Prerequisite initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new testcases.proxies.Prerequisite(context, mendixObject);
	}

	public static testcases.proxies.Prerequisite load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return testcases.proxies.Prerequisite.initialize(context, mendixObject);
	}

	public static java.util.List<testcases.proxies.Prerequisite> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<testcases.proxies.Prerequisite> result = new java.util.ArrayList<testcases.proxies.Prerequisite>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//TestCases.Prerequisite" + xpathConstraint))
			result.add(testcases.proxies.Prerequisite.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Prerequisite
	 */
	public final java.lang.String getPrerequisite()
	{
		return getPrerequisite(getContext());
	}

	/**
	 * @param context
	 * @return value of Prerequisite
	 */
	public final java.lang.String getPrerequisite(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Prerequisite.toString());
	}

	/**
	 * Set value of Prerequisite
	 * @param prerequisite
	 */
	public final void setPrerequisite(java.lang.String prerequisite)
	{
		setPrerequisite(getContext(), prerequisite);
	}

	/**
	 * Set value of Prerequisite
	 * @param context
	 * @param prerequisite
	 */
	public final void setPrerequisite(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String prerequisite)
	{
		getMendixObject().setValue(context, MemberNames.Prerequisite.toString(), prerequisite);
	}

	/**
	 * Set value of PrerequisiteType
	 * @param prerequisitetype
	 */
	public final testcases.proxies.PrerequisiteType getPrerequisiteType()
	{
		return getPrerequisiteType(getContext());
	}

	/**
	 * @param context
	 * @return value of PrerequisiteType
	 */
	public final testcases.proxies.PrerequisiteType getPrerequisiteType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.PrerequisiteType.toString());
		if (obj == null)
			return null;

		return testcases.proxies.PrerequisiteType.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of PrerequisiteType
	 * @param prerequisitetype
	 */
	public final void setPrerequisiteType(testcases.proxies.PrerequisiteType prerequisitetype)
	{
		setPrerequisiteType(getContext(), prerequisitetype);
	}

	/**
	 * Set value of PrerequisiteType
	 * @param context
	 * @param prerequisitetype
	 */
	public final void setPrerequisiteType(com.mendix.systemwideinterfaces.core.IContext context, testcases.proxies.PrerequisiteType prerequisitetype)
	{
		if (prerequisitetype != null)
			getMendixObject().setValue(context, MemberNames.PrerequisiteType.toString(), prerequisitetype.toString());
		else
			getMendixObject().setValue(context, MemberNames.PrerequisiteType.toString(), null);
	}

	/**
	 * @return value of Prerequisite_TestCase
	 */
	public final java.util.List<testcases.proxies.TestCase> getPrerequisite_TestCase() throws com.mendix.core.CoreException
	{
		return getPrerequisite_TestCase(getContext());
	}

	/**
	 * @param context
	 * @return value of Prerequisite_TestCase
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<testcases.proxies.TestCase> getPrerequisite_TestCase(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<testcases.proxies.TestCase> result = new java.util.ArrayList<testcases.proxies.TestCase>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.Prerequisite_TestCase.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(testcases.proxies.TestCase.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of Prerequisite_TestCase
	 * @param prerequisite_testcase
	 */
	public final void setPrerequisite_TestCase(java.util.List<testcases.proxies.TestCase> prerequisite_testcase)
	{
		setPrerequisite_TestCase(getContext(), prerequisite_testcase);
	}

	/**
	 * Set value of Prerequisite_TestCase
	 * @param context
	 * @param prerequisite_testcase
	 */
	public final void setPrerequisite_TestCase(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<testcases.proxies.TestCase> prerequisite_testcase)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (testcases.proxies.TestCase proxyObject : prerequisite_testcase)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.Prerequisite_TestCase.toString(), identifiers);
	}

	/**
	 * @return value of Prerequisite_UserRole
	 */
	public final java.util.List<system.proxies.UserRole> getPrerequisite_UserRole() throws com.mendix.core.CoreException
	{
		return getPrerequisite_UserRole(getContext());
	}

	/**
	 * @param context
	 * @return value of Prerequisite_UserRole
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<system.proxies.UserRole> getPrerequisite_UserRole(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<system.proxies.UserRole> result = new java.util.ArrayList<system.proxies.UserRole>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.Prerequisite_UserRole.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(system.proxies.UserRole.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of Prerequisite_UserRole
	 * @param prerequisite_userrole
	 */
	public final void setPrerequisite_UserRole(java.util.List<system.proxies.UserRole> prerequisite_userrole)
	{
		setPrerequisite_UserRole(getContext(), prerequisite_userrole);
	}

	/**
	 * Set value of Prerequisite_UserRole
	 * @param context
	 * @param prerequisite_userrole
	 */
	public final void setPrerequisite_UserRole(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<system.proxies.UserRole> prerequisite_userrole)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (system.proxies.UserRole proxyObject : prerequisite_userrole)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.Prerequisite_UserRole.toString(), identifiers);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return prerequisiteMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final testcases.proxies.Prerequisite that = (testcases.proxies.Prerequisite) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "TestCases.Prerequisite";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
