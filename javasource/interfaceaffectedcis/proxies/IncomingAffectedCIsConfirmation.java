// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceaffectedcis.proxies;

public class IncomingAffectedCIsConfirmation extends interfaceshared.proxies.IncomingConfirmation
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceAffectedCIs.IncomingAffectedCIsConfirmation";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		ConfirmationMessageID("ConfirmationMessageID"),
		InterfaceName("InterfaceName"),
		ExternalReferenceID("ExternalReferenceID"),
		InternalReferenceID("InternalReferenceID"),
		SuccessfullyProcessed("SuccessfullyProcessed"),
		MessageID("MessageID"),
		MessageType("MessageType"),
		MessageDirection("MessageDirection"),
		Status("Status"),
		RetrievedInterfaceName("RetrievedInterfaceName"),
		CreatedByCustomMessage("CreatedByCustomMessage"),
		AffectedCIsResponse_IncomingAffectedCIsConfirmation("InterfaceAffectedCIs.AffectedCIsResponse_IncomingAffectedCIsConfirmation"),
		IncomingConfirmation_OutgoingMessage("InterfaceShared.IncomingConfirmation_OutgoingMessage"),
		IncomingMessage_SynchronousResponse("InterfaceShared.IncomingMessage_SynchronousResponse"),
		BooleanWrapper_Message("InterfaceShared.BooleanWrapper_Message"),
		Message_IndexData("InterfaceShared.Message_IndexData"),
		Message_InterfaceMessageConfiguration("InterfaceShared.Message_InterfaceMessageConfiguration"),
		Message_InterfaceConfiguration("InterfaceShared.Message_InterfaceConfiguration");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public IncomingAffectedCIsConfirmation(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceAffectedCIs.IncomingAffectedCIsConfirmation"));
	}

	protected IncomingAffectedCIsConfirmation(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject incomingAffectedCIsConfirmationMendixObject)
	{
		super(context, incomingAffectedCIsConfirmationMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("InterfaceAffectedCIs.IncomingAffectedCIsConfirmation", incomingAffectedCIsConfirmationMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceAffectedCIs.IncomingAffectedCIsConfirmation");
	}

	/**
	 * @deprecated Use 'IncomingAffectedCIsConfirmation.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation(context, mendixObject);
	}

	public static interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation.initialize(context, mendixObject);
	}

	public static java.util.List<interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation> result = new java.util.ArrayList<interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceAffectedCIs.IncomingAffectedCIsConfirmation" + xpathConstraint))
			result.add(interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of AffectedCIsResponse_IncomingAffectedCIsConfirmation
	 */
	public final interfaceaffectedcis.proxies.AffectedCIsResponse getAffectedCIsResponse_IncomingAffectedCIsConfirmation() throws com.mendix.core.CoreException
	{
		return getAffectedCIsResponse_IncomingAffectedCIsConfirmation(getContext());
	}

	/**
	 * @param context
	 * @return value of AffectedCIsResponse_IncomingAffectedCIsConfirmation
	 */
	public final interfaceaffectedcis.proxies.AffectedCIsResponse getAffectedCIsResponse_IncomingAffectedCIsConfirmation(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceaffectedcis.proxies.AffectedCIsResponse result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.AffectedCIsResponse_IncomingAffectedCIsConfirmation.toString());
		if (identifier != null)
			result = interfaceaffectedcis.proxies.AffectedCIsResponse.load(context, identifier);
		return result;
	}

	/**
	 * Set value of AffectedCIsResponse_IncomingAffectedCIsConfirmation
	 * @param affectedcisresponse_incomingaffectedcisconfirmation
	 */
	public final void setAffectedCIsResponse_IncomingAffectedCIsConfirmation(interfaceaffectedcis.proxies.AffectedCIsResponse affectedcisresponse_incomingaffectedcisconfirmation)
	{
		setAffectedCIsResponse_IncomingAffectedCIsConfirmation(getContext(), affectedcisresponse_incomingaffectedcisconfirmation);
	}

	/**
	 * Set value of AffectedCIsResponse_IncomingAffectedCIsConfirmation
	 * @param context
	 * @param affectedcisresponse_incomingaffectedcisconfirmation
	 */
	public final void setAffectedCIsResponse_IncomingAffectedCIsConfirmation(com.mendix.systemwideinterfaces.core.IContext context, interfaceaffectedcis.proxies.AffectedCIsResponse affectedcisresponse_incomingaffectedcisconfirmation)
	{
		if (affectedcisresponse_incomingaffectedcisconfirmation == null)
			getMendixObject().setValue(context, MemberNames.AffectedCIsResponse_IncomingAffectedCIsConfirmation.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.AffectedCIsResponse_IncomingAffectedCIsConfirmation.toString(), affectedcisresponse_incomingaffectedcisconfirmation.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation that = (interfaceaffectedcis.proxies.IncomingAffectedCIsConfirmation) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceAffectedCIs.IncomingAffectedCIsConfirmation";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
