// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package replacement.proxies;

public class ReplacementValidation
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject replacementValidationMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Replacement.ReplacementValidation";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		MessageTemplateType("MessageTemplateType"),
		SpecialCodes("SpecialCodes"),
		DummyString("DummyString"),
		ReplacementValidation_MendixEntity("Replacement.ReplacementValidation_MendixEntity");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ReplacementValidation(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Replacement.ReplacementValidation"));
	}

	protected ReplacementValidation(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject replacementValidationMendixObject)
	{
		if (replacementValidationMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("Replacement.ReplacementValidation", replacementValidationMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Replacement.ReplacementValidation");

		this.replacementValidationMendixObject = replacementValidationMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'ReplacementValidation.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static replacement.proxies.ReplacementValidation initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return replacement.proxies.ReplacementValidation.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static replacement.proxies.ReplacementValidation initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new replacement.proxies.ReplacementValidation(context, mendixObject);
	}

	public static replacement.proxies.ReplacementValidation load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return replacement.proxies.ReplacementValidation.initialize(context, mendixObject);
	}

	public static java.util.List<replacement.proxies.ReplacementValidation> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<replacement.proxies.ReplacementValidation> result = new java.util.ArrayList<replacement.proxies.ReplacementValidation>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Replacement.ReplacementValidation" + xpathConstraint))
			result.add(replacement.proxies.ReplacementValidation.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * Set value of MessageTemplateType
	 * @param messagetemplatetype
	 */
	public final emailplus.proxies.MessageTemplateTypeEnum getMessageTemplateType()
	{
		return getMessageTemplateType(getContext());
	}

	/**
	 * @param context
	 * @return value of MessageTemplateType
	 */
	public final emailplus.proxies.MessageTemplateTypeEnum getMessageTemplateType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.MessageTemplateType.toString());
		if (obj == null)
			return null;

		return emailplus.proxies.MessageTemplateTypeEnum.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of MessageTemplateType
	 * @param messagetemplatetype
	 */
	public final void setMessageTemplateType(emailplus.proxies.MessageTemplateTypeEnum messagetemplatetype)
	{
		setMessageTemplateType(getContext(), messagetemplatetype);
	}

	/**
	 * Set value of MessageTemplateType
	 * @param context
	 * @param messagetemplatetype
	 */
	public final void setMessageTemplateType(com.mendix.systemwideinterfaces.core.IContext context, emailplus.proxies.MessageTemplateTypeEnum messagetemplatetype)
	{
		if (messagetemplatetype != null)
			getMendixObject().setValue(context, MemberNames.MessageTemplateType.toString(), messagetemplatetype.toString());
		else
			getMendixObject().setValue(context, MemberNames.MessageTemplateType.toString(), null);
	}

	/**
	 * @return value of SpecialCodes
	 */
	public final java.lang.String getSpecialCodes()
	{
		return getSpecialCodes(getContext());
	}

	/**
	 * @param context
	 * @return value of SpecialCodes
	 */
	public final java.lang.String getSpecialCodes(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.SpecialCodes.toString());
	}

	/**
	 * Set value of SpecialCodes
	 * @param specialcodes
	 */
	public final void setSpecialCodes(java.lang.String specialcodes)
	{
		setSpecialCodes(getContext(), specialcodes);
	}

	/**
	 * Set value of SpecialCodes
	 * @param context
	 * @param specialcodes
	 */
	public final void setSpecialCodes(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String specialcodes)
	{
		getMendixObject().setValue(context, MemberNames.SpecialCodes.toString(), specialcodes);
	}

	/**
	 * @return value of DummyString
	 */
	public final java.lang.String getDummyString()
	{
		return getDummyString(getContext());
	}

	/**
	 * @param context
	 * @return value of DummyString
	 */
	public final java.lang.String getDummyString(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.DummyString.toString());
	}

	/**
	 * Set value of DummyString
	 * @param dummystring
	 */
	public final void setDummyString(java.lang.String dummystring)
	{
		setDummyString(getContext(), dummystring);
	}

	/**
	 * Set value of DummyString
	 * @param context
	 * @param dummystring
	 */
	public final void setDummyString(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String dummystring)
	{
		getMendixObject().setValue(context, MemberNames.DummyString.toString(), dummystring);
	}

	/**
	 * @return value of ReplacementValidation_MendixEntity
	 */
	public final java.util.List<metamodel.proxies.MendixEntity> getReplacementValidation_MendixEntity() throws com.mendix.core.CoreException
	{
		return getReplacementValidation_MendixEntity(getContext());
	}

	/**
	 * @param context
	 * @return value of ReplacementValidation_MendixEntity
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<metamodel.proxies.MendixEntity> getReplacementValidation_MendixEntity(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<metamodel.proxies.MendixEntity> result = new java.util.ArrayList<metamodel.proxies.MendixEntity>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.ReplacementValidation_MendixEntity.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(metamodel.proxies.MendixEntity.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of ReplacementValidation_MendixEntity
	 * @param replacementvalidation_mendixentity
	 */
	public final void setReplacementValidation_MendixEntity(java.util.List<metamodel.proxies.MendixEntity> replacementvalidation_mendixentity)
	{
		setReplacementValidation_MendixEntity(getContext(), replacementvalidation_mendixentity);
	}

	/**
	 * Set value of ReplacementValidation_MendixEntity
	 * @param context
	 * @param replacementvalidation_mendixentity
	 */
	public final void setReplacementValidation_MendixEntity(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<metamodel.proxies.MendixEntity> replacementvalidation_mendixentity)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (metamodel.proxies.MendixEntity proxyObject : replacementvalidation_mendixentity)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.ReplacementValidation_MendixEntity.toString(), identifiers);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return replacementValidationMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final replacement.proxies.ReplacementValidation that = (replacement.proxies.ReplacementValidation) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Replacement.ReplacementValidation";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
