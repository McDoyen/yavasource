// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package queryrequests.actions;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import metamodel.proxies.MendixAttribute;
import metamodel.proxies.MendixEntity;
import metamodel.proxies.MendixRelation;
import metamodel.proxies.PrimitiveTypeEnum;
import queryrequests.proxies.Query;
import queryrequests.proxies.QueryPart;
import queryrequests.proxies.SelectableField;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.webui.CustomJavaAction;
import communitycommons.ORM;
import communitycommons.XPath;

public class UpdateQueryParts extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject InputObject;

	public UpdateQueryParts(IContext context, IMendixObject InputObject)
	{
		super(context);
		this.InputObject = InputObject;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext context = this.getContext();
		String objectID = String.valueOf(InputObject.getId().toLong());
		LinkedList<String> outputList = new LinkedList<String>();
		IMetaObject iMetaobject = Core.getMetaObject(InputObject.getType());
		outputList.add(iMetaobject.getName());
		String superEntityName = iMetaobject.getSuperName();
		boolean hasNext = true;
		while(hasNext){
			if(!superEntityName.equals("")){
				iMetaobject = Core.getMetaObject(superEntityName);
				outputList.add(superEntityName);
				superEntityName = iMetaobject.getSuperName();
			}
			else{
				hasNext = false;
			}
		}
		LinkedList<QueryPart> toBeCommittedQueryParts = new LinkedList<QueryPart>();
		LinkedList<Query> toBeCommittedQueries = new LinkedList<Query>();
		for(String entityName : outputList){
			XPath<MendixAttribute> mendixAttributeXPath = XPath.create(context, MendixAttribute.class).subconstraint(MendixAttribute.MemberNames.MendixAttribute_MendixEntity, MendixEntity.entityName).eq(MendixEntity.MemberNames.Name, entityName).close();
			for(MendixAttribute mendixAttribute : mendixAttributeXPath.all()){
				String attributeName = mendixAttribute.getName();
				try{
					if(ORM.memberHasChanged(this.getContext(), InputObject, attributeName)){
						IMendixObjectMember<?> member = InputObject.getMember(this.getContext(), attributeName);
						String value = member.parseValueToString(this.getContext());
						XPath<QueryPart> queryPartXPath = XPath.create(context, QueryPart.class).eq(QueryPart.MemberNames.ObjectID, objectID).and().eq(QueryPart.MemberNames.ReferenceOrEnum, true).and().subconstraint(QueryPart.MemberNames.QueryPart_SelectableField, SelectableField.entityName).eq(SelectableField.MemberNames.Reference, true).and().eq(SelectableField.MemberNames.UpdateReferencedField, true).and().subconstraint(SelectableField.MemberNames.SelectableField_MendixRelation, MendixRelation.entityName).eq(MendixRelation.MemberNames.ChildName, entityName).close().and().subconstraint(SelectableField.MemberNames.SelectableField_MendixReferencedAttribute, MendixAttribute.entityName).eq(MendixAttribute.MemberNames.Name, attributeName).close().close();
						for(QueryPart queryPart : queryPartXPath.all()){
							PrimitiveTypeEnum primitiveTypeEnum = mendixAttribute.getAttributeType();
							try{
								switch(primitiveTypeEnum){
								case DateTime:
									SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss zzzzz");
									Date date = simpleDateFormat.parse(value);
									queryPart.setValue_DateTime(this.getContext(), date);
								break;
								case IntegerType: case AutoNumber:
									queryPart.setValue_Int(this.getContext(), new Integer(value));
								break;
								//float is not supported at this moment, it cannot be selected when creating a new selectable field, secondly there is no value attribute with the matching data type in the QueryPart entity. 
								case FloatType:
									//InputObject.setValue(this.getContext(), attributeName, new Float(value));
									queryPart.setValue(this.getContext(), value);
								break;
								//long is not supported at this moment, it cannot be selected when creating a new selectable field, secondly there is no value attribute with the matching data type in the QueryPart entity.
								case LongType:
									//InputObject.setValue(this.getContext(), attributeName, new Long(value));
									queryPart.setValue(this.getContext(), value);
								break;
								case BooleanType:
									if(value.toLowerCase().equals("true")||value.toLowerCase().equals("false")){
										queryPart.setValue_Boolean(this.getContext(), new Boolean(value));
									}
									else{
										String errorMessage = "This is not a boolean value";
										throw(new IllegalArgumentException(getErrorMessage(primitiveTypeEnum, errorMessage)));
									}
								break;
								//currency is not supported at this moment, it cannot be selected when creating a new selectable field, secondly there is no value attribute with the matching data type in the QueryPart entity.
								case Currency:
									//InputObject.setValue(this.getContext(), attributeName, new Double(value));
									queryPart.setValue(this.getContext(), value);
								break;
								case EnumType:
									queryPart.setValue(this.getContext(), value);
								break;
								default:
									queryPart.setValue(this.getContext(), value);
								break;
								}
							}
							catch(ParseException pe){
								throw(new ParseException(getErrorMessage(primitiveTypeEnum, pe.toString()), pe.getErrorOffset()));
							}		
							catch(NumberFormatException nfe){
								throw(new NumberFormatException(getErrorMessage(primitiveTypeEnum, nfe.toString())));
							}
							catch(IllegalArgumentException iae){
								throw(new IllegalArgumentException(getErrorMessage(primitiveTypeEnum, iae.toString())));
							}
							//queryPart.setValue(value);
							toBeCommittedQueryParts.add(queryPart);
							Query query = queryPart.getQueryPart_Query();
							if(!toBeCommittedQueries.contains(query)){
								toBeCommittedQueries.add(queryPart.getQueryPart_Query());	
							}
						}
					}
				}
				catch(IllegalArgumentException iae){
					throw(new IllegalArgumentException("An error during member has changed check for member: " + attributeName + ", for entity " + entityName + ", this could indicate that the meta model needs updating. The error message was: " + iae.getMessage()));
				}
			}
		}
		for(QueryPart toBeCommittedQueryPart : toBeCommittedQueryParts){	
			try {
				toBeCommittedQueryPart.commit();
			}
			catch(CoreException e) {
				if (context.isInTransaction())
					context.rollbackTransAction();
				throw(new CoreException("An error occured during commit of a querypart, the error is: " + e.getMessage()));
			}
		}
		for(Query toBeCommittedQuery : toBeCommittedQueries){	
			try {
				toBeCommittedQuery.commit();
			}
			catch(CoreException e) {
				if (context.isInTransaction())
					context.rollbackTransAction();
				throw(new CoreException("An error occured during commit of a query, the error is: " + e.getMessage()));
			}
		}		
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "UpdateQueryParts";
	}

	// BEGIN EXTRA CODE
	private static String getErrorMessage(PrimitiveTypeEnum attributeTypeParameter12, String errorMessage) {
		String errorMessagePart1 = "Parsing of ";
		String errorMessagePart2 = " failed with error: ";
		return errorMessagePart1 + attributeTypeParameter12.toString() + errorMessagePart2 + errorMessage;
	}		
	// END EXTRA CODE
}
