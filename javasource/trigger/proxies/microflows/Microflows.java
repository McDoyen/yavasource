// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package trigger.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the Trigger module
	public static void addTemplateTriggerToRequestEvent(IContext context, trigger.proxies.TriggerSetup _triggerSetup, process.proxies.RequestEvent _requestEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			params.put("RequestEvent", _requestEvent == null ? null : _requestEvent.getMendixObject());
			Core.execute(context, "Trigger.AddTemplateTriggerToRequestEvent", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addTriggerCheckFailedFeedback(IContext context, trigger.proxies.TriggerCheck _triggerCheck, java.lang.String _feedback)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerCheck", _triggerCheck == null ? null : _triggerCheck.getMendixObject());
			params.put("Feedback", _feedback);
			Core.execute(context, "Trigger.AddTriggerCheckFailedFeedback", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void addTriggerConditionFeedback(IContext context, trigger.proxies.TriggerCheck _triggerCheck, java.lang.String _feedback)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerCheck", _triggerCheck == null ? null : _triggerCheck.getMendixObject());
			params.put("Feedback", _feedback);
			Core.execute(context, "Trigger.AddTriggerConditionFeedback", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditTrigger_AfterCommit(IContext context, trigger.proxies.TriggerSetup _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "Trigger.AuditTrigger_AfterCommit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean auditTrigger_AfterDelete(IContext context, trigger.proxies.TriggerSetup _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Trigger.AuditTrigger_AfterDelete", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void auditTrigger_GetAuditRecord(IContext context, trigger.proxies.TriggerSetup _object)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Object", _object == null ? null : _object.getMendixObject());
			Core.execute(context, "Trigger.AuditTrigger_GetAuditRecord", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bC_TriggerSetup(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Trigger.BC_TriggerSetup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean cancelNewTriggerSetup(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Trigger.CancelNewTriggerSetup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void cancelTriggerCondition(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.CancelTriggerCondition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkActionStateTransition(IContext context, trigger.proxies.TriggerSetup _triggerSetup, process.proxies.RequestEvent _requestEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			params.put("RequestEvent", _requestEvent == null ? null : _requestEvent.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Trigger.CheckActionStateTransition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkAllTemplateTriggers(IContext context, process.proxies.Request _request, process.proxies.RequestEvent _requestEvent, java.util.List<trigger.proxies.TriggerSetup> _triggerSetupList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Request", _request == null ? null : _request.getMendixObject());
			params.put("RequestEvent", _requestEvent == null ? null : _requestEvent.getMendixObject());
			java.util.ArrayList<IMendixObject> listparam_triggerSetupList = null;
			if (_triggerSetupList != null)
			{
				listparam_triggerSetupList = new java.util.ArrayList<IMendixObject>();
				for (trigger.proxies.TriggerSetup obj : _triggerSetupList)
					listparam_triggerSetupList.add(obj.getMendixObject());
			}
			params.put("TriggerSetupList", listparam_triggerSetupList);
			Core.execute(context, "Trigger.CheckAllTemplateTriggers", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkAndRemoveBooleanConditions(IContext context, java.util.List<workflowtemplate.proxies.BooleanCondition> _booleanConditionList, workflowtemplate.proxies.Condition _mainCondition, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_booleanConditionList = null;
			if (_booleanConditionList != null)
			{
				listparam_booleanConditionList = new java.util.ArrayList<IMendixObject>();
				for (workflowtemplate.proxies.BooleanCondition obj : _booleanConditionList)
					listparam_booleanConditionList.add(obj.getMendixObject());
			}
			params.put("BooleanConditionList", listparam_booleanConditionList);
			params.put("MainCondition", _mainCondition == null ? null : _mainCondition.getMendixObject());
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.CheckAndRemoveBooleanConditions", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 3729
	 * RequestEventUser will be used to set the ExecutedByUser. To validate the "Not to my self‚Äù option see patch 3547.
	 * 
	 * 920858
	 * Parameter changed om CheckTemplateTriggerCondition
	 */
	public static void checkAndRunTemplateTrigger(IContext context, trigger.proxies.TriggerSetup _triggerSetup, process.proxies.Request _request, process.proxies.RequestEvent _requestEvent)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			params.put("Request", _request == null ? null : _request.getMendixObject());
			params.put("RequestEvent", _requestEvent == null ? null : _requestEvent.getMendixObject());
			Core.execute(context, "Trigger.CheckAndRunTemplateTrigger", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void checkAndRunTemplateTriggerForTriggerCheck(IContext context, trigger.proxies.TriggerSetup _triggerSetup, process.proxies.Request _request, process.proxies.RequestEvent _requestEvent, trigger.proxies.TriggerCheck _triggerCheck)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			params.put("Request", _request == null ? null : _request.getMendixObject());
			params.put("RequestEvent", _requestEvent == null ? null : _requestEvent.getMendixObject());
			params.put("TriggerCheck", _triggerCheck == null ? null : _triggerCheck.getMendixObject());
			Core.execute(context, "Trigger.CheckAndRunTemplateTriggerForTriggerCheck", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkRequestFieldUpdate(IContext context, process.proxies.RequestSnapShot _requestSnapShot, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RequestSnapShot", _requestSnapShot == null ? null : _requestSnapShot.getMendixObject());
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Trigger.CheckRequestFieldUpdate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	/**
	 * 920858
	 * If StatusFrom is set to RequestEvent. The status in the condition wil be compared with  RequestEvent_Transition/Transition_ToState.
	 */
	public static boolean checkTemplateTriggerCondition(IContext context, workflowtemplate.proxies.Condition _templateCondition, process.proxies.Request _request, interfaceshared.proxies.Message _message, process.proxies.RequestEvent _requestEvent, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateCondition", _templateCondition == null ? null : _templateCondition.getMendixObject());
			params.put("Request", _request == null ? null : _request.getMendixObject());
			params.put("Message", _message == null ? null : _message.getMendixObject());
			params.put("RequestEvent", _requestEvent == null ? null : _requestEvent.getMendixObject());
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Trigger.CheckTemplateTriggerCondition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean checkTemplateTriggerConditionForTriggerCheck(IContext context, workflowtemplate.proxies.Condition _templateCondition, process.proxies.Request _request, trigger.proxies.TriggerCheck _triggerCheck, interfaceshared.proxies.Message _message)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TemplateCondition", _templateCondition == null ? null : _templateCondition.getMendixObject());
			params.put("Request", _request == null ? null : _request.getMendixObject());
			params.put("TriggerCheck", _triggerCheck == null ? null : _triggerCheck.getMendixObject());
			params.put("Message", _message == null ? null : _message.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Trigger.CheckTemplateTriggerConditionForTriggerCheck", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void clearIsNew_Audit(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.ClearIsNew_Audit", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyTriggerSetup(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.CopyTriggerSetup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void copyTriggerSetupList(IContext context, java.util.List<trigger.proxies.TriggerSetup> _triggerSetupList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_triggerSetupList = null;
			if (_triggerSetupList != null)
			{
				listparam_triggerSetupList = new java.util.ArrayList<IMendixObject>();
				for (trigger.proxies.TriggerSetup obj : _triggerSetupList)
					listparam_triggerSetupList.add(obj.getMendixObject());
			}
			params.put("TriggerSetupList", listparam_triggerSetupList);
			Core.execute(context, "Trigger.CopyTriggerSetupList", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<process.proxies.ExternalReference> getInterfaceExternalReference(IContext context, process.proxies.Request _request, interfaceconfiguration.proxies.InterfaceConfiguration _interfaceConfiguration, interfaceconfiguration.proxies.InterfaceMessageConfiguration _interfaceMessageConfiguration, process.proxies.RequestEvent _requestEvent, boolean _checkWholeTicketForInterfaceExternalReference, boolean _isCheck)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Request", _request == null ? null : _request.getMendixObject());
			params.put("InterfaceConfiguration", _interfaceConfiguration == null ? null : _interfaceConfiguration.getMendixObject());
			params.put("InterfaceMessageConfiguration", _interfaceMessageConfiguration == null ? null : _interfaceMessageConfiguration.getMendixObject());
			params.put("RequestEvent", _requestEvent == null ? null : _requestEvent.getMendixObject());
			params.put("CheckWholeTicketForInterfaceExternalReference", _checkWholeTicketForInterfaceExternalReference);
			params.put("IsCheck", _isCheck);
			java.util.List<IMendixObject> objs = Core.execute(context, "Trigger.GetInterfaceExternalReference", params);
			java.util.List<process.proxies.ExternalReference> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<process.proxies.ExternalReference>();
				for (IMendixObject obj : objs)
					result.add(process.proxies.ExternalReference.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static process.proxies.Request getMasterRequest(IContext context, process.proxies.Request _request)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Request", _request == null ? null : _request.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "Trigger.GetMasterRequest", params);
			return result == null ? null : process.proxies.Request.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TriggerSetupCancel(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.IVK_TriggerSetupCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TriggerSetupSave(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.IVK_TriggerSetupSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_TriggerSetupSaveAndClose(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.IVK_TriggerSetupSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newTriggerSetupInterfaceConditionOfSelectedType(IContext context, trigger.proxies.TriggerSetup _triggerSetup, workflowshared.proxies.ConditionType _conditionType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			params.put("ConditionType", _conditionType == null ? null : _conditionType.getMendixObject());
			Core.execute(context, "Trigger.NewTriggerSetupInterfaceConditionOfSelectedType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void newTriggerSetupRequestConditionOfSelectedType(IContext context, trigger.proxies.TriggerSetup _triggerSetup, workflowshared.proxies.ConditionType _conditionType)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			params.put("ConditionType", _conditionType == null ? null : _conditionType.getMendixObject());
			Core.execute(context, "Trigger.NewTriggerSetupRequestConditionOfSelectedType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oC_RequestEventType(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.OC_RequestEventType", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void refreshTriggerSetup(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.RefreshTriggerSetup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void triggerSetup_ClearCondition(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.TriggerSetup_ClearCondition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void triggerSetup_EditInterfaceCondition(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.TriggerSetup_EditInterfaceCondition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void triggerSetup_EditRequestCondition(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			Core.execute(context, "Trigger.TriggerSetup_EditRequestCondition", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<scheduling.proxies.TemplateTask> triggerSetup_GetTemplateTasks(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Trigger.TriggerSetup_GetTemplateTasks", params);
			java.util.List<scheduling.proxies.TemplateTask> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<scheduling.proxies.TemplateTask>();
				for (IMendixObject obj : objs)
					result.add(scheduling.proxies.TemplateTask.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<scheduling.proxies.TemplateTicket> triggerSetup_GetTemplateTickets(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Trigger.TriggerSetup_GetTemplateTickets", params);
			java.util.List<scheduling.proxies.TemplateTicket> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<scheduling.proxies.TemplateTicket>();
				for (IMendixObject obj : objs)
					result.add(scheduling.proxies.TemplateTicket.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<workflowtemplate.proxies.Workflow> triggerSetup_GetWorkflows(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Trigger.TriggerSetup_GetWorkflows", params);
			java.util.List<workflowtemplate.proxies.Workflow> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<workflowtemplate.proxies.Workflow>();
				for (IMendixObject obj : objs)
					result.add(workflowtemplate.proxies.Workflow.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateTriggerSetup(IContext context, trigger.proxies.TriggerSetup _triggerSetup)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TriggerSetup", _triggerSetup == null ? null : _triggerSetup.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Trigger.ValidateTriggerSetup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}