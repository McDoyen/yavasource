// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package workflowexecution.proxies;

public class ApprovalNodeVisit extends workflowexecution.proxies.NodeVisit
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "WorkflowExecution.ApprovalNodeVisit";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		AutoID("AutoID"),
		StartDate("StartDate"),
		EndDate("EndDate"),
		StepCounter("StepCounter"),
		ApprovalNodeVisit_ApprovalInstance("WorkflowExecution.ApprovalNodeVisit_ApprovalInstance"),
		NodeVisit_RequestWorkflowInstance("WorkflowExecution.NodeVisit_RequestWorkflowInstance"),
		NodeVisit_WorkflowVisit("WorkflowExecution.NodeVisit_WorkflowVisit"),
		NodeVisit_Node("WorkflowExecution.NodeVisit_Node"),
		NodeVisit_WorkflowResult("WorkflowExecution.NodeVisit_WorkflowResult");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ApprovalNodeVisit(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "WorkflowExecution.ApprovalNodeVisit"));
	}

	protected ApprovalNodeVisit(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject approvalNodeVisitMendixObject)
	{
		super(context, approvalNodeVisitMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("WorkflowExecution.ApprovalNodeVisit", approvalNodeVisitMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a WorkflowExecution.ApprovalNodeVisit");
	}

	/**
	 * @deprecated Use 'ApprovalNodeVisit.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static workflowexecution.proxies.ApprovalNodeVisit initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return workflowexecution.proxies.ApprovalNodeVisit.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static workflowexecution.proxies.ApprovalNodeVisit initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new workflowexecution.proxies.ApprovalNodeVisit(context, mendixObject);
	}

	public static workflowexecution.proxies.ApprovalNodeVisit load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return workflowexecution.proxies.ApprovalNodeVisit.initialize(context, mendixObject);
	}

	public static java.util.List<workflowexecution.proxies.ApprovalNodeVisit> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<workflowexecution.proxies.ApprovalNodeVisit> result = new java.util.ArrayList<workflowexecution.proxies.ApprovalNodeVisit>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//WorkflowExecution.ApprovalNodeVisit" + xpathConstraint))
			result.add(workflowexecution.proxies.ApprovalNodeVisit.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of ApprovalNodeVisit_ApprovalInstance
	 */
	public final approval.proxies.ApprovalInstance getApprovalNodeVisit_ApprovalInstance() throws com.mendix.core.CoreException
	{
		return getApprovalNodeVisit_ApprovalInstance(getContext());
	}

	/**
	 * @param context
	 * @return value of ApprovalNodeVisit_ApprovalInstance
	 */
	public final approval.proxies.ApprovalInstance getApprovalNodeVisit_ApprovalInstance(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		approval.proxies.ApprovalInstance result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ApprovalNodeVisit_ApprovalInstance.toString());
		if (identifier != null)
			result = approval.proxies.ApprovalInstance.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ApprovalNodeVisit_ApprovalInstance
	 * @param approvalnodevisit_approvalinstance
	 */
	public final void setApprovalNodeVisit_ApprovalInstance(approval.proxies.ApprovalInstance approvalnodevisit_approvalinstance)
	{
		setApprovalNodeVisit_ApprovalInstance(getContext(), approvalnodevisit_approvalinstance);
	}

	/**
	 * Set value of ApprovalNodeVisit_ApprovalInstance
	 * @param context
	 * @param approvalnodevisit_approvalinstance
	 */
	public final void setApprovalNodeVisit_ApprovalInstance(com.mendix.systemwideinterfaces.core.IContext context, approval.proxies.ApprovalInstance approvalnodevisit_approvalinstance)
	{
		if (approvalnodevisit_approvalinstance == null)
			getMendixObject().setValue(context, MemberNames.ApprovalNodeVisit_ApprovalInstance.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ApprovalNodeVisit_ApprovalInstance.toString(), approvalnodevisit_approvalinstance.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final workflowexecution.proxies.ApprovalNodeVisit that = (workflowexecution.proxies.ApprovalNodeVisit) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "WorkflowExecution.ApprovalNodeVisit";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
