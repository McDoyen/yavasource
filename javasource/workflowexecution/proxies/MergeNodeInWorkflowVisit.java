// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package workflowexecution.proxies;

public class MergeNodeInWorkflowVisit
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject mergeNodeInWorkflowVisitMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "WorkflowExecution.MergeNodeInWorkflowVisit";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		IsOpen("IsOpen"),
		MergeNodeInWorkflowVisit_WorkflowVisit("WorkflowExecution.MergeNodeInWorkflowVisit_WorkflowVisit"),
		MergeNodeVisit_MergeNode("WorkflowExecution.MergeNodeVisit_MergeNode");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public MergeNodeInWorkflowVisit(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "WorkflowExecution.MergeNodeInWorkflowVisit"));
	}

	protected MergeNodeInWorkflowVisit(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mergeNodeInWorkflowVisitMendixObject)
	{
		if (mergeNodeInWorkflowVisitMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("WorkflowExecution.MergeNodeInWorkflowVisit", mergeNodeInWorkflowVisitMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a WorkflowExecution.MergeNodeInWorkflowVisit");

		this.mergeNodeInWorkflowVisitMendixObject = mergeNodeInWorkflowVisitMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'MergeNodeInWorkflowVisit.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static workflowexecution.proxies.MergeNodeInWorkflowVisit initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return workflowexecution.proxies.MergeNodeInWorkflowVisit.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static workflowexecution.proxies.MergeNodeInWorkflowVisit initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new workflowexecution.proxies.MergeNodeInWorkflowVisit(context, mendixObject);
	}

	public static workflowexecution.proxies.MergeNodeInWorkflowVisit load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return workflowexecution.proxies.MergeNodeInWorkflowVisit.initialize(context, mendixObject);
	}

	public static java.util.List<workflowexecution.proxies.MergeNodeInWorkflowVisit> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<workflowexecution.proxies.MergeNodeInWorkflowVisit> result = new java.util.ArrayList<workflowexecution.proxies.MergeNodeInWorkflowVisit>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//WorkflowExecution.MergeNodeInWorkflowVisit" + xpathConstraint))
			result.add(workflowexecution.proxies.MergeNodeInWorkflowVisit.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of IsOpen
	 */
	public final java.lang.Boolean getIsOpen()
	{
		return getIsOpen(getContext());
	}

	/**
	 * @param context
	 * @return value of IsOpen
	 */
	public final java.lang.Boolean getIsOpen(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.IsOpen.toString());
	}

	/**
	 * Set value of IsOpen
	 * @param isopen
	 */
	public final void setIsOpen(java.lang.Boolean isopen)
	{
		setIsOpen(getContext(), isopen);
	}

	/**
	 * Set value of IsOpen
	 * @param context
	 * @param isopen
	 */
	public final void setIsOpen(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean isopen)
	{
		getMendixObject().setValue(context, MemberNames.IsOpen.toString(), isopen);
	}

	/**
	 * @return value of MergeNodeInWorkflowVisit_WorkflowVisit
	 */
	public final workflowexecution.proxies.WorkflowVisit getMergeNodeInWorkflowVisit_WorkflowVisit() throws com.mendix.core.CoreException
	{
		return getMergeNodeInWorkflowVisit_WorkflowVisit(getContext());
	}

	/**
	 * @param context
	 * @return value of MergeNodeInWorkflowVisit_WorkflowVisit
	 */
	public final workflowexecution.proxies.WorkflowVisit getMergeNodeInWorkflowVisit_WorkflowVisit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		workflowexecution.proxies.WorkflowVisit result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.MergeNodeInWorkflowVisit_WorkflowVisit.toString());
		if (identifier != null)
			result = workflowexecution.proxies.WorkflowVisit.load(context, identifier);
		return result;
	}

	/**
	 * Set value of MergeNodeInWorkflowVisit_WorkflowVisit
	 * @param mergenodeinworkflowvisit_workflowvisit
	 */
	public final void setMergeNodeInWorkflowVisit_WorkflowVisit(workflowexecution.proxies.WorkflowVisit mergenodeinworkflowvisit_workflowvisit)
	{
		setMergeNodeInWorkflowVisit_WorkflowVisit(getContext(), mergenodeinworkflowvisit_workflowvisit);
	}

	/**
	 * Set value of MergeNodeInWorkflowVisit_WorkflowVisit
	 * @param context
	 * @param mergenodeinworkflowvisit_workflowvisit
	 */
	public final void setMergeNodeInWorkflowVisit_WorkflowVisit(com.mendix.systemwideinterfaces.core.IContext context, workflowexecution.proxies.WorkflowVisit mergenodeinworkflowvisit_workflowvisit)
	{
		if (mergenodeinworkflowvisit_workflowvisit == null)
			getMendixObject().setValue(context, MemberNames.MergeNodeInWorkflowVisit_WorkflowVisit.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.MergeNodeInWorkflowVisit_WorkflowVisit.toString(), mergenodeinworkflowvisit_workflowvisit.getMendixObject().getId());
	}

	/**
	 * @return value of MergeNodeVisit_MergeNode
	 */
	public final workflowinstance.proxies.Node getMergeNodeVisit_MergeNode() throws com.mendix.core.CoreException
	{
		return getMergeNodeVisit_MergeNode(getContext());
	}

	/**
	 * @param context
	 * @return value of MergeNodeVisit_MergeNode
	 */
	public final workflowinstance.proxies.Node getMergeNodeVisit_MergeNode(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		workflowinstance.proxies.Node result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.MergeNodeVisit_MergeNode.toString());
		if (identifier != null)
			result = workflowinstance.proxies.Node.load(context, identifier);
		return result;
	}

	/**
	 * Set value of MergeNodeVisit_MergeNode
	 * @param mergenodevisit_mergenode
	 */
	public final void setMergeNodeVisit_MergeNode(workflowinstance.proxies.Node mergenodevisit_mergenode)
	{
		setMergeNodeVisit_MergeNode(getContext(), mergenodevisit_mergenode);
	}

	/**
	 * Set value of MergeNodeVisit_MergeNode
	 * @param context
	 * @param mergenodevisit_mergenode
	 */
	public final void setMergeNodeVisit_MergeNode(com.mendix.systemwideinterfaces.core.IContext context, workflowinstance.proxies.Node mergenodevisit_mergenode)
	{
		if (mergenodevisit_mergenode == null)
			getMendixObject().setValue(context, MemberNames.MergeNodeVisit_MergeNode.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.MergeNodeVisit_MergeNode.toString(), mergenodevisit_mergenode.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return mergeNodeInWorkflowVisitMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final workflowexecution.proxies.MergeNodeInWorkflowVisit that = (workflowexecution.proxies.MergeNodeInWorkflowVisit) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "WorkflowExecution.MergeNodeInWorkflowVisit";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
