// This file was generated by Mendix Modeler 7.7.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceshared_fileimport.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the InterfaceShared_FileImport module
	public static boolean changeStartOn(IContext context, interfaceshared_fileimport.proxies.DirectoryTemplateMapping _directoryTemplateMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DirectoryTemplateMapping", _directoryTemplateMapping == null ? null : _directoryTemplateMapping.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared_FileImport.ChangeStartOn", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static interfaceshared_fileimport.proxies.ImportFiles createImportFilesRecord(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "InterfaceShared_FileImport.CreateImportFilesRecord", params);
			return result == null ? null : interfaceshared_fileimport.proxies.ImportFiles.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long fieldFilesImported(IContext context, interfaceshared_fileimport.proxies.ImportFiles _importFiles)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportFiles", _importFiles == null ? null : _importFiles.getMendixObject());
			return (java.lang.Long)Core.execute(context, "InterfaceShared_FileImport.FieldFilesImported", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean fieldUnsupportedFiles(IContext context, interfaceshared_fileimport.proxies.ImportFiles _importFiles)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportFiles", _importFiles == null ? null : _importFiles.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared_FileImport.FieldUnsupportedFiles", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importFiles(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared_FileImport.ImportFiles", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_OpenImportDirectories(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared_FileImport.IVK_Button_OpenImportDirectories", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_OpenImportDirectoryTemplateMapping(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared_FileImport.IVK_Button_OpenImportDirectoryTemplateMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_OpenImportExcelTemplate(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared_FileImport.IVK_Button_OpenImportExcelTemplate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_Button_OpenImportFiles(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "InterfaceShared_FileImport.IVK_Button_OpenImportFiles", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DirectoryTemplateMappingCancel(IContext context, interfaceshared_fileimport.proxies.DirectoryTemplateMapping _directoryTemplateMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DirectoryTemplateMapping", _directoryTemplateMapping == null ? null : _directoryTemplateMapping.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_DirectoryTemplateMappingCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DirectoryTemplateMappingSave(IContext context, interfaceshared_fileimport.proxies.DirectoryTemplateMapping _directoryTemplateMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DirectoryTemplateMapping", _directoryTemplateMapping == null ? null : _directoryTemplateMapping.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_DirectoryTemplateMappingSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_DirectoryTemplateMappingSaveAndClose(IContext context, interfaceshared_fileimport.proxies.DirectoryTemplateMapping _directoryTemplateMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DirectoryTemplateMapping", _directoryTemplateMapping == null ? null : _directoryTemplateMapping.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_DirectoryTemplateMappingSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImportDirectoriesCancel(IContext context, interfaceshared_fileimport.proxies.ImportDirectories _importDirectories)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportDirectories", _importDirectories == null ? null : _importDirectories.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_ImportDirectoriesCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImportDirectoriesSave(IContext context, interfaceshared_fileimport.proxies.ImportDirectories _importDirectories)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportDirectories", _importDirectories == null ? null : _importDirectories.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_ImportDirectoriesSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImportDirectoriesSaveAndClose(IContext context, interfaceshared_fileimport.proxies.ImportDirectories _importDirectories)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportDirectories", _importDirectories == null ? null : _importDirectories.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_ImportDirectoriesSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImportFilesCancel(IContext context, interfaceshared_fileimport.proxies.ImportFiles _importFiles)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportFiles", _importFiles == null ? null : _importFiles.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_ImportFilesCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImportFilesSave(IContext context, interfaceshared_fileimport.proxies.ImportFiles _importFiles)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportFiles", _importFiles == null ? null : _importFiles.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_ImportFilesSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_ImportFilesSaveAndClose(IContext context, interfaceshared_fileimport.proxies.ImportFiles _importFiles)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportFiles", _importFiles == null ? null : _importFiles.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_ImportFilesSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingFileCancel(IContext context, interfaceshared_fileimport.proxies.IncomingFile _incomingFile)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingFile", _incomingFile == null ? null : _incomingFile.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_IncomingFileCancel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingFileSave(IContext context, interfaceshared_fileimport.proxies.IncomingFile _incomingFile)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingFile", _incomingFile == null ? null : _incomingFile.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_IncomingFileSave", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void iVK_IncomingFileSaveAndClose(IContext context, interfaceshared_fileimport.proxies.IncomingFile _incomingFile)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingFile", _incomingFile == null ? null : _incomingFile.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.IVK_IncomingFileSaveAndClose", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void paseExcelToDomain(IContext context, interfaceshared_fileimport.proxies.IncomingFile _incomingFile)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("IncomingFile", _incomingFile == null ? null : _incomingFile.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.PaseExcelToDomain", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void refreshMapping(IContext context, interfaceshared_fileimport.proxies.DirectoryTemplateMapping _directoryTemplateMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DirectoryTemplateMapping", _directoryTemplateMapping == null ? null : _directoryTemplateMapping.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.RefreshMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void resetScheduleFields(IContext context, interfaceshared_fileimport.proxies.DirectoryTemplateMapping _directoryTemplateMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DirectoryTemplateMapping", _directoryTemplateMapping == null ? null : _directoryTemplateMapping.getMendixObject());
			Core.execute(context, "InterfaceShared_FileImport.ResetScheduleFields", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void setNewRunAt(IContext context, interfaceshared_fileimport.proxies.DirectoryTemplateMapping _directoryTemplateMapping, boolean _fromSchedule)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DirectoryTemplateMapping", _directoryTemplateMapping == null ? null : _directoryTemplateMapping.getMendixObject());
			params.put("FromSchedule", _fromSchedule);
			Core.execute(context, "InterfaceShared_FileImport.SetNewRunAt", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateDirectory(IContext context, interfaceshared_fileimport.proxies.ImportDirectories _importDirectories)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("ImportDirectories", _importDirectories == null ? null : _importDirectories.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared_FileImport.ValidateDirectory", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean validateMapping(IContext context, interfaceshared_fileimport.proxies.DirectoryTemplateMapping _directoryTemplateMapping)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("DirectoryTemplateMapping", _directoryTemplateMapping == null ? null : _directoryTemplateMapping.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "InterfaceShared_FileImport.ValidateMapping", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}