// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceshared_fileimport.proxies;

public class DirectoryTemplateMapping
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject directoryTemplateMappingMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceShared_FileImport.DirectoryTemplateMapping";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Enabled("Enabled"),
		DeleteFilesAfterImport("DeleteFilesAfterImport"),
		Number("Number"),
		ScheduleType("ScheduleType"),
		RunAt("RunAt"),
		StartsOn("StartsOn"),
		ChangeStartOn("ChangeStartOn"),
		UseSchedule("UseSchedule"),
		DirectoryTemplateMapping_ImportDirectories("InterfaceShared_FileImport.DirectoryTemplateMapping_ImportDirectories"),
		DirectoryTemplateMapping_Template("InterfaceShared_FileImport.DirectoryTemplateMapping_Template");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public DirectoryTemplateMapping(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceShared_FileImport.DirectoryTemplateMapping"));
	}

	protected DirectoryTemplateMapping(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject directoryTemplateMappingMendixObject)
	{
		if (directoryTemplateMappingMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("InterfaceShared_FileImport.DirectoryTemplateMapping", directoryTemplateMappingMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceShared_FileImport.DirectoryTemplateMapping");

		this.directoryTemplateMappingMendixObject = directoryTemplateMappingMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'DirectoryTemplateMapping.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfaceshared_fileimport.proxies.DirectoryTemplateMapping initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfaceshared_fileimport.proxies.DirectoryTemplateMapping.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfaceshared_fileimport.proxies.DirectoryTemplateMapping initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new interfaceshared_fileimport.proxies.DirectoryTemplateMapping(context, mendixObject);
	}

	public static interfaceshared_fileimport.proxies.DirectoryTemplateMapping load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfaceshared_fileimport.proxies.DirectoryTemplateMapping.initialize(context, mendixObject);
	}

	public static java.util.List<interfaceshared_fileimport.proxies.DirectoryTemplateMapping> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceshared_fileimport.proxies.DirectoryTemplateMapping> result = new java.util.ArrayList<interfaceshared_fileimport.proxies.DirectoryTemplateMapping>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceShared_FileImport.DirectoryTemplateMapping" + xpathConstraint))
			result.add(interfaceshared_fileimport.proxies.DirectoryTemplateMapping.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Enabled
	 */
	public final java.lang.Boolean getEnabled()
	{
		return getEnabled(getContext());
	}

	/**
	 * @param context
	 * @return value of Enabled
	 */
	public final java.lang.Boolean getEnabled(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Enabled.toString());
	}

	/**
	 * Set value of Enabled
	 * @param enabled
	 */
	public final void setEnabled(java.lang.Boolean enabled)
	{
		setEnabled(getContext(), enabled);
	}

	/**
	 * Set value of Enabled
	 * @param context
	 * @param enabled
	 */
	public final void setEnabled(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean enabled)
	{
		getMendixObject().setValue(context, MemberNames.Enabled.toString(), enabled);
	}

	/**
	 * @return value of DeleteFilesAfterImport
	 */
	public final java.lang.Boolean getDeleteFilesAfterImport()
	{
		return getDeleteFilesAfterImport(getContext());
	}

	/**
	 * @param context
	 * @return value of DeleteFilesAfterImport
	 */
	public final java.lang.Boolean getDeleteFilesAfterImport(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.DeleteFilesAfterImport.toString());
	}

	/**
	 * Set value of DeleteFilesAfterImport
	 * @param deletefilesafterimport
	 */
	public final void setDeleteFilesAfterImport(java.lang.Boolean deletefilesafterimport)
	{
		setDeleteFilesAfterImport(getContext(), deletefilesafterimport);
	}

	/**
	 * Set value of DeleteFilesAfterImport
	 * @param context
	 * @param deletefilesafterimport
	 */
	public final void setDeleteFilesAfterImport(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean deletefilesafterimport)
	{
		getMendixObject().setValue(context, MemberNames.DeleteFilesAfterImport.toString(), deletefilesafterimport);
	}

	/**
	 * @return value of Number
	 */
	public final java.lang.Integer getNumber()
	{
		return getNumber(getContext());
	}

	/**
	 * @param context
	 * @return value of Number
	 */
	public final java.lang.Integer getNumber(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.Number.toString());
	}

	/**
	 * Set value of Number
	 * @param number
	 */
	public final void setNumber(java.lang.Integer number)
	{
		setNumber(getContext(), number);
	}

	/**
	 * Set value of Number
	 * @param context
	 * @param number
	 */
	public final void setNumber(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer number)
	{
		getMendixObject().setValue(context, MemberNames.Number.toString(), number);
	}

	/**
	 * Set value of ScheduleType
	 * @param scheduletype
	 */
	public final interfaceshared_fileimport.proxies.RunMappingType getScheduleType()
	{
		return getScheduleType(getContext());
	}

	/**
	 * @param context
	 * @return value of ScheduleType
	 */
	public final interfaceshared_fileimport.proxies.RunMappingType getScheduleType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.ScheduleType.toString());
		if (obj == null)
			return null;

		return interfaceshared_fileimport.proxies.RunMappingType.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of ScheduleType
	 * @param scheduletype
	 */
	public final void setScheduleType(interfaceshared_fileimport.proxies.RunMappingType scheduletype)
	{
		setScheduleType(getContext(), scheduletype);
	}

	/**
	 * Set value of ScheduleType
	 * @param context
	 * @param scheduletype
	 */
	public final void setScheduleType(com.mendix.systemwideinterfaces.core.IContext context, interfaceshared_fileimport.proxies.RunMappingType scheduletype)
	{
		if (scheduletype != null)
			getMendixObject().setValue(context, MemberNames.ScheduleType.toString(), scheduletype.toString());
		else
			getMendixObject().setValue(context, MemberNames.ScheduleType.toString(), null);
	}

	/**
	 * @return value of RunAt
	 */
	public final java.util.Date getRunAt()
	{
		return getRunAt(getContext());
	}

	/**
	 * @param context
	 * @return value of RunAt
	 */
	public final java.util.Date getRunAt(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.RunAt.toString());
	}

	/**
	 * Set value of RunAt
	 * @param runat
	 */
	public final void setRunAt(java.util.Date runat)
	{
		setRunAt(getContext(), runat);
	}

	/**
	 * Set value of RunAt
	 * @param context
	 * @param runat
	 */
	public final void setRunAt(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date runat)
	{
		getMendixObject().setValue(context, MemberNames.RunAt.toString(), runat);
	}

	/**
	 * @return value of StartsOn
	 */
	public final java.util.Date getStartsOn()
	{
		return getStartsOn(getContext());
	}

	/**
	 * @param context
	 * @return value of StartsOn
	 */
	public final java.util.Date getStartsOn(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.StartsOn.toString());
	}

	/**
	 * Set value of StartsOn
	 * @param startson
	 */
	public final void setStartsOn(java.util.Date startson)
	{
		setStartsOn(getContext(), startson);
	}

	/**
	 * Set value of StartsOn
	 * @param context
	 * @param startson
	 */
	public final void setStartsOn(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date startson)
	{
		getMendixObject().setValue(context, MemberNames.StartsOn.toString(), startson);
	}

	/**
	 * @return value of ChangeStartOn
	 */
	public final java.lang.Boolean getChangeStartOn()
	{
		return getChangeStartOn(getContext());
	}

	/**
	 * @param context
	 * @return value of ChangeStartOn
	 */
	public final java.lang.Boolean getChangeStartOn(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.ChangeStartOn.toString());
	}

	/**
	 * Set value of ChangeStartOn
	 * @param changestarton
	 */
	public final void setChangeStartOn(java.lang.Boolean changestarton)
	{
		setChangeStartOn(getContext(), changestarton);
	}

	/**
	 * Set value of ChangeStartOn
	 * @param context
	 * @param changestarton
	 */
	public final void setChangeStartOn(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean changestarton)
	{
		getMendixObject().setValue(context, MemberNames.ChangeStartOn.toString(), changestarton);
	}

	/**
	 * @return value of UseSchedule
	 */
	public final java.lang.Boolean getUseSchedule()
	{
		return getUseSchedule(getContext());
	}

	/**
	 * @param context
	 * @return value of UseSchedule
	 */
	public final java.lang.Boolean getUseSchedule(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.UseSchedule.toString());
	}

	/**
	 * Set value of UseSchedule
	 * @param useschedule
	 */
	public final void setUseSchedule(java.lang.Boolean useschedule)
	{
		setUseSchedule(getContext(), useschedule);
	}

	/**
	 * Set value of UseSchedule
	 * @param context
	 * @param useschedule
	 */
	public final void setUseSchedule(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean useschedule)
	{
		getMendixObject().setValue(context, MemberNames.UseSchedule.toString(), useschedule);
	}

	/**
	 * @return value of DirectoryTemplateMapping_ImportDirectories
	 */
	public final interfaceshared_fileimport.proxies.ImportDirectories getDirectoryTemplateMapping_ImportDirectories() throws com.mendix.core.CoreException
	{
		return getDirectoryTemplateMapping_ImportDirectories(getContext());
	}

	/**
	 * @param context
	 * @return value of DirectoryTemplateMapping_ImportDirectories
	 */
	public final interfaceshared_fileimport.proxies.ImportDirectories getDirectoryTemplateMapping_ImportDirectories(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceshared_fileimport.proxies.ImportDirectories result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.DirectoryTemplateMapping_ImportDirectories.toString());
		if (identifier != null)
			result = interfaceshared_fileimport.proxies.ImportDirectories.load(context, identifier);
		return result;
	}

	/**
	 * Set value of DirectoryTemplateMapping_ImportDirectories
	 * @param directorytemplatemapping_importdirectories
	 */
	public final void setDirectoryTemplateMapping_ImportDirectories(interfaceshared_fileimport.proxies.ImportDirectories directorytemplatemapping_importdirectories)
	{
		setDirectoryTemplateMapping_ImportDirectories(getContext(), directorytemplatemapping_importdirectories);
	}

	/**
	 * Set value of DirectoryTemplateMapping_ImportDirectories
	 * @param context
	 * @param directorytemplatemapping_importdirectories
	 */
	public final void setDirectoryTemplateMapping_ImportDirectories(com.mendix.systemwideinterfaces.core.IContext context, interfaceshared_fileimport.proxies.ImportDirectories directorytemplatemapping_importdirectories)
	{
		if (directorytemplatemapping_importdirectories == null)
			getMendixObject().setValue(context, MemberNames.DirectoryTemplateMapping_ImportDirectories.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.DirectoryTemplateMapping_ImportDirectories.toString(), directorytemplatemapping_importdirectories.getMendixObject().getId());
	}

	/**
	 * @return value of DirectoryTemplateMapping_Template
	 */
	public final excelimporter.proxies.Template getDirectoryTemplateMapping_Template() throws com.mendix.core.CoreException
	{
		return getDirectoryTemplateMapping_Template(getContext());
	}

	/**
	 * @param context
	 * @return value of DirectoryTemplateMapping_Template
	 */
	public final excelimporter.proxies.Template getDirectoryTemplateMapping_Template(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		excelimporter.proxies.Template result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.DirectoryTemplateMapping_Template.toString());
		if (identifier != null)
			result = excelimporter.proxies.Template.load(context, identifier);
		return result;
	}

	/**
	 * Set value of DirectoryTemplateMapping_Template
	 * @param directorytemplatemapping_template
	 */
	public final void setDirectoryTemplateMapping_Template(excelimporter.proxies.Template directorytemplatemapping_template)
	{
		setDirectoryTemplateMapping_Template(getContext(), directorytemplatemapping_template);
	}

	/**
	 * Set value of DirectoryTemplateMapping_Template
	 * @param context
	 * @param directorytemplatemapping_template
	 */
	public final void setDirectoryTemplateMapping_Template(com.mendix.systemwideinterfaces.core.IContext context, excelimporter.proxies.Template directorytemplatemapping_template)
	{
		if (directorytemplatemapping_template == null)
			getMendixObject().setValue(context, MemberNames.DirectoryTemplateMapping_Template.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.DirectoryTemplateMapping_Template.toString(), directorytemplatemapping_template.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return directoryTemplateMappingMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfaceshared_fileimport.proxies.DirectoryTemplateMapping that = (interfaceshared_fileimport.proxies.DirectoryTemplateMapping) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceShared_FileImport.DirectoryTemplateMapping";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
