// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package interfaceshared_fileimport.proxies;

public class IncomingFile extends system.proxies.FileDocument
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "InterfaceShared_FileImport.IncomingFile";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Date("Date"),
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Size("Size"),
		IncomingFile_ImportFiles("InterfaceShared_FileImport.IncomingFile_ImportFiles"),
		IncomingFile_Template("InterfaceShared_FileImport.IncomingFile_Template");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public IncomingFile(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "InterfaceShared_FileImport.IncomingFile"));
	}

	protected IncomingFile(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject incomingFileMendixObject)
	{
		super(context, incomingFileMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("InterfaceShared_FileImport.IncomingFile", incomingFileMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a InterfaceShared_FileImport.IncomingFile");
	}

	/**
	 * @deprecated Use 'IncomingFile.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static interfaceshared_fileimport.proxies.IncomingFile initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return interfaceshared_fileimport.proxies.IncomingFile.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static interfaceshared_fileimport.proxies.IncomingFile initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		if (com.mendix.core.Core.isSubClassOf("CustomLVNL.ImportFile", mendixObject.getType()))
			return customlvnl.proxies.ImportFile.initialize(context, mendixObject);

		return new interfaceshared_fileimport.proxies.IncomingFile(context, mendixObject);
	}

	public static interfaceshared_fileimport.proxies.IncomingFile load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return interfaceshared_fileimport.proxies.IncomingFile.initialize(context, mendixObject);
	}

	public static java.util.List<? extends interfaceshared_fileimport.proxies.IncomingFile> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<interfaceshared_fileimport.proxies.IncomingFile> result = new java.util.ArrayList<interfaceshared_fileimport.proxies.IncomingFile>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//InterfaceShared_FileImport.IncomingFile" + xpathConstraint))
			result.add(interfaceshared_fileimport.proxies.IncomingFile.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of Date
	 */
	public final java.util.Date getDate()
	{
		return getDate(getContext());
	}

	/**
	 * @param context
	 * @return value of Date
	 */
	public final java.util.Date getDate(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.Date.toString());
	}

	/**
	 * Set value of Date
	 * @param date
	 */
	public final void setDate(java.util.Date date)
	{
		setDate(getContext(), date);
	}

	/**
	 * Set value of Date
	 * @param context
	 * @param date
	 */
	public final void setDate(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date date)
	{
		getMendixObject().setValue(context, MemberNames.Date.toString(), date);
	}

	/**
	 * @return value of IncomingFile_ImportFiles
	 */
	public final interfaceshared_fileimport.proxies.ImportFiles getIncomingFile_ImportFiles() throws com.mendix.core.CoreException
	{
		return getIncomingFile_ImportFiles(getContext());
	}

	/**
	 * @param context
	 * @return value of IncomingFile_ImportFiles
	 */
	public final interfaceshared_fileimport.proxies.ImportFiles getIncomingFile_ImportFiles(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		interfaceshared_fileimport.proxies.ImportFiles result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.IncomingFile_ImportFiles.toString());
		if (identifier != null)
			result = interfaceshared_fileimport.proxies.ImportFiles.load(context, identifier);
		return result;
	}

	/**
	 * Set value of IncomingFile_ImportFiles
	 * @param incomingfile_importfiles
	 */
	public final void setIncomingFile_ImportFiles(interfaceshared_fileimport.proxies.ImportFiles incomingfile_importfiles)
	{
		setIncomingFile_ImportFiles(getContext(), incomingfile_importfiles);
	}

	/**
	 * Set value of IncomingFile_ImportFiles
	 * @param context
	 * @param incomingfile_importfiles
	 */
	public final void setIncomingFile_ImportFiles(com.mendix.systemwideinterfaces.core.IContext context, interfaceshared_fileimport.proxies.ImportFiles incomingfile_importfiles)
	{
		if (incomingfile_importfiles == null)
			getMendixObject().setValue(context, MemberNames.IncomingFile_ImportFiles.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.IncomingFile_ImportFiles.toString(), incomingfile_importfiles.getMendixObject().getId());
	}

	/**
	 * @return value of IncomingFile_Template
	 */
	public final excelimporter.proxies.Template getIncomingFile_Template() throws com.mendix.core.CoreException
	{
		return getIncomingFile_Template(getContext());
	}

	/**
	 * @param context
	 * @return value of IncomingFile_Template
	 */
	public final excelimporter.proxies.Template getIncomingFile_Template(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		excelimporter.proxies.Template result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.IncomingFile_Template.toString());
		if (identifier != null)
			result = excelimporter.proxies.Template.load(context, identifier);
		return result;
	}

	/**
	 * Set value of IncomingFile_Template
	 * @param incomingfile_template
	 */
	public final void setIncomingFile_Template(excelimporter.proxies.Template incomingfile_template)
	{
		setIncomingFile_Template(getContext(), incomingfile_template);
	}

	/**
	 * Set value of IncomingFile_Template
	 * @param context
	 * @param incomingfile_template
	 */
	public final void setIncomingFile_Template(com.mendix.systemwideinterfaces.core.IContext context, excelimporter.proxies.Template incomingfile_template)
	{
		if (incomingfile_template == null)
			getMendixObject().setValue(context, MemberNames.IncomingFile_Template.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.IncomingFile_Template.toString(), incomingfile_template.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final interfaceshared_fileimport.proxies.IncomingFile that = (interfaceshared_fileimport.proxies.IncomingFile) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "InterfaceShared_FileImport.IncomingFile";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
