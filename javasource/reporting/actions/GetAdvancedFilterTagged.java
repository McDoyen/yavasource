// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package reporting.actions;

import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.MismatchedTokenException;
import org.antlr.runtime.MissingTokenException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.TokenStream;
import reporting.booleanparser.BooleanLexer;
import reporting.booleanparser.BooleanParser;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class GetAdvancedFilterTagged extends CustomJavaAction<java.lang.String>
{
	private java.lang.String AdvancedFilterPar;
	private java.lang.String StartTag;
	private java.lang.String EndTag;

	public GetAdvancedFilterTagged(IContext context, java.lang.String AdvancedFilterPar, java.lang.String StartTag, java.lang.String EndTag)
	{
		super(context);
		this.AdvancedFilterPar = AdvancedFilterPar;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
	}

	@Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			Core.getLogger(this.toString()).trace("Input: " +AdvancedFilterPar);
	    	if (AdvancedFilterPar==null) return null;
	        ANTLRStringStream input = new ANTLRStringStream(AdvancedFilterPar);
	        BooleanLexer lexer = new BooleanLexer( input );
	        TokenStream tokens = new CommonTokenStream( lexer );
	        BooleanParser parser = new BooleanParser(tokens);
	        parser.eval();
	        
	        String result = "";
	        for(int i=0;i<parser.getTokenStream().range();i++) {  // Use < instead of <= to skip the <EOF> token
	    		String token = parser.getTokenStream().get(i).getText();
	        	Core.getLogger(this.toString()).trace("Token: " + token);
	        	if (token.matches("[0-9]+")) {
		        	result = result + StartTag + token + EndTag;		        		
	        	} else {
	        		result = result + token;
	        	}
	        }
			Core.getLogger(this.toString()).trace("Output: " +result);
	        return result;
	    } catch (MissingTokenException e) {
		    return "Missing token at line " + e.line + " pos " + e.charPositionInLine;	    	 
	    } catch (MismatchedTokenException e) {
		    return "Mismatched token at line " + e.line + " pos " + e.charPositionInLine;	    	 
	    } catch (NoViableAltException e) {
		    return "Unexpected token at line " + e.line + " pos " + e.charPositionInLine + ". Please use 0-9,'and','or','not','(',')' or whitespace in proper syntax.";	    	 
	    } catch (RecognitionException e) {
	        return "Parser exception " + e.getMessage() + " " + e.getClass().getName() + " at line " + e.line + " pos " + e.charPositionInLine;
	    }
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "GetAdvancedFilterTagged";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
