// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package reporting.proxies;

public class ServiceFilter extends reporting.proxies.ReportFilter
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Reporting.ServiceFilter";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		FilterType("FilterType"),
		ReadableString("ReadableString"),
		Editable("Editable"),
		IsDefault("IsDefault"),
		IsCopyOfDefault("IsCopyOfDefault"),
		FilterID("FilterID"),
		FilterDefinitionName("FilterDefinitionName"),
		ServiceFilter_Services("Reporting.ServiceFilter_Services"),
		ReportFilter_ReportSelect("Reporting.ReportFilter_ReportSelect"),
		ReportFilter_Definition("Reporting.ReportFilter_Definition"),
		ReportFilter_User("Reporting.ReportFilter_User");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ServiceFilter(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Reporting.ServiceFilter"));
	}

	protected ServiceFilter(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject serviceFilterMendixObject)
	{
		super(context, serviceFilterMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("Reporting.ServiceFilter", serviceFilterMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Reporting.ServiceFilter");
	}

	/**
	 * @deprecated Use 'ServiceFilter.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static reporting.proxies.ServiceFilter initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return reporting.proxies.ServiceFilter.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static reporting.proxies.ServiceFilter initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new reporting.proxies.ServiceFilter(context, mendixObject);
	}

	public static reporting.proxies.ServiceFilter load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return reporting.proxies.ServiceFilter.initialize(context, mendixObject);
	}

	public static java.util.List<reporting.proxies.ServiceFilter> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<reporting.proxies.ServiceFilter> result = new java.util.ArrayList<reporting.proxies.ServiceFilter>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Reporting.ServiceFilter" + xpathConstraint))
			result.add(reporting.proxies.ServiceFilter.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of ServiceFilter_Services
	 */
	public final java.util.List<slm.proxies.Service> getServiceFilter_Services() throws com.mendix.core.CoreException
	{
		return getServiceFilter_Services(getContext());
	}

	/**
	 * @param context
	 * @return value of ServiceFilter_Services
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<slm.proxies.Service> getServiceFilter_Services(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<slm.proxies.Service> result = new java.util.ArrayList<slm.proxies.Service>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.ServiceFilter_Services.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(slm.proxies.Service.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of ServiceFilter_Services
	 * @param servicefilter_services
	 */
	public final void setServiceFilter_Services(java.util.List<slm.proxies.Service> servicefilter_services)
	{
		setServiceFilter_Services(getContext(), servicefilter_services);
	}

	/**
	 * Set value of ServiceFilter_Services
	 * @param context
	 * @param servicefilter_services
	 */
	public final void setServiceFilter_Services(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<slm.proxies.Service> servicefilter_services)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (slm.proxies.Service proxyObject : servicefilter_services)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.ServiceFilter_Services.toString(), identifiers);
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final reporting.proxies.ServiceFilter that = (reporting.proxies.ServiceFilter) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Reporting.ServiceFilter";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
